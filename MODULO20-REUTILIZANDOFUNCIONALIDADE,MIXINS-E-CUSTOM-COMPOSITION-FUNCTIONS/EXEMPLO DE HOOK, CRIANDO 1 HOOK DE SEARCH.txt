








OK.. TALVEZ VC SE LEMBRE QUE 

O 

PROFESSOR 

NOS MOSTROU 1 PROJETO MAIOR,







EM QUE 


TALVEZ SEJA LEGAL USAR 





HOOKS (pq já estamos com a VERSÃO 'COMPOSITION API' DESSE PROJETO) 












VAMOS PEGAR ESSE PROJETO DE NOVO,





PQ AGORA VAMOS __ ESTUDAR O 'REUSE DE FUNCTIONALITY'


NESSE PROJECT...



















--> OK... AGORA O PROFESSOR QUER REUTILIZAR 1 POUCO DE FUNCIONALIDADE...







--> TEMOS O COMPONENT  DE 'USERLIST':







<template>
  <base-container>
    <h2>Active Users</h2>
    <base-search
      @search="updateSearch"
      :search-term="enteredSearchTerm"
    ></base-search>
    <div>
      <button @click="sort('asc')" :class="{ selected: sorting === 'asc' }">
        Sort Ascending
      </button>
      <button @click="sort('desc')" :class="{ selected: sorting === 'desc' }">
        Sort Descending
      </button>
    </div>
    <ul>
      <user-item
        v-for="user in displayedUsers"
        :key="user.id"
        :user-name="user.fullName"
        :id="user.id"
        @list-projects="$emit('list-projects', $event)"
      ></user-item>
    </ul>
  </base-container>
</template>

<script>
import UserItem from './UserItem.vue';

import { ref, computed, watch } from 'vue';

export default {
  components: {
    UserItem,
  },
  props: ['users'],
  emits: ['list-projects'],
  setup(props) {
    //data
    const enteredSearchTerm = ref('');
    const activeSearchTerm = ref('');
    const sorting = ref(null);

    //methods
    const updateSearch = (val) => {
      enteredSearchTerm.value = val;
    };

    const sort = (mode) => {
      sorting.value = mode;
    };
    //watch

    watch(enteredSearchTerm, (val) => {
      setTimeout(() => {
        if (val === enteredSearchTerm.value) {
          activeSearchTerm.value = val;
        }
      }, 300);
    });

    //computed
    const availableUsers = computed(() => {
      let users = [];
      if (activeSearchTerm.value) {
        users = props.users.filter((usr) =>
          usr.fullName.includes(activeSearchTerm.value)
        );
      } else if (props.users) {
        users = props.users;
      }
      return users;
    });

    const displayedUsers = computed(() => {
      if (!sorting.value) {
        return availableUsers.value;
      }
      return availableUsers.value.slice().sort((u1, u2) => {
        if (sorting.value === 'asc' && u1.fullName > u2.fullName) {
          return 1;
        } else if (sorting.value === 'asc') {
          return -1;
        } else if (sorting.value === 'desc' && u1.fullName > u2.fullName) {
          return -1;
        } else {
          return 1;
        }
      });
    });

    return {
      enteredSearchTerm,
      activeSearchTerm,
      availableUsers,
      displayedUsers,
      updateSearch,
      sort,
    };
  },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>























NESSE COMPONENT 'USERLIST',

TEMOS 




A FUNCIONALIDADE DE 'SEARCH',


2 PIECES OF DATA,,




1 COMPUTED PROPERTY E 1 WATCHER..











--> TEMOS A MESMA COISA EM 'PROJECTSLIST':








<template>
  <base-container v-if="user">
    <h2>{{ user.fullName }}: Projects</h2>
    <base-search
      v-if="hasProjects"
      @search="updateSearch"
      :search-term="enteredSearchTerm"
    ></base-search>
    <ul v-if="hasProjects">
      <project-item
        v-for="prj in availableProjects"
        :key="prj.id"
        :title="prj.title"
      ></project-item>
    </ul>
    <h3 v-else>No projects found.</h3>
  </base-container>
  <base-container v-else>
    <h3>No user selected.</h3>
  </base-container>
</template>

<script>
import { watch, ref, computed, toRefs } from 'vue';
import ProjectItem from './ProjectItem.vue';

export default {
  components: {
    ProjectItem,
  },
  props: ['user'],

  setup(props) {
    //methods
    const updateSearch = (val) => {
      enteredSearchTerm.value = val;
    };

    //data
    const enteredSearchTerm = ref('');
    const activeSearchTerm = ref('');

    //computed
    const hasProjects = computed(() => {
      return props.user.projects && availableProjects.value.length > 0;
    });

    const availableProjects = computed(() => {
      if (activeSearchTerm.value) {
        return props.user.projects.filter((prj) =>
          prj.title.includes(activeSearchTerm.value)
        );
      }
      return props.user.projects;
    });

    //watch
    watch(enteredSearchTerm, (val) => {
      setTimeout(() => {
        if (val === enteredSearchTerm.value) {
          activeSearchTerm.value = val;
        }
      }, 300);
    });

    // watch(props.user, () => { ////NÃO PODEMOS FAZER WATCH DE 'user' EM SI, PQ O 'user' EM SI __ NAÕ É UM REACTIVE VALUE...
    // watch(props, () => {  ////como 'props' é um REACTIVE OBJECT, é possível fazer WATCH de seu value...
    //   enteredSearchTerm.value = '';
    // });

    // PORÉM, MELHOR DO QUE ISSO É __ FAZER WATCH DA REF DE 'user', que pode ser extraída por meio de 'toRefs' e OBJECT DESTRUCTURING, tipo assim:

    const { user } = toRefs(props);

    watch(user, () => {
      enteredSearchTerm.value = '';
    });

    return {
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      updateSearch,
    };
  },

};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>








---------------------------

















ok... 


TALVEZ OS ELEMENTOS SEJAM DIFERENTES, MAS É A MESMA FUNCIONALIDADE...










DEVEMOS VER COMO PODEMOS USAR 1 'CUSTOM HOOK'




NESSES 2 COMPONENTS....













-_> É POR ISSO QUE O PROFESSOR CRIA 1 

PASTA DE 'hooks'...










--> ELE ADICIONA UM ARQUIVO 'search.js'...











ESCREVEMOS TIPO ASSIM:







export default function search() {
    
}








VAMOS USAR ESSE 


search 


NA USERLIST E NA PROJECTSLIST...











--> OK... HÁ MT FUNCIONALIDADE EM COMUM...










-- É POR ISSO QUE VAMOS EM 'USERLIST'

E PEGAMOS TODO O CÓDIGO..





ex:











import { ref, watch, computed } from 'vue';

export default function search() {
  //data
  const enteredSearchTerm = ref('');
  const activeSearchTerm = ref('');
  const sorting = ref(null);

  //methods
  const updateSearch = (val) => {
    enteredSearchTerm.value = val;
  };

  const sort = (mode) => {
    sorting.value = mode;
  };
  //watch

  watch(enteredSearchTerm, (val) => {
    setTimeout(() => {
      if (val === enteredSearchTerm.value) {
        activeSearchTerm.value = val;
      }
    }, 300);
  });

  //computed
  const availableUsers = computed(() => {
    let users = [];
    if (activeSearchTerm.value) {
      users = props.users.filter((usr) =>
        usr.fullName.includes(activeSearchTerm.value)
      );
    } else if (props.users) {
      users = props.users;
    }
    return users;
  });

  const displayedUsers = computed(() => {
    if (!sorting.value) {
      return availableUsers.value;
    }
    return availableUsers.value.slice().sort((u1, u2) => {
      if (sorting.value === 'asc' && u1.fullName > u2.fullName) {
        return 1;
      } else if (sorting.value === 'asc') {
        return -1;
      } else if (sorting.value === 'desc' && u1.fullName > u2.fullName) {
        return -1;
      } else {
        return 1;
      }
    });
  });

  return {
    enteredSearchTerm,
    activeSearchTerm,
    availableUsers,
    displayedUsers,
    updateSearch,
    sort,
  };
}















OK...








COPIAMOS TUDO ISSO AÍ LÁ EM 'search.js'...














--> AGORA PODEMOS IMPORTAR ESSA FUNCTION E A CHAMAR,

LÁ EM 


'UserList'


e 

'PROJECTSLIST'...











CERTO..










FICOU TIPO ASSIM, INICIALMENTE:





  setup(props) {

    const {
      enteredSearchTerm,
      activeSearchTerm,
      availableUsers,
      displayedUsers,
      updateSearch,
      sort,
    } = useSearch();

    return {
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      availableUsers,
      displayedUsers,
      sort,
      updateSearch,
    };
  },













  OK... MAS AQUI TEMOS 1 PROBLEMA...







  NESSE HOOK, OS 'props'

  NÃO ESTÃO DISPONÍVEIS,

  E ELES SÃO CHAMADOS VÁRIAS VEZES:



















  import { ref, watch, computed } from 'vue';

export default function search() {
  //data
  const enteredSearchTerm = ref('');
  const activeSearchTerm = ref('');
  const sorting = ref(null);

  //methods
  const updateSearch = (val) => {
    enteredSearchTerm.value = val;
  };

  const sort = (mode) => {
    sorting.value = mode;
  };
  //watch

  watch(enteredSearchTerm, (val) => {
    setTimeout(() => {
      if (val === enteredSearchTerm.value) {
        activeSearchTerm.value = val;
      }
    }, 300);
  });

  //computed
  const availableUsers = computed(() => {
    let users = [];
    if (activeSearchTerm.value) {
      users = props.users.filter((usr) =>
        usr.fullName.includes(activeSearchTerm.value)
      );
    } else if (props.users) {
      users = props.users;
    }
    return users;
  });

  const displayedUsers = computed(() => {
    if (!sorting.value) {
      return availableUsers.value;
    }
    return availableUsers.value.slice().sort((u1, u2) => {
      if (sorting.value === 'asc' && u1.fullName > u2.fullName) {
        return 1;
      } else if (sorting.value === 'asc') {
        return -1;
      } else if (sorting.value === 'desc' && u1.fullName > u2.fullName) {
        return -1;
      } else {
        return 1;
      }
    });
  });

  return {
    enteredSearchTerm,
    activeSearchTerm,
    availableUsers,
    displayedUsers,
    updateSearch,
    sort,
  };
}





----------------










CERTO.... OS PROPS NÃO ESTÃO DISPONÍVEIS, DE FATO,



MAS __ PODEMOS __ PASSAR 'props'

COMO 




1 PARAMETER DESSE HOOK, QUE ENTÃO ELES FICARÃO DISPONÍVEIS,
TIPO ASSIM:
















import { ref, watch, computed } from 'vue';

export default function search(props) { // este hook receberá 'props' como parameter..
  //data
  const enteredSearchTerm = ref('');
  const activeSearchTerm = ref('');
  const sorting = ref(null);

  //methods
  const updateSearch = (val) => {
    enteredSearchTerm.value = val;
  };

  const sort = (mode) => {
    sorting.value = mode;
  };
  //watch

  watch(enteredSearchTerm, (val) => {
    setTimeout(() => {
      if (val === enteredSearchTerm.value) {
        activeSearchTerm.value = val;
      }
    }, 300);
  });

  //computed
  const availableUsers = computed(() => {
    let users = [];
    if (activeSearchTerm.value) {
      users = props.users.filter((usr) =>
        usr.fullName.includes(activeSearchTerm.value)
      );
    } else if (props.users) {
      users = props.users;
    }
    return users;
  });

  const displayedUsers = computed(() => {
    if (!sorting.value) {
      return availableUsers.value;
    }
    return availableUsers.value.slice().sort((u1, u2) => {
      if (sorting.value === 'asc' && u1.fullName > u2.fullName) {
        return 1;
      } else if (sorting.value === 'asc') {
        return -1;
      } else if (sorting.value === 'desc' && u1.fullName > u2.fullName) {
        return -1;
      } else {
        return 1;
      }
    });
  });

  return {
    enteredSearchTerm,
    activeSearchTerm,
    availableUsers,
    displayedUsers,
    updateSearch,
    sort,
  };
}























--> OK.. MAS O PROFESSOR COLOCOU UM NOME DE 'items',

em vez de 'props'...







-> PQ ELE QUER QUE ESSE HOOK FUNCIONE EM QUALQUER ARRAY,

E NÃO 


SÓ 

COM 

'users'...







-> É POR ISSO QUE REFATORAMOS PARA FICAR ASSIM:




















import { ref, watch, computed } from 'vue';

export default function search(items) {
  // este hook receberá uma propriedade de 'props' como parameter..
  //data
  const enteredSearchTerm = ref('');
  const activeSearchTerm = ref('');
  const sorting = ref(null);

  //methods
  const updateSearch = (val) => {
    enteredSearchTerm.value = val;
  };

  const sort = (mode) => {
    sorting.value = mode;
  };
  //watch

  watch(enteredSearchTerm, (val) => {
    setTimeout(() => {
      if (val === enteredSearchTerm.value) {
        activeSearchTerm.value = val;
      }
    }, 300);
  });

  //computed
  const availableItems = computed(() => {
    let filteredItems = [];
    if (activeSearchTerm.value) {
      filteredItems = items.filter((usr) =>
        usr.fullName.includes(activeSearchTerm.value)
      );
    } else if (items) {
      filteredItems = items;
    }
    return filteredItems;
  });

  const displayedItems = computed(() => {
    if (!sorting.value) {
      return availableItems.value;
    }
    return availableItems.value.slice().sort((u1, u2) => {
      if (sorting.value === 'asc' && u1.fullName > u2.fullName) {
        return 1;
      } else if (sorting.value === 'asc') {
        return -1;
      } else if (sorting.value === 'desc' && u1.fullName > u2.fullName) {
        return -1;
      } else {
        return 1;
      }
    });
  }); 

  return {
    enteredSearchTerm,
    activeSearchTerm,
    availableItems,
    displayedItems,
    updateSearch,
    sort,
  };
}













vai ficando tipo assim....
















--> ok, mas aqui temos 1 PROBLEMA...












--> O 'availableItems'



TEM 1 LÓGICA BEM ESPECÍFICA, QUE SÓ VAI FUNCIONAR COM 'USERS' (não vai funcionar com projects):




(

    'usr.fullName'...

)





-> MAS EM 'PROJECTSLIST',

ESTAMOS FILTRANDO POR 'title'...













--> HÁ 2 MANEIRAS DE RESOLVER ISSO,

FAZER ESSE HOOK FUNCIONAR EM 2 


COMPONENTS DIFERENTES,




COM 1 NECESSIDADE DE FILTRO DIFERENTE..












--> PODEMOS 





1) PASSAR A FUNÇÃO DE FILTRO COMO PARÂMETRO PARA ESSE HOOK...









2) OU, SE SABEMOS QUE SEMPRE VAMOS OPERAR EM 1 'ITEM' 

MAS A __ PROPRIEDADE__ QUE 




SEGURA O NOME PARA O FILTERING DIFERE,



PODEMOS 



SÓ 

COLOCAR 1 PARAMETER EXTRA QUE _ SERÁ __ O 'NOME' DA PROPERTY 
QUE 

SERÁ 

USADA NO FILTRO,
TIPO ASSIM:













  const availableItems = computed(() => {
    let filteredItems = [];
    if (activeSearchTerm.value) {
      filteredItems = items.filter((item) => {
        if (itemName === 'user') {
          return item.fullName.includes(activeSearchTerm.value);
        }

        if (itemName === 'project') {
          return item.title.includes(activeSearchTerm.value);
        }
      });
    } else if (items) {
      filteredItems = items;
    }
    return filteredItems;
  });











  CERTO...










  O CÓDIGO COMPLETO FICA ASSIM:










  import { ref, watch, computed } from 'vue';

export default function search(items, itemName) {
  // este hook receberá uma propriedade de 'props' como parameter..
  //data
  const enteredSearchTerm = ref('');
  const activeSearchTerm = ref('');
  const sorting = ref(null);

  //methods
  const updateSearch = (val) => {
    enteredSearchTerm.value = val;
  };

  const sort = (mode) => {
    sorting.value = mode;
  };
  //watch

  watch(enteredSearchTerm, (val) => {
    setTimeout(() => {
      if (val === enteredSearchTerm.value) {
        activeSearchTerm.value = val;
      }
    }, 300);
  });

  //computed
  const availableItems = computed(() => {
    let filteredItems = [];
    if (activeSearchTerm.value) {
      filteredItems = items.filter((item) => {
        if (itemName === 'user') {
          return item.fullName.includes(activeSearchTerm.value);
        }

        if (itemName === 'project') {
          return item.title.includes(activeSearchTerm.value);
        }
      });
    } else if (items) {
      filteredItems = items;
    }
    return filteredItems;
  });

  const displayedItems = computed(() => {
    if (!sorting.value) {
      return availableItems.value;
    }
    return availableItems.value.slice().sort((u1, u2) => {
      if (sorting.value === 'asc' && u1.fullName > u2.fullName) {
        return 1;
      } else if (sorting.value === 'asc') {
        return -1;
      } else if (sorting.value === 'desc' && u1.fullName > u2.fullName) {
        return -1;
      } else {
        return 1;
      }
    });
  });

  return {
    enteredSearchTerm,
    activeSearchTerm,
    availableItems,
    displayedItems,
    updateSearch,
    sort,
  };
}















E PARA CONSEGUIRMOS CHAMAR ISSO NOS LUGARES, DEVEMOS PASSAR 

ESSA STRING DE 'project' ou 'user' COMO SEGUNDO PARÂMETRO...







TIPO ASSIM:
















<template>
  <base-container>
    <h2>Active Users</h2>
    <base-search
      @search="updateSearch"
      :search-term="enteredSearchTerm"
    ></base-search>
    <div>
      <button @click="sort('asc')" :class="{ selected: sorting === 'asc' }">
        Sort Ascending
      </button>
      <button @click="sort('desc')" :class="{ selected: sorting === 'desc' }">
        Sort Descending
      </button>
    </div>
    <ul>
      <user-item
        v-for="user in displayedUsers"
        :key="user.id"
        :user-name="user.fullName"
        :id="user.id"
        @list-projects="$emit('list-projects', $event)"
      ></user-item>
    </ul>
  </base-container>
</template>

<script>
import UserItem from './UserItem.vue';
import useSearch from '../../../hooks/search';

// import { ref, computed, watch } from 'vue';

export default {
  components: {
    UserItem,
  },
  props: ['users'],
  emits: ['list-projects'],
  setup(props) {
    // //data
    // const enteredSearchTerm = ref('');
    // const activeSearchTerm = ref('');
    // const sorting = ref(null);

    // //methods
    // const updateSearch = (val) => {
    //   enteredSearchTerm.value = val;
    // };

    // const sort = (mode) => {
    //   sorting.value = mode;
    // };
    // //watch

    // watch(enteredSearchTerm, (val) => {
    //   setTimeout(() => {
    //     if (val === enteredSearchTerm.value) {
    //       activeSearchTerm.value = val;
    //     }
    //   }, 300);
    // });

    // //computed
    // const availableUsers = computed(() => {
    //   let users = [];
    //   if (activeSearchTerm.value) {
    //     users = props.users.filter((usr) =>
    //       usr.fullName.includes(activeSearchTerm.value)
    //     );
    //   } else if (props.users) {
    //     users = props.users;
    //   }
    //   return users;
    // });

    // const displayedUsers = computed(() => {
    //   if (!sorting.value) {
    //     return availableUsers.value;
    //   }
    //   return availableUsers.value.slice().sort((u1, u2) => {
    //     if (sorting.value === 'asc' && u1.fullName > u2.fullName) {
    //       return 1;
    //     } else if (sorting.value === 'asc') {
    //       return -1;
    //     } else if (sorting.value === 'desc' && u1.fullName > u2.fullName) {
    //       return -1;
    //     } else {
    //       return 1;
    //     }
    //   });
    // });

    const [
      enteredSearchTerm,
      activeSearchTerm,
      availableUsers,
      displayedUsers,
      updateSearch,
      sort,
    ] = useSearch(props.users, 'user');

    return {
      enteredSearchTerm,
      activeSearchTerm,
      availableUsers,
      displayedUsers,
      updateSearch,
      sort,
    };
  },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>


















E ASSIM:

















<template>
  <base-container v-if="user">
    <h2>{{ user.fullName }}: Projects</h2>
    <base-search
      v-if="hasProjects"
      @search="updateSearch"
      :search-term="enteredSearchTerm"
    ></base-search>
    <ul v-if="hasProjects">
      <project-item
        v-for="prj in availableProjects"
        :key="prj.id"
        :title="prj.title"
      ></project-item>
    </ul>
    <h3 v-else>No projects found.</h3>
  </base-container>
  <base-container v-else>
    <h3>No user selected.</h3>
  </base-container>
</template>

<script>
// import { watch, ref, computed, toRefs } from 'vue';
import useSearch from '../../../hooks/search';
import ProjectItem from './ProjectItem.vue';

export default {
  components: {
    ProjectItem,
  },
  props: ['user'],

  setup(props) {
    // //methods
    // const updateSearch = (val) => {
    //   enteredSearchTerm.value = val;
    // };

    // //data
    // const enteredSearchTerm = ref('');
    // const activeSearchTerm = ref('');

    // //computed
    // const hasProjects = computed(() => {
    //   return props.user.projects && availableProjects.value.length > 0;
    // });

    // const availableProjects = computed(() => {
    //   if (activeSearchTerm.value) {
    //     return props.user.projects.filter((prj) =>
    //       prj.title.includes(activeSearchTerm.value)
    //     );
    //   }
    //   return props.user.projects;
    // });

    // //watch
    // watch(enteredSearchTerm, (val) => {
    //   setTimeout(() => {
    //     if (val === enteredSearchTerm.value) {
    //       activeSearchTerm.value = val;
    //     }
    //   }, 300);
    // });

    // // watch(props.user, () => { ////NÃO PODEMOS FAZER WATCH DE 'user' EM SI, PQ O 'user' EM SI __ NAÕ É UM REACTIVE VALUE...
    // // watch(props, () => {  ////como 'props' é um REACTIVE OBJECT, é possível fazer WATCH de seu value...
    // //   enteredSearchTerm.value = '';
    // // });

    // // PORÉM, MELHOR DO QUE ISSO É __ FAZER WATCH DA REF DE 'user', que pode ser extraída por meio de 'toRefs' e OBJECT DESTRUCTURING, tipo assim:

    // const { user } = toRefs(props);

    // watch(user, () => {
    //   enteredSearchTerm.value = '';
    // });

    // return {
    //   enteredSearchTerm,
    //   activeSearchTerm,
    //   hasProjects,
    //   availableProjects,
    //   updateSearch,
    // };

    const [
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      availableUsers,
      displayedUsers,
      sort,
      updateSearch,
    ] = useSearch(props.user.projects, 'project');

    return {
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      availableUsers,
      displayedUsers,
      sort,
      updateSearch,
    };
  },

  // data() {
  //   return {
  //     enteredSearchTerm: '',
  //     activeSearchTerm: '',
  //   };
  // },
  // computed: {
  //   hasProjects() {
  //     return this.user.projects && this.availableProjects.length > 0;
  //   },
  //   availableProjects() {
  //     if (this.activeSearchTerm) {
  //       return this.user.projects.filter((prj) =>
  //         prj.title.includes(this.activeSearchTerm)
  //       );
  //     }
  //     return this.user.projects;
  //   },
  // },
  // methods: {
  //   updateSearch(val) {
  //     this.enteredSearchTerm = val;
  //   },
  // },
  // watch: {
  //   enteredSearchTerm(val) {
  //     setTimeout(() => {
  //       if (val === this.enteredSearchTerm) {
  //         this.activeSearchTerm = val;
  //       }
  //     }, 300);
  //   },
  //   user() {
  //     this.enteredSearchTerm = '';
  //   },
  // },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>








-------------------











ok... COM ISSO, FICAMOS COM UMA FILTERING LOGIC MAIS FLEXÍVEL...














--> O PROFESSOR RETORNA AS COISAS COMO 1 OBJECT...










MAS EU RETORNEI COMO 1 ARRAY...















--> array é melhor, nesse caso (mais genérico)...












tipo assim:







    const [
      enteredSearchTerm,
      activeSearchTerm,
      availableUsers,
      displayedUsers,
      updateSearch,
      sort,
    ] = useSearch(props.users, 'user');

    return {
      enteredSearchTerm,
      activeSearchTerm,
      availableUsers,
      displayedUsers,
      updateSearch,
      sort,
    };
  },















  OK... AÍ FICAMOS CAPAZES DE SEARCH E SORT USERS, COMO ANTES,


  MAS AGORA 

  COM ESSE SEARCH HOOK...











  --> FICAMOS COM CÓDIGO REUSABLE...