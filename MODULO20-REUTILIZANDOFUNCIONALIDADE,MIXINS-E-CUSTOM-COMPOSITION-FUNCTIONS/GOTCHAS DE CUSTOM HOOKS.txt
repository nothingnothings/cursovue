










OK... AQUI, EM PROJECTSLIST,


PODEMOS TAMBÉM 

COMENTAR PARA FORA TODO O  CÓDIGO,

E DEIXAR ALGO TIPO ASSIM:





 <template>
  <base-container v-if="user">
    <h2>{{ user.fullName }}: Projects</h2>
    <base-search
      v-if="hasProjects"
      @search="updateSearch"
      :search-term="enteredSearchTerm"
    ></base-search>
    <ul v-if="hasProjects">
      <project-item
        v-for="prj in availableProjects"
        :key="prj.id"
        :title="prj.title"
      ></project-item>
    </ul>
    <h3 v-else>No projects found.</h3>
  </base-container>
  <base-container v-else>
    <h3>No user selected.</h3>
  </base-container>
</template>

<script>
// import { watch, ref, computed, toRefs } from 'vue';
import useSearch from '../../../hooks/search';
import ProjectItem from './ProjectItem.vue';

export default {
  components: {
    ProjectItem,
  },
  props: ['user'],

  setup(props) {
    // //methods
    // const updateSearch = (val) => {
    //   enteredSearchTerm.value = val;
    // };

    // //data
    // const enteredSearchTerm = ref('');
    // const activeSearchTerm = ref('');

    // //computed
    // const hasProjects = computed(() => {
    //   return props.user.projects && availableProjects.value.length > 0;
    // });

    // const availableProjects = computed(() => {
    //   if (activeSearchTerm.value) {
    //     return props.user.projects.filter((prj) =>
    //       prj.title.includes(activeSearchTerm.value)
    //     );
    //   }
    //   return props.user.projects;
    // });

    // //watch
    // watch(enteredSearchTerm, (val) => {
    //   setTimeout(() => {
    //     if (val === enteredSearchTerm.value) {
    //       activeSearchTerm.value = val;
    //     }
    //   }, 300);
    // });

    // // watch(props.user, () => { ////NÃO PODEMOS FAZER WATCH DE 'user' EM SI, PQ O 'user' EM SI __ NAÕ É UM REACTIVE VALUE...
    // // watch(props, () => {  ////como 'props' é um REACTIVE OBJECT, é possível fazer WATCH de seu value...
    // //   enteredSearchTerm.value = '';
    // // });

    // // PORÉM, MELHOR DO QUE ISSO É __ FAZER WATCH DA REF DE 'user', que pode ser extraída por meio de 'toRefs' e OBJECT DESTRUCTURING, tipo assim:

    // const { user } = toRefs(props);

    // watch(user, () => {
    //   enteredSearchTerm.value = '';
    // });

    // return {
    //   enteredSearchTerm,
    //   activeSearchTerm,
    //   hasProjects,
    //   availableProjects,
    //   updateSearch,
    // };

    const [
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      availableUsers,
      displayedUsers,
      sort,
      updateSearch,
    ] = useSearch(props.user.projects, 'project');

    return {
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      availableUsers,
      displayedUsers,
      sort,
      updateSearch,
    };
  },

  // data() {
  //   return {
  //     enteredSearchTerm: '',
  //     activeSearchTerm: '',
  //   };
  // },
  // computed: {
  //   hasProjects() {
  //     return this.user.projects && this.availableProjects.length > 0;
  //   },
  //   availableProjects() {
  //     if (this.activeSearchTerm) {
  //       return this.user.projects.filter((prj) =>
  //         prj.title.includes(this.activeSearchTerm)
  //       );
  //     }
  //     return this.user.projects;
  //   },
  // },
  // methods: {
  //   updateSearch(val) {
  //     this.enteredSearchTerm = val;
  //   },
  // },
  // watch: {
  //   enteredSearchTerm(val) {
  //     setTimeout(() => {
  //       if (val === this.enteredSearchTerm) {
  //         this.activeSearchTerm = val;
  //       }
  //     }, 300);
  //   },
  //   user() {
  //     this.enteredSearchTerm = '';
  //   },
  // },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>















CERTO...









OK, MAS SE RECARREGAMOS A PÁGINA, GANHAMOS 1 ERROR 

'''CANNOT READ PROPERTIES OF NULL (reading 'projects')'''











-> MAS PQ __ GANHAMOS ESSE ERROR?













--> ESSE PROBLEMA ACONTECE _ JUSTAMENTE _ PQ 

''NÃO TEMOS NENHUM USER SELECIONADO 

INICIALMENTE''...













--> OU SEJA, INICIALMENTE MEU USER FICA COMO 'NULL',

E AÍ 

EU TENTO ACESSAR 'PROJECTS' EM 1 NEGÓCIO QUE ESTÁ COMO 'NULL'...











-----> OK... MAS QUE WORKAROUND PODERIAMOS COLOCAR AQUI?













--> 1 WORKAROUND É COLOCAR 1 HELPER VARIABLE EM QUE CHECAMOS SE 'props.user'

EXISTE -> SE FOR, 

VAMOS ACESSAR 'props.user.projects'


e o armazenar em projects..



CASO CONTRÁRIO, VAMOS ARMAZENAR 1 EMPTY ARRAY EM PROJECTS..




TIPO ASSIM:


















<template>
  <base-container v-if="user">
    <h2>{{ user.fullName }}: Projects</h2>
    <base-search
      v-if="hasProjects"
      @search="updateSearch"
      :search-term="enteredSearchTerm"
    ></base-search>
    <ul v-if="hasProjects">
      <project-item
        v-for="prj in availableProjects"
        :key="prj.id"
        :title="prj.title"
      ></project-item>
    </ul>
    <h3 v-else>No projects found.</h3>
  </base-container>
  <base-container v-else>
    <h3>No user selected.</h3>
  </base-container>
</template>

<script>
// import { watch, ref, computed, toRefs } from 'vue';
import useSearch from '../../../hooks/search';
import ProjectItem from './ProjectItem.vue';

export default {
  components: {
    ProjectItem,
  },
  props: ['user'],

  setup(props) {
    // //methods
    // const updateSearch = (val) => {
    //   enteredSearchTerm.value = val;
    // };

    // //data
    // const enteredSearchTerm = ref('');
    // const activeSearchTerm = ref('');

    // //computed
    // const hasProjects = computed(() => {
    //   return props.user.projects && availableProjects.value.length > 0;
    // });

    // const availableProjects = computed(() => {
    //   if (activeSearchTerm.value) {
    //     return props.user.projects.filter((prj) =>
    //       prj.title.includes(activeSearchTerm.value)
    //     );
    //   }
    //   return props.user.projects;
    // });

    // //watch
    // watch(enteredSearchTerm, (val) => {
    //   setTimeout(() => {
    //     if (val === enteredSearchTerm.value) {
    //       activeSearchTerm.value = val;
    //     }
    //   }, 300);
    // });

    // // watch(props.user, () => { ////NÃO PODEMOS FAZER WATCH DE 'user' EM SI, PQ O 'user' EM SI __ NAÕ É UM REACTIVE VALUE...
    // // watch(props, () => {  ////como 'props' é um REACTIVE OBJECT, é possível fazer WATCH de seu value...
    // //   enteredSearchTerm.value = '';
    // // });

    // // PORÉM, MELHOR DO QUE ISSO É __ FAZER WATCH DA REF DE 'user', que pode ser extraída por meio de 'toRefs' e OBJECT DESTRUCTURING, tipo assim:

    // const { user } = toRefs(props);

    // watch(user, () => {
    //   enteredSearchTerm.value = '';
    // });

    // return {
    //   enteredSearchTerm,
    //   activeSearchTerm,
    //   hasProjects,
    //   availableProjects,
    //   updateSearch,
    // };

    const projects = props.user ? props.user.projects : []; ////SE O 'user' foi selecionado, carregue seus projects... caso contrário, carregue 1 empty array (array inicial)...

    const [
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      availableUsers,
      displayedUsers,
      sort,
      updateSearch,
    ] = useSearch(projects, 'project'); /// será ou '[]' ou 'props.user.projects'

    return {
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      availableUsers,
      displayedUsers,
      sort,
      updateSearch,
    };
  },

  // data() {
  //   return {
  //     enteredSearchTerm: '',
  //     activeSearchTerm: '',
  //   };
  // },
  // computed: {
  //   hasProjects() {
  //     return this.user.projects && this.availableProjects.length > 0;
  //   },
  //   availableProjects() {
  //     if (this.activeSearchTerm) {
  //       return this.user.projects.filter((prj) =>
  //         prj.title.includes(this.activeSearchTerm)
  //       );
  //     }
  //     return this.user.projects;
  //   },
  // },
  // methods: {
  //   updateSearch(val) {
  //     this.enteredSearchTerm = val;
  //   },
  // },
  // watch: {
  //   enteredSearchTerm(val) {
  //     setTimeout(() => {
  //       if (val === this.enteredSearchTerm) {
  //         this.activeSearchTerm = val;
  //       }
  //     }, 300);
  //   },
  //   user() {
  //     this.enteredSearchTerm = '';
  //   },
  // },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>
















OK... AGORA ISSO ESTÁ FUNCIONANDO...















CERTO.... MAS PARECE QUE AGORA,

SEMPRE QUE 

ESCOLHEMOS ALGUM USER,
SEMPRE FICAMOS COM 'NO PROJECTS FOUND' PARA CADA 1 DELES...














--> PARECE QUE HÁ ALGO DE ERRADO COM NOSSO CÓDIGO..









MAS QUAL É O PROBLEMA? 









PROVAVELMENTE É O FATO DE QUE _'o props em si é reativo,

MAS __ AS COISAS/PROPRIEDADES NO INTERIOR DELE, NÃO SÃO'...










--> PARA FAZER COM QUE SEJAM REATIVAS,


PRECISAMOS 

USAR 'toRefs()'


NOS PROPS..



TIPO ASSIM:




    const reactiveProps = toRefs(props);

    const projects = reactiveProps.user ? reactiveProps.user.projects : []; ////SE O 'user' foi selecionado, carregue seus projects... caso contrário, carregue 1 empty array (array inicial)...









TENTEI FAZER ISSO, MAS O NEGÓCIO AINDA NÃO FUNCIONOU....











O PROFESSOR APONTA QUE UMA MANEIRA FÁCIL DE RESOLVER ISSO É DEFINIR 





'projects'


COMO SENDO UMA COMPUTED PROPERTY, TIPO ASSIM:







    const projects = computed(() => {
      return props.user ? props.user.projects : []; ////SE O 'user' foi selecionado, carregue seus projects... caso contrário, carregue 1 empty array (array inicial)...
    });











--> OK...







AO FAZER ISSO, GARANTIMOS QUE O COMPUTED/VUE 


CONSEGUE DETECTAR/WATCH OUT 



FOR 'PROPS',


PQ 


VAI PERCEBER QUE 'props'

É UMA DEPENDENCY 

DENTRO 



DA COMPUTED PROPERTY...  --> E SEMPRE QUE 

'PROPS'

FOR ALTERADO (o user for alterado),




SERÃO CARREGADOS NOVOS PROJECTS...














CERTO...














FICA TIPO ASSIM:















 setup(props) {
    // //methods
    // const updateSearch = (val) => {
    //   enteredSearchTerm.value = val;
    // };

    // //data
    // const enteredSearchTerm = ref('');
    // const activeSearchTerm = ref('');

    // //computed
    // const hasProjects = computed(() => {
    //   return props.user.projects && availableProjects.value.length > 0;
    // });

    // const availableProjects = computed(() => {
    //   if (activeSearchTerm.value) {
    //     return props.user.projects.filter((prj) =>
    //       prj.title.includes(activeSearchTerm.value)
    //     );
    //   }
    //   return props.user.projects;
    // });

    // //watch
    // watch(enteredSearchTerm, (val) => {
    //   setTimeout(() => {
    //     if (val === enteredSearchTerm.value) {
    //       activeSearchTerm.value = val;
    //     }
    //   }, 300);
    // });

    // // watch(props.user, () => { ////NÃO PODEMOS FAZER WATCH DE 'user' EM SI, PQ O 'user' EM SI __ NAÕ É UM REACTIVE VALUE...
    // // watch(props, () => {  ////como 'props' é um REACTIVE OBJECT, é possível fazer WATCH de seu value...
    // //   enteredSearchTerm.value = '';
    // // });

    // // PORÉM, MELHOR DO QUE ISSO É __ FAZER WATCH DA REF DE 'user', que pode ser extraída por meio de 'toRefs' e OBJECT DESTRUCTURING, tipo assim:

    // const { user } = toRefs(props);

    // watch(user, () => {
    //   enteredSearchTerm.value = '';
    // });

    // return {
    //   enteredSearchTerm,
    //   activeSearchTerm,
    //   hasProjects,
    //   availableProjects,
    //   updateSearch,
    // };

    const { user } = toRefs(props);

    const projects = computed(() => {
      return user.value ? user.value.projects : []; ////SE O 'user' foi selecionado, carregue seus projects... caso contrário, carregue 1 empty array (array inicial)...
    });
    let [
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      availableUsers,
      displayedUsers,
      sort,
      updateSearch,
    ] = useSearch(projects, 'project'); /// será ou '[]' ou 'props.user.projects'

    watch(user, () => {
      enteredSearchTerm = '';
    });

    return {
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      availableUsers,
      displayedUsers,
      sort,
      updateSearch,
    };
  },
};








--------------------






OK...









--> MAS SURGE 1 NOVO PROBLEMA:




OS 'projects' AGORA SÃO 1 COMPUTED PROPERTY..







--> COMPUTED PROPERTIES SÃO 'READ-ONLY REFS'...










-----> E ESTAMOS PASSANDO 1 REF _ A 'useSearch'... ----> (o hook)....















------> já em 'UserList',


ESTAMOS PASSANDO 1 ARRAY DE 'props.users',

QUE 

NÃO É UMA REF...















------> ok... --> QUER DIZER QUE EM 1 LUGAR ESTAMOS PASSANDO 1 REF,


EM OUTRO NÃO ESTAMOS PASSANDO 1 REF (estamos passando 1 array)...

















-> O PROBLEMA É JUSTAMENTE QUE O HOOK DE 'search.js'

ESTÁ RECEBENDO TANTO 'REFS', COMO VALUES ESTÁTICOS...











MAS O QUE QUEREMOS  É __ 'RECEBER APENAS REFS'...








--> ISSO PQ A COMPUTED PROPERTY DE 'availableItems'

DEVE SER REEXAMINADA SEMPRE QUE 'items'


FOR ALTERADO...













--->  MAS NÃO PODEMOS RODAR O FILTER EM CIMA DE REFS,
E SIM 


PODEMOS RODAR EM CIMA DE 'ref.value',


POR ISSO 


TROCAMOS TODOS OS 'items' por 'items.value',

TIPO ASSIM:

















import { ref, watch, computed } from 'vue';

export default function search(items, itemName) {
  // este hook receberá uma propriedade de 'props' como parameter..
  //data
  const enteredSearchTerm = ref('');
  const activeSearchTerm = ref('');
  const sorting = ref(null);

  //methods
  const updateSearch = (val) => {
    enteredSearchTerm.value = val;
  };

  const sort = (mode) => {
    sorting.value = mode;
  };
  //watch

  watch(enteredSearchTerm, (val) => {
    setTimeout(() => {
      if (val === enteredSearchTerm.value) {
        activeSearchTerm.value = val;
      }
    }, 300);
  });

  //computed
  const availableItems = computed(() => {
    let filteredItems = [];
    if (activeSearchTerm.value) {
      filteredItems = items.value.filter((item) => { //'items.value' pq se trata de 1 REF...
        if (itemName === 'user') {
          return item.value.fullName.includes(activeSearchTerm.value);
        }

        if (itemName === 'project') {
          return item.value.title.includes(activeSearchTerm.value);
        }
      });
    } else if (items) {
      filteredItems = items.value;
    }
    return filteredItems;
  });

  const displayedItems = computed(() => {
    if (!sorting.value) {
      return availableItems.value;
    }
    return availableItems.value.slice().sort((u1, u2) => {
      if (sorting.value === 'asc' && u1.fullName > u2.fullName) {
        return 1;
      } else if (sorting.value === 'asc') {
        return -1;
      } else if (sorting.value === 'desc' && u1.fullName > u2.fullName) {
        return -1;
      } else {
        return 1;
      }
    });
  });

  return [
    enteredSearchTerm,
    activeSearchTerm,
    availableItems,
    displayedItems,
    updateSearch,
    sort,
  ];
}

















OK....









MAS AINDA ESTAMOS RECEBENDO 'REF' E 'ARRAY', DE LUGARES DIFERENTES....








PARA RESOLVER ISSO, DEVEMOS IR ATÉ 'UserList'




E TRANSFORMAR O  VALUE DE 



'props.users'

EM 1 REF,

COM 
'toRefs()'...






EX:









const { users } = toRefs(props);









TIPO ASSIM:














<template>
  <base-container>
    <h2>Active Users</h2>
    <base-search
      @search="updateSearch"
      :search-term="enteredSearchTerm"
    ></base-search>
    <div>
      <button @click="sort('asc')" :class="{ selected: sorting === 'asc' }">
        Sort Ascending
      </button>
      <button @click="sort('desc')" :class="{ selected: sorting === 'desc' }">
        Sort Descending
      </button>
    </div>
    <ul>
      <user-item
        v-for="user in displayedUsers"
        :key="user.id"
        :user-name="user.fullName"
        :id="user.id"
        @list-projects="$emit('list-projects', $event)"
      ></user-item>
    </ul>
  </base-container>
</template>

<script>
import UserItem from './UserItem.vue';
import useSearch from '../../../hooks/search';

// import { ref, computed, watch } from 'vue';

import { toRefs } from 'vue';

export default {
  components: {
    UserItem,
  },
  props: ['users'],
  emits: ['list-projects'],
  setup(props) {
    // //data
    // const enteredSearchTerm = ref('');
    // const activeSearchTerm = ref('');
    // const sorting = ref(null);

    // //methods
    // const updateSearch = (val) => {
    //   enteredSearchTerm.value = val;
    // };

    // const sort = (mode) => {
    //   sorting.value = mode;
    // };
    // //watch

    // watch(enteredSearchTerm, (val) => {
    //   setTimeout(() => {
    //     if (val === enteredSearchTerm.value) {
    //       activeSearchTerm.value = val;
    //     }
    //   }, 300);
    // });

    // //computed
    // const availableUsers = computed(() => {
    //   let users = [];
    //   if (activeSearchTerm.value) {
    //     users = props.users.filter((usr) =>
    //       usr.fullName.includes(activeSearchTerm.value)
    //     );
    //   } else if (props.users) {
    //     users = props.users;
    //   }
    //   return users;
    // });

    // const displayedUsers = computed(() => {
    //   if (!sorting.value) {
    //     return availableUsers.value;
    //   }
    //   return availableUsers.value.slice().sort((u1, u2) => {
    //     if (sorting.value === 'asc' && u1.fullName > u2.fullName) {
    //       return 1;
    //     } else if (sorting.value === 'asc') {
    //       return -1;
    //     } else if (sorting.value === 'desc' && u1.fullName > u2.fullName) {
    //       return -1;
    //     } else {
    //       return 1;
    //     }
    //   });
    // });

    const { users } = toRefs(props);

    const [
      enteredSearchTerm,
      activeSearchTerm,
      availableUsers,
      displayedUsers,
      updateSearch,
      sort,
    ] = useSearch(users, 'user');

    return {
      enteredSearchTerm,
      activeSearchTerm,
      availableUsers,
      displayedUsers,
      updateSearch,
      sort,
    };
  },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>


















OK.. AGORA FINALMENTE PODEMOS TROCAR ENTRE DIFERENTES USERS E SEUS PROJECTS..




O SEARCH...





ainda não funciona..














O SEARCH DE USERS FUNCIONA, MAS O DE PROJECTS, NÃO.








TEREI DE COPIAR O CÓDIGO DO PROFESSOR, PQ NÃO ESTÁ FUNCIONANDO ESSE SEARCH DOS PROJECTS... (alguma coisa a ver com o method de 'watch')..











acho que deu errado pq O PROFESSOR TEM UM OUTRO HOOK, O HOOK DE 'SORT' --> que é usado para 


coisas como 'displayedItems'...




-> DEVEMOS ASSISTIR à PRÓXIMA AULA...