










O PROFESSOR COLOCA 1 NOVO PROJECT...







É UM PROJECT SIMPLES,



QUE 

ADICIONA OU REMOVE 1 USER....











-> ELE ABRE 1 MODAL...







--> QUANDO CLICAMOS NO MODAL DE 'DELETE USER',



ENXERGAMOS QUASE O MESMO ALERT/DIALOG,

MAS COM 


1 TEXT DIFERENTE...











--> TEMOS OS 2 COMPONENTS ADICIONADOS EM 'App.vue'...









--> E TEMOS O COMPONENT DE 'user-alert'

ADICIONADO, COMO LOCAL COMPONENT,



NOS 2 COMPONENTS...














--> O PROFESSOR 


ADICIONOU ESSE COMPONENT COMO 

'LOCAL COMPONENT'


NOS 2 COMPONENTS..








---> OS 2 COMPONENTS DE 'ADDUSER'

e 

'DELETEUSEr'


SÃO QUASE IGUAIS,

MAS POSSUEM TEMPLATES DIFERENTES... (uma diferença entre eles)...










--> ISSO JÁ NOS LEVA AO TÓPICO CENTRAL DO MÓDULO,



' O QUE PODEMOS REUTILIZAR, EM QUESTÃO DE CÓDIGO'...












-> MAS O QUE PODEMOS REUTILIZAR?








1) O HTML STRUCTURE E A STYLING --> ISSO É TIPICAMENTE ALGO QUE 
REUTILIZAMOS NA NOSSA PAGE,


FREQUENTEMENTE TEMOS DIFERENTES PARTES DE NOSSA PAGE QUE 

USAM 

ACTUALLY 



__A MESMA ESTRUTURA HTML E STYLING (como list items, em que cada 1 tem a mesma aparência)..









CERTO... MAS FREQUENTEMENTE 

QUEREMOS 


REUTILIZAR:


2) LÓGICA, REUTILIZAR LÓGICA E EVENTS...





-> E É EXATAMENTE POR ISSO QUE TEMOS ESSE CONCEITO DE 'COMPONENTS' --> COMO TEMOS 

ESSE CONCEITO 

INCORPORADO NO VUE,

TEMOS UMA MANEIRA PODEROSA DE ENCAPSULAR 
STYLING,
STRUCTURE 
E LOGIC 


EM 1 COMPONENT,

QUE 

ENTÃO 
PODE SER 

USADO 


EM QUALQUER PARTE DE NOSSA PAGE...








--> E, GRAÇAS A PROPS E SLOTS,
AINDA PODEMOS 
CUSTOMIZAR ESSE COMPONENT,


A CERTO PONTO....



E É EXATAMENTE ISSO QUE O PROFESSOR ESTÁ FAZENDO AQUI, EM CERTA MEDIDA...







PQ O USER ESTÁ USANDO O 'user-alert'

TANTO 



NO 


'DELETEUSER'


COMO 

NO 

'ADDUSER'...













E ESSES COMPONENTS,
POR SI PRÓPRIOS,

SÃO 


PEDAÇOS 
ENCAPSULADOS 

DE 



HTML E LÓGICA..















--> E ESSA É A IDEIA POR TRÁS DE COMPONENTS:






TEMOS STRUCTURE, STYLE E LOGIC,






TODA ENCAPSULADA EM 1 REUSABLE BUILDING BLOCK...









MAS ISSO NÃO É NADA NOVO...








--> JÁ TRABALHAMOS MT COM CONCEPTS,.....






MAS É O CONCEITO CORE,
QUANDO O ASSUNTO É REUSABILITY...









MAS AS COISAS 

NÃO ACABAM POR AQUI...














--> A PARTE NOVA:








MESMO COM COMPONENTS,


QUE SÃO ÓTIMOS PARA TER 1 ENCAPSULATED TEMPLATE E LOGIC,


TAMBÉM 

CUSTOMIZATION OPTIONS,

COM SLOTS,




PROPS E CUSTOM EVENTS,


MESMO COM TUDO ISSO,





E MESMO COM ESSE CONCEITO FORTE,





ÀS VEZES FICAMOS COM CÓDIGO QUE QUEREMOS REUTILIZAR, MAS QUE 

NÃO PODEMOS COM TANT FACILIDADE..











--> DIGAMOS QUE TEMOS 2 COMPONENTS 




COM LÓGICA 'RELATED' OU 'SIMILAR'...








--> EXEMPLO:






O COMPONENT DE 'UserList'

COM 


1 SEARCH METHOD, COM A DATA RELACIONADA A SEARCH E 1 WATCHER RELACIONADO A SEARCH....







--> PODEMOS TER ESSA MESMA LÓGICA EM 1 COMPONENT DE NOME 'ProjectsList',



EXATAMENTE A MESMA LÓGICA....




--> E, EM CASOS COMO ESSES, CRIAR 1 NOVO COMPONENT QUE 
TENHA ESSA 
'COMBINED LOGIC'


_ NEM __ SEMPRE SERÁ POSSÍVEL -----------> E É EXATAMENTE POR CONTA DISSO QUE 

EXISTE 


1

CONCEITO CHAMADO DE 

'mix-ins'


NA OPTIONS API...








--> MIX-INS --> TE DEIXAM COMPARTILHAR DATA, 

METHODS,

WATCHERS,

LIFECYCLE HOOKS,
QUALQUER COISA QUE VC QUISER,


AO LONGO DE MÚLTIPLOS COMPONENTS..











--> DEVEMOS ESTUDAR MIXINS, E VER COMO ELES PODEM NOS AJUDAR NESSE EXAMPLE PROJECT...