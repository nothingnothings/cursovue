






OK... MAS O PROFESSOR AINDA TEM ALGUMAS OBSERVAÇÕES





SOBRE A NOSSA SOLUÇÃO...














--> temos a computed property de 'hasProjects' --> estamos usando 

'props.user.projects',



















AJEITEI 1 POUCO O 'ProjectsList':















<template>
  <base-container v-if="user">
    <h2>{{ user.fullName }}: Projects</h2>
    <base-search
      v-if="hasProjects"
      @search="updateSearch"
      :search-term="enteredSearchTerm"
    ></base-search>
    <ul v-if="hasProjects">
      <project-item
        v-for="prj in availableProjects"
        :key="prj.id"
        :title="prj.title"
      ></project-item>
    </ul>
    <h3 v-else>No projects found.</h3>
  </base-container>
  <base-container v-else>
    <h3>No user selected.</h3>
  </base-container>
</template>

<script>
// import { watch, ref, computed, toRefs } from 'vue';
import { toRefs, computed, watch } from 'vue';
import useSearch from '../../../hooks/search';
import ProjectItem from './ProjectItem.vue';

export default {
  components: {
    ProjectItem,
  },
  props: ['user'],

  setup(props) {
    // //methods
    // const updateSearch = (val) => {
    //   enteredSearchTerm.value = val;
    // };

    // //data
    // const enteredSearchTerm = ref('');
    // const activeSearchTerm = ref('');

    // //computed
    // const hasProjects = computed(() => {
    //   return props.user.projects && availableProjects.value.length > 0;
    // });

    // const availableProjects = computed(() => {
    //   if (activeSearchTerm.value) {
    //     return props.user.projects.filter((prj) =>
    //       prj.title.includes(activeSearchTerm.value)
    //     );
    //   }
    //   return props.user.projects;
    // });

    // //watch
    // watch(enteredSearchTerm, (val) => {
    //   setTimeout(() => {
    //     if (val === enteredSearchTerm.value) {
    //       activeSearchTerm.value = val;
    //     }
    //   }, 300);
    // });

    // // watch(props.user, () => { ////NÃO PODEMOS FAZER WATCH DE 'user' EM SI, PQ O 'user' EM SI __ NAÕ É UM REACTIVE VALUE...
    // // watch(props, () => {  ////como 'props' é um REACTIVE OBJECT, é possível fazer WATCH de seu value...
    // //   enteredSearchTerm.value = '';
    // // });

    // // PORÉM, MELHOR DO QUE ISSO É __ FAZER WATCH DA REF DE 'user', que pode ser extraída por meio de 'toRefs' e OBJECT DESTRUCTURING, tipo assim:

    // const { user } = toRefs(props);

    // watch(user, () => {
    //   enteredSearchTerm.value = '';
    // });

    // return {
    //   enteredSearchTerm,
    //   activeSearchTerm,
    //   hasProjects,
    //   availableProjects,
    //   updateSearch,
    // };

    const { user } = toRefs(props);

    const projects = computed(() => {
      return user.value ? user.value.projects : []; ////SE O 'user' foi selecionado, carregue seus projects... caso contrário, carregue 1 empty array (array inicial)...
    });

    const [
      enteredSearchTerm,
      activeSearchTerm,
      availableProjects,
      displayedProjects,
      updateSearch,
      sort,
    ] = useSearch(projects, 'project'); /// será ou '[]' ou 'props.user.projects'

    watch(user, () => {
      enteredSearchTerm = '';
    });

    const hasProjects = computed(() => {
      return user.value.projects && availableProjects.value.length > 0;
    });

    return {
      enteredSearchTerm,
      activeSearchTerm,
      availableProjects,
      displayedProjects,
      updateSearch,
      sort,
      hasProjects
    };
  },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>






------------------------











CERTO...






MAS ESTAMOS COM 1 PROBLEMA:






ESTAMOS MUDANDO O VALUE DE 1 REF 

DEFINIDA DENTRO 

DO HOOK,

DO LADO DE FORA DO HOOK -------> ISSO É BEM RUIM,


PQ DEIXA SEU CÓDIGO 




NADA MAINTAINABLE...
















--> ISSO PODE INTERFERIR EM LÓGICA QUE VC TEM DENTRO DO HOOK...










É POR ISSO QUE 




UMA MANEIRA 


MAIS ELEGANTE DE MUDAR 1 VALUE QUE É DEFINIDO E USADO DENTRO 

DE 

1 HOOK É 


DEFINIIR 1 



FUNCTION SEPARADA,

QUE DEVE SER USADA 

SE 

VC 

QUER 

UPDATAR 1 DESSES VALUES... ----> ESSA FUNCTION,

NO CASO,


SERÁ 'updateSearch',





QUE 

VAI 
SETTAR O 


value do field como VAZIO 

depois que trocarmos 

de 



user...


TIPO ASSIM:





watch(user, () => {
    updateSearch("")
})







CERTO... FAREI ISSO...








ACABAMOS COM A SEARCH FUNCTIONALITY...









--> COMO ÚLTIMA TAREFA,

 O PROFESSOR QUER UMA MANEIRA DE 




 OUTSOURCEAR AQUELA LÓGICA DE 'sort' --> ELA PODE 


 SER USADA EM MÚLTIPLOS COMPONENTS...










 --> VEREMOS COMO FAZER ISSO MELHOR NA PRÓXIMA AULA...











 OK... CONSEGUI  FAZER ISSO FUNCIONAR, MAIS OU MENOS....





 