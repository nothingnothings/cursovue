









OK.... É ASSIM QUE PODEMOS REUTILIZAR FUNCIONALIDADE, AO LONGO DE COMPONENTS,

COM A COMPOSITION API....









--> CERTO.... MAS PODEMOS FAZER MAIS DO QUE ESTAMOS 

FAZENDO ATÉ AGORA....












--> ISSO PQ __ PODEMOS _ FAZER_ MAIS COISAS EM 'SETUP'

DO QUE 
APENAS 


REUSAR A LÓGICA DE 'useAlert'...







-> para demonstrar isso,


o professor 


DECIDE DEFINIR 1 REF EXTRA,

COMO 'alertTitle',


tipo assim:





const alertTitle = ref('Delete User?');










ELE COLOCA ISSO DENTRO DO 


setup() do 'deleteUser',

TIPO ASSIM:





  setup() {

    const alertTitle = ref('Delete User?');
    useAlert(); 
    const [alertIsVisible, showAlert, hideAlert] = useAlert(); //array destructuring... (pq o result de 'useAlert' é um array, realmente)...

    return {
      alertIsVisible,
      showAlert,
      hideAlert,
    };
  },













--> CERTO...








PODEMOS TER MAIS REFS, COMPUTED PROPERTIES 
e 

WATCHERS,




QUALQUER COISA,

NÃO INTERESSA O FATO DE QUE VC ESTÁ USANDO HOOKS...












--> OK, O PROFESSOR VAI BINDAR O TITLE NO 'user-alert',




exatamente como fizemos com o 'mix-in'...











EX:












<template>
  <!-- <user-alert v-if="alertIsVisible" title="Delete the User?" @close="hideAlert"> -->
    <user-alert v-if="alertIsVisible" :title="titleAlert" @close="hideAlert"></user-alert>
    <p>Do you want to continue with deleting a user?</p>
  </user-alert>
  <section>
    <h2>Delete a User</h2>
    <button @click="showAlert">Delete User</button>
  </section>
</template>

<script>
// import { ref } from 'vue';
import UserAlert from './UserAlert.vue';
import { useAlert } from '../hooks/alert';

export default {
  components: {
    UserAlert,
  },
  setup() {
    useAlert();
    // const alertIsVisible = ref(false);

    // function showAlert() {
    //   alertIsVisible.value = true;
    // }
    // function hideAlert() {
    //   alertIsVisible.value = false;
    // }

    //? isso é quase como um mixin, mas DA COMPOSITION API...
    // const alertArray = useAlert(); //? isso vai EXECUTAR TODO O CÓDIGO VISTO LOGO ACIMA (de definição da 'data' e 'methods', com a composition api)...

    const [alertIsVisible, showAlert, hideAlert] = useAlert(); //array destructuring... (pq o result de 'useAlert' é um array, realmente)...

    return {
      alertIsVisible,
      showAlert,
      hideAlert,
      titleAlert
    };
  },
};
</script>















OK.... ANTIGAMENTE, COM A OPTIONS API,


A DATA, METHODS, WATCHERS E COMPUTED ERAM MERGED 

ENTRE O MIXIN E AS SUAS PROPERTIES LOCAIS...













JÁ COM A 'COMPOSITION API' E OS HOOKS,




NÓS PODEMOS IMPORTAR AS COISAS QUE INTERESSAM LÁ 


DOS HOOKS (com 'useXXX()', armazenado em uma const),




 E ENTÃO 




 __ USAR_  O RESTO DAS COISAS (data, methods, watchers e computed) 



 NORMALMENTE,

 dentro do setup() method....















 -> CERTO...





 E NOSSO CUSTOM HOOK TAMBÉM É CAPAZ DE __ RECEBER__ ARGUMENTOS...






 --> O HOOK PRECISA RETORNAR AS COISAS QUE 



 VC QUER QUE FIQUEM DISPONÍVEIS..


















 -> OK... MAS OS HOOKS TAMBÉM ACEITAM ARGUMENTOS....









 DIGAMOS QUE O VALUE DEFAULT DE 'alertIsVisible'


 deve ser 'true'...












 -->  