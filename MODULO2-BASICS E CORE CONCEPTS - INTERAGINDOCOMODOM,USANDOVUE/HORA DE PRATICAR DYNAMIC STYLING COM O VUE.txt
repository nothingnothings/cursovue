
O PROFESSOR PREPAROU UM OUTRO ASSIGNMENT, O ÚLTIMO DO MÓDULO, O 4...








-> O CÓDIGO É ESTE:






* {
  box-sizing: border-box;
}

html {
  font-family: 'Jost', sans-serif;
}

body {
  margin: 0;
}

header {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  margin: 3rem;
  border-radius: 10px;
  padding: 1rem;
  background-color: #1b995e;
  color: white;
  text-align: center;
}

#assignment {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  margin: 3rem;
  border-radius: 10px;
  padding: 1rem;
  text-align: center;
}

#assignment h2 {
  font-size: 2rem;
  border-bottom: 4px solid #ccc;
  color: #1b995e;
  margin: 0 0 1rem 0;
}

#assignment p {
  font-size: 1.25rem;
  font-weight: bold;
  background-color: #8ddba4;
  padding: 0.5rem;
  color: #1f1f1f;
  border-radius: 25px;
}

#assignment input {
  font: inherit;
  border: 1px solid #ccc;
}

#assignment input:focus {
  outline: none;
  border-color: #1b995e;
  background-color: #d7fdeb;
}

#assignment button {
  font: inherit;
  cursor: pointer;
  border: 1px solid #ff0077;
  background-color: #ff0077;
  color: white;
  padding: 0.05rem 1rem;
  box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.26);
}

#assignment button:hover,
#assignment button:active {
  background-color: #ec3169;
  border-color: #ec3169;
  box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.26);
}

.user1 {
  background-color: blue;
  color: white;
}

.user2 {
  background-color: purple;
  color: white;
}

.hidden {
  display: none;
}

.visible {
  display: block;
}









E ESTE:











<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link href="https://fonts.googleapis.com/css2?family=Jost:wght@400;700&display=swap" rel="stylesheet">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Events</title>
</head>

<body>
    <header>
        <h1>Vue Styling</h1>   
    </header>
    <section id="assignment">
        <!-- 1) Fetch the user input and use it as a CSS class -->
        <!-- The entered class should be added to the below paragraph -->
        <input type="text">
        <!-- (available classes: "user1", "user2") -->
        <p>
            Style me!
          </p>


          
          <button>Toggle Paragraph</button>
          <!-- 2) Use the "visible" and "hidden" classes to show/ hide the above paragraph -->
          <!-- Clicking the button should toggle between the two options -->
          <!-- 3) Add dynamic inline styling to the below paragraph and let the user enter a background-color -->
          <input type="text">
          <p>Style me inline!</p>

    </section>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="app.js"></script>
</body>

</html>










PARA A PRIMEIRA TAREFA, O PROFESSOR QUER QUE FAÇAMOS FETCH 



DA 



DATA INPUTTADA NO USER INPUT,

E AÍ 

UTILIZEMOS ESSA DATA PARA __ 

ATIVAR_ UMA CSS CLASS 

LÁ NAQUELE PARAGRAPH DE 'style me!'...










--> ok...





faremos isso com V-BIND (data-binding de attributes, com classes, provavelmente)...









ok, vou tentar...









PARA ESSA PRIMEIRA PARTE, FIZ ALGO TIPO ASSIM:












const app = Vue.createApp({
  data() {
    return {
      userInput: '',
    };
  },

  watch: {},

  computed: {
    userInputClasses() {
      return {
        user1: userInput === '',
        user2: userInput !== ''
      }
    },
  },

  methods: {},
});



















E LÁ NO HTML:








        <input type="text" v-model="userInput">
        <!-- (available classes: "user1", "user2") -->
        <p :class="userInputClasses">
            Style me!
          </p>








          --> ou seja,


          FIZ UM TWO-WAY BINDING com aquele primeiro input, para então 


          USAR ESSE TWO WAY-BINDING 


          para ATIVAR/DESATIVAR AS CLASSES DE 'user1'

          e 
          'user2'

          usados naquele '<p>'...












--> ops... esqueci o 'this'...



FICOU TIPO ASSIM:





const app = Vue.createApp({
  data() {
    return {
      userInput: '',
    };
  },

  watch: {},

  computed: {
    userInputClasses() {
      return {
        user1: this.userInput === '',
        user2: this.userInput !== ''
      }
    },
  },

  methods: {},
});










OK, AGORA FUNCIONOU...









O CÓDIGO FICOU ASSIM:











const app = Vue.createApp({
  data() {
    return {
      userInput: '',
    };
  },

  watch: {},

  computed: {
    userInputClasses() {

      return {
        user1: this.userInput === '',
        user2: this.userInput !== '',
      };
    },
  },

  methods: {},
});

app.mount('#assignment');



















tudo certo....







O PARAGRAPH TEM SEU ESTILO ALTERADO, ENTRE 'user1' ou 'user2',



A PARTIR 


da presença ou não de uma string 




no 'state'


do nosso 'userInput'...










--> O PROFESSOR PEDE UMA MANEIRA ALTERNATIVA, TALVEZ 'escrever user1 para conseguir o style 1, e user2 para o user2 style'...









ok... se quisermos isso, deve ficar assim o código...:










const app = Vue.createApp({
  data() {
    return {
      userInput: '',
    };
  },

  watch: {},

  computed: {
    userInputClasses() {

      return {
        user1: this.userInput === 'user1',
        user2: this.userInput === 'user2',
      };
    },
  },

  methods: {},
});

app.mount('#assignment');














CERTO...













A PRÓXIMA TAREFA É:






         <button>Toggle Paragraph</button>
          <!-- 2) Use the "visible" and "hidden" classes to show/ hide the above paragraph -->
          <!-- Clicking the button should toggle between the two options -->












---------> ok... é o add/remove dessas classes a partir do click nesse button...








FICA TIPO ASSIM:
















const app = Vue.createApp({
  data() {
    return {
      userInput: '',
      visible: true,
    };
  },

  watch: {},

  computed: {
    userInputClasses() {
      return {
        user1: this.userInput === 'user1',
        user2: this.userInput === 'user2',
      };
    },

    toggleParagraphClasses() {
      return {
        visible: this.visible,
        hidden: !this.visible,
      };
    },
  },

  methods: {
    toggleParagraph() {
      this.visible = !this.visible;
    },
  },
});

app.mount('#assignment');














E NO CÓDIGO HTML:







        <p :class="[userInputClasses, toggleParagraphClasses]">
            Style me!
          </p>



          <button @click="toggleParagraph">Toggle Paragraph</button>


















OK, ISSO REALMENTE FUNCIONOU...










AGORA SÓ FALTA A TAREFA 3...












          <!-- 3) Add dynamic inline styling to the below paragraph and let the user enter a background-color -->
          <input type="text">
          <p>Style me inline!</p>
















---> CERTO....







novamente, usaremos TWO-WAY BINDING, para aí PERMITIR AO USER 
DEFINIR A COR 

DESSE PARAGRAPH...







FICA TIPO ASSIM:








          <input type="text" v-model="color" >
          <p :style="{backgroundColor: color}">Style me inline!</p>







CERTO... devo testar...








LÁ NO 

CÓDIGO VUE,
FICOU ASSIM:







const app = Vue.createApp({
  data() {
    return {
      userInput: '',
      visible: true,
      color: 'black'
    };
  },














  OK... TESTANDO..









  OK, ESSE CÓDIGO REALMENTE FUNCIONOU:














  const app = Vue.createApp({
  data() {
    return {
      userInput: '',
      visible: true,
      color: 'green',
    };
  },

  watch: {},

  computed: {
    userInputClasses() {
      return {
        user1: this.userInput === 'user1',
        user2: this.userInput === 'user2',
      };
    },

    toggleParagraphClasses() {
      return {
        visible: this.visible,
        hidden: !this.visible,
      };
    },
  },

  methods: {
    toggleParagraph() {
      this.visible = !this.visible;
    },
  },
});

app.mount('#assignment');

















SOLUÇÃO DO PROBLEAM:


















const app = Vue.createApp(
  {
    data() {},


    watch: {},



    computed: {},




    methods: {}

  }
)
















EX:














const app = Vue.createApp(
  {
    data() {

      return {
        userInput: ''
      }



    },


    watch: {},



    computed: {},




    methods: {}

  }
)







EM USER INPUT ARMAZENEI 



o input do user...








-->  DEPOIS USEI 'v-model'

para usar 


TWO-WAY BINDING 



com o input do user...








--> ex:
















const app = Vue.createApp(
  {
    data() {

      return {
        userInput: ''
      }



    },


    watch: {},



    computed: {},




    methods: {}

  }
)











<input type="text" v-model="inputClass" />












--> DEPOIS DISSO, QUEREMOS BINDAR 'CLASS' DINAMICAMENTE...







-->





O PROFESSOR INICIALMENTE BINDOU ':class' 

do paragraph



COMO 



VINCULADO 


AO 



'inputClass'...












--> E, JÁ COM ISSO,



PODEMOS 


ESCREVER 'user1'


e 
'user2'



NO INPUT DO USER,

QUE ISSO JÁ VAI UPDATAR



AS CLASSES 




DESSE INPUT FIELD (para essas 2 classes disponiveis)...
















--> MAS VOCÊ PODE, ALTERNATIVAMENTE,


USAR A SINTAXE DE OBJECT 




COM A SINTAXE 



DE 

__ 'computed properties',



PARA __ QUE _ FIQUE TIPO ASSIM:









  computed: {
    userInputClasses() {
      return {
        user1: this.userInput === 'user1',
        user2: this.userInput === 'user2',
      };
    },














    --> COM ISSO,

    RETIRAMOS ESSE CÓDIGO DO HTML E COLOCAMOS LÁ NO JAVASCRIPT...
















  OK, QUAL É A TAREFA 2?











  --> BEM, TEMOS ESSE PARAGRAPH AÍ,

  E QUEREMOS 





  TOGGLAR AS CLASSES 'VISIBLE' E 'HIDDEN'


  A PARTIR 

  DE CLICKS NAQUELE BUTTON..











  --> OK, MAS COMO PODEMOS IMPLEMENTAR ISSO?










  --> BEM , PRECISAMOS 

  DE UM CLICK LISTENER LÁ NO BUTTON,

  POR ISSO ESCREVEMOS ASSIM:









  <button @click="">Toggle Paragraph</button>









  -> AÍ O PROFESSOR ESCREVEU ALGO TIPO ASSIM:









      toggleParagraphClasses() {
      return {
        visible: this.visible,
        hidden: !this.visible,
      };
    },
















  CERTO...








  DEPOIS APONTA-SE 


  AO METHOD, LÁ NO CLICK LISTENER,

  TIPO ASSIM:






  
  <button @click="toggleParagraphClass">Toggle Paragraph</button>

















  --> DEPOIS O PROFESSOR USA UMA COMPUTED PROPERTY 

  PARA 



OUTPUTTAR DINAMICAMENTE A CLASS 


DE 




'visible' e 'hidden'....






CERTO, FOI EXATAMENTE O QUE EU FIZ...






ex:














const app = Vue.createApp({
  data() {
    return {
      userInput: '',
      visible: true,
      color: 'green',
    };
  },

  watch: {},

  computed: {
    userInputClasses() {
      return {
        user1: this.userInput === 'user1',
        user2: this.userInput === 'user2',
      };
    },

    toggleParagraphClasses() {
      return {
        visible: this.visible,
        hidden: !this.visible,
      };
    },
  },

  methods: {
    toggleParagraph() {
      this.visible = !this.visible;
    },
  },
});

app.mount('#assignment');

















OK... AGORA SÓ RESTOU A TASK N3...










---> A TASK 3 ENVOLVE INLINE STYLING (que você não vai usar mt, mas que é bom que você saiba usar)...











--> O QUE O USER INPUTTAR NO INPUT FIELD,

DEVERÁ 

SER CONVERTIDO EM 1 COLOR DE BACKGROUND...










EU ESCREVI ASSIM:





    <p :style="{backgroundColor: color}">Style me inline!</p>








    E ASSIM:







            <input type="text" v-model="color" >









      ---> E LÁ NO CÓDIGO VUE:





      const app = Vue.createApp({
  data() {
    return {
      userInput: '',
      visible: true,
      color: 'green',
    };
  },









  AGORA TUDO QUE O USER ESCREVE COMO COLOR,


  É REFLETIDO 

  COMO INLINE STYLE DO BACKGROUND DESSE ELEMENT...