









--. OK...






AGORA DEVEMOS APLICAR O QUE APRENDEMOS SOBRE 'TRANSITION' (transition component)


NO NOSSO MODAL....











--> QUEREMOS TER UMA ANIMATION PARA O 'ADD' E 'REMOVE' DESSE COMPONENT...













--> OK... PARA ISSO, PODEMOS WRAPPAR __ O TRANSITION AO REDOR DE NOSSOS CUSTOM COMPONENTS (


    como '<BaseModal></BaseModal>'...
)











--> FAZEMOS TIPO ASSIM:







    <Transition name="modal">
      <base-modal @close="hideDialog" v-if="dialogIsVisible">
        <p>This is a test dialog!</p>
        <button @click="hideDialog">Close it!</button>
      </base-modal>
    </Transition>

















CERTO...











isso feito,

PODEMOS 



IR NO NOSSO CÓDIGO CSS PARA ENTÃO DEFINIR 


ESSAS CLASSES...




professor escreve assim:



.modal-enter-active,
.modal-leave-active {
  animation: modal 0.3s ease-out;
}


@keyframes modal {
  from {
    opacity: 0;
    transform: translateY(-50px) scale(0.9);
  }

  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}















OK... MAS SE RECARREGARMOS A PÁGINA, VEREMOS 1 PROBLEMA.... 









O MODAL _ NÃO TERÁ ANIMATION ALGUMA...












--> PQ ISSO?









-> BEM, ESSE COMPONENT DE 'TRANSITION' FUNCIONA EM CUSTOM COMPONENTS,

SIM,




MAS __ AQUI FICAMOS COM 1 PROBLEMA --> AS CLASSES QUE 

O 


VUE QUER ADICIONAR 

('enter-active', 'leave-active') 




SÃO ADICIONADAS NO 'ROOT ELEMENT' DO SEU CUSTOM COMPONENT (



    É O COMPORTAMENTO DE '''ATTRIBUTE FALLTHROUGH'' que o professor mencionou anteriormente...
)








ISSO QUER DIZER QUE AS CLASSES FAZEM FALL THROUGH 


PARA DENTRO 


DO COMPONENT DE 'BaseModal',

QUE TEM ESTA ESTRUTURA:




<template>
  <div class="backdrop" @click="$emit('close')"></div>
  <dialog open>
    <slot></slot>
  </dialog>
</template>











--> COMO TEMOS 2 COISAS, O 'BACKDROP' E O 'MODAL',




__ O NEGÓCIO NÃO FUNCIONA NORMALMENTE... ->  PARA FAZER ISSO FUNCIONAR, PODEMOS:








1) REMOVER O BACKDROP (para ficarmos  apenas com o MODAL) 




2) FAZER TUDO VIRAR 1 ÚNICO ELEMENTO (mas isso seria ruim, pq o backdrop seria ANIMADO TAMBÉM)...













---> OK... MAS COMO PODEMOS FAZER ISSO FUNCIONAR?










-> PRECISAMOS TER ' 1 ÚNICO DIRECT CHILD ELEMENT'....








COMO PODEMOS CONSERTAR ISSO?










BEM, PODERÍAMOS SPLITTAR ESSES 2 ELEMENTOS EM 2 COMPONENTS DIFERENTES, O BACKDROP E O MODAL,

E OS ANIMAR SEPARADAMENTE...














------> A OUTRA ALTERNATIVA, NO CASO,

É COLOCAR O WRAPPER DE 'transition' AO REDOR DE '<dialog>',


e 


DEIXAR LIVRE O 'backdrop'..



tipo assim:





  <div>
    <div class="backdrop" @click="$emit('close')"></div>
    <Transition name="modal">
      <dialog open>
        <slot></slot>
      </dialog>
    </Transition>
  </div>


















  MAS AGORA PRECISAMOS MUDAR A LÓGICA DE 'COMO ESSE MODAL É ADICIONADO A NOSSA PÁGINA',










PQ AINDA NÃO ESTAMOS USANDO TRANSITION COM ALGUM STATE...










--> É POR ISSO QUE AGORA PRECISAMOS ABRIR E FECHAR O MODAL DE FORMA DIFERENTE...








--> O PROFESSOR COLOCA 
1 prop de 

':open' 




no 'base-modal',

PARA ENTÃO MANIPULAR ISSO CONDICIONALMENTE (triggando o 'transition')...















--> AGORA FINALMENTE FUNCIONOU:




















<template>
  <!-- NÃO PODEMOS TER 2 CHILD ELEMENTS NESSE MODAL, PRECISAMOS QUE ELE SEJA 1 ELEMENTO ÚNICO... -->

  <!-- 1 SOLUÇÃO É CRIAR 1 COMPONENT PARA O BACKDROP, OUTRO PARA O MODAL, E AÍ OS ANIMAR SEPARADAMENTE...-->

  <!-- <div class="backdrop" @click="$emit('close')"></div>
  <dialog open>
    <slot></slot>
  </dialog> -->
  <div>
    <div v-if="open" class="backdrop" @click="$emit('close')"></div>
    <Transition name="modal">
      <dialog v-if="open" open >
        <slot></slot>
      </dialog>
    </Transition>
  </div>
</template>

<script>
export default {
  emits: ['close'],
  props: ['open'],
};
</script>

<style scoped>
.backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  z-index: 10;
  background-color: rgba(0, 0, 0, 0.75);
}

dialog {
  /* MODAL - EXEMPLIFICA COMO O ADD/REMOVE DE CLASSES __ SIMPLES, COM O VUE, PODE ÀS VEZES N SER SUFICIENTE... */
  position: fixed;
  top: 30vh;
  width: 30rem;
  left: calc(50% - 15rem);
  margin: 0;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  border-radius: 12px;
  padding: 1rem;
  background-color: white;
  z-index: 100;
  border: none;
  /* animation: modal 0.3s ease-out forwards; */
}

.modal-enter-active {
  /* transition: all 0.25s ease-out; */
  animation: modal-enter 0.3s ease-out;
}

.modal-leave-active {
  animation: modal-leave 0.3s ease-out;
}

/* .modal-enter-to {
  opacity: 1;
  transform: translateY(0);
} */

@keyframes modal-enter {
  from {
    opacity: 0;
    transform: translateY(-50px) scale(0.9);
  }

  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

@keyframes modal-leave {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
  }
}
</style>









AGORA TEMOS UMA ANIMATION PARA O OPENING E O CLOSING...










OK.... AGORA SABEMOS QUE 'TRANSITION' DEVE TER APENAS 1 ÚNICO CHILD ELEMENT...






AGORA VEREMOS ALGUNS CASES EM QUE É __ PERMITIDA __ A EXISTÊNCIA DE TER MAIS DE 1 ÚNICO 

ELEMENT DENTRO DE '<Transition>'...