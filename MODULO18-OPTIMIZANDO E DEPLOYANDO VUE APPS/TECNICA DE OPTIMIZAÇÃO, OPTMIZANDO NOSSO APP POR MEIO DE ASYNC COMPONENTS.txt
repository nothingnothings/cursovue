









OPTIMIZAÇÃO DE CÓDIGO...









ANTES DE UPLOADARMOS NOSSO CÓDIGO 





E DEPLOYARMOS EM ALGUM STATIC HOSTING PROVIDER,



QUEREMOS 



TERMINAR NOSSO CÓDIGO,


E ASSEGURAR QUE 




ELE ESTÁ OPTIMIZADO...













--> ISSO, É CLARO, QUER DIZER QUE QUEREMOS TESTAR NOSSO CÓDIGO:










QUEREMOS TESTAR NOSSO CÓDIGO POR ERROS...















DEPOIS, QUEREMOS REFATORAR NOSSO CÓDIGO,

E EVITAR 'REPETIR NOSSO CÓDIGO'...









--> E, TBM,

DEVEMOS 


ESCREVER DE MODO A REDUZIR A QUANTIDADE DE CÓDIGO DE NOSSO APP --> MENOS CÓDIGO, SITES MAIS RÁPIDOS..













--> POR FIM, DEVEMOS ESTUDAR ALGO CHAMADO DE 'ASYNC COMPONENTS',


ALGO QUE 



É SUPORTADO PELO 



VUE...















--> OK, MAS O QUE É ESSE RECURSO?
















--> BEM, TEMOS O CÓDIGO DO PROJETO DO ÚLTIMO MÓDULO..












--> TEMOS VÁRIOS COMPONENTS, E VÁRIAS PAGES...










--> É CLARO QUE PODEMOS TESTAR E REFATORAR ESSE CÓDIGO,

MAS O QUE O PROFESSOR QUER 




FOCAR, AQUI,




NA PARTE DE 'ASYNC COMPONENTS'...















--> ASYNC COMPONENTS --> ISSO PQ EXISTEM ALGUNS COMPONENTS QUE 

NÃO PRECISAM 

SER CARREGADOS DIRETAMENTE, QUANDO INICIAMOS 


NOSSO APP..












--> EXEMPLO DISSO É O COMPONENT DE 'DIALOG' --> NÓS O ENXERGAMOS DURANTE O LOGIN E DURANTE ERROS,


MAS NO RESTO DO APP ELE NÃO É VISTO 


COM TANTA FREQUÊNCIA --> ISSO QUER DIZER QUE ELE NÃO É NECESSÁRIO O TEMPO TODO...













--> EM OUTRAS PALAVRAS, 


É POSSÍVEL FAZER 1 LAZY LOADING NESSE APP,



PQ ELE NÃO É TÃO NECESSÁRIO ASSIM...











--> SE NÃO TIVERMOS DE BAIXAR ESSE COMPONENT INICIALMENTE,





FICAMOS COM MENOS CÓDIGO NO LOAD INICIAL DO SITE...


















--> NO MOMENTO, TODOS OS COMPONENTS DE NOSSA PAGE SÃO BAIXADOS AO MESMO TEMPO...












-> ISSO QUER DIZER QUE TEMOS TUDO 


DE NOSSO APP DISPONÍVEL IMEDIATAMENTE,
MAS TAMBÉM 

SIGNIFICA QUE 




TEMOS VÁRIAS COISAS QUE 





O USER VAI USAR POUCO OU NUNCA, NO CASO...
















--> EX: ROUTE DE 'REGISTER AS COACH' --> PARA 1 USER QUE JÁ É UM COACH,

ESSA PAGE 




NEM MESMO PRECISA SER VISITADA... --> POR ISSO N PRECISO 



DO CÓDIGO DELA...














--> VAMOS COMEÇAR COM O COMPONENT DE 'BASE-DIALOG'....



 











LÁ EM 'main.js',



NÓS REGISTRAMOS 


ESSE COMPONENT 'base-dialog' --------> 








'import BaseDialog from './components/ui/BaseDialog.vue;''












SEMPRE QUE TEMOS 1 IMPORT STATEMENT COMO ESSE,





ESTAMOS DIZENDO AO VUE QUE 

'''ESSE IMPORT AÍ É INDISPENSÁVEL'''...














--> E, QUANDO CONSTRUÍMOS E FINALIZAMOS NOSSO PROJETO,

TODAS ESSAS FILES SÃO MERGEADAS EM 1 GRANDE ARQUIVO...













--> É POR ISSO QUE SERIA ÓPTIMO 

SE ESSE COMPONENT FOSSE BAIXADO 

APENAS 


QUANDO 
ABSOLUTAMENTE INDISPENSÁVEL (

    lazy loading,

    o component n fica aglutinado no 
    arquivo main do build...
)









--------> E, PARA ISSO,

O VUE TEM UMA FUNCTION QUE PODEMOS USAR...












É A FUNCTION DE 'defineAsyncComponent' --> POR MEIO 


DESSA FUNCTION,





PODEMOS __ DEFINIR __ 1 COMPONENT QUE _ É CARREGADO 


ASSÍNCRONAMENTE,

APENAS QUANDO NECESSÁRIO...







O CÓDIGO VAI FICANDO TIPO ASSIM:





import { createApp, defineAsyncComponent } from "vue";








const BaseDialog = defineAsyncComponent(() => {

});







app.component('base-dialog', BaseDialog);











OK... 






MAS ESSE 'defineAsyncComponent'


EXIGE 1 ANON FUNCTION...









--> OK...







ELE QUER UMA FUNCTION QUE ENTÃO RETORNARÁ 





O 'IMPORTED COMPONENT'... --> MAS O VUE 


APENAS 

CHAMARÁ 


ESSA FUNCTION 



NO MOMENTO EM QUE 


O __ _COMPONENT __ É REALMENTE NECESSÁRIO...



















--> PARA DEIXARMOS NOSSO CÓDIGO MAIS SIMPLES/LEAN,

podemos 



SIMPLESMENTE 





TIRAR 


ESSA ARROW FUNCTION COMPLETA,


E USAR UMA APREVIADA,


MAS COM 1 CÓDIGO TIPO ASSIM:







import { createApp, defineAsyncComponent } from "vue";








const BaseDialog = defineAsyncComponent(() => import());







app.component('base-dialog', BaseDialog);

















----> OK.. PQ 'import()" EXISTE, NO JAVASCRIPT...










NÃO É O IMPORT STATEMENT,

MAS É O CALL DE 'IMPORT' COMO 1 FUNCTION...









-> E QUANDO CHAMAMOS 'import()'


COMO FUNCTION,




O IMPORT SÓ ACONTECE SE 


ESSA PARTE DO CÓDIGO É EXECUTADA (e não lida, como com imports comuns)






-----> COM ISSO, 


GARANTIMOS QUE O CÓDIGO 


DO 'base-dialog'

COMPONENT 



SÓ É IMPORTADO/CARREGADO ___ 

NO MOMENTO 


EM QUE É REALMENTE NECESSÁRIO...








--> ok, mas ainda precisamos colocar o path do component dentro do 'import()',



O QUE QUER DIZER QUE FICARÁ ALGO TIPO ASSIM:




 







 import { createApp, defineAsyncComponent } from "vue";








const BaseDialog = defineAsyncComponent(() => import('./components/layout/BaseDialog.vue'));







app.component('base-dialog', BaseDialog);

















OK.... FEITO ISSO, O VUE VAI REALMENTE ENTENDER 






O QUE DEVE FAZER PARA MOSTRAR ESSE DIALOG NA TELA..















ok...








se 





SALVAMOS E RECARREGAMOS NOSSO APP,

TEMOS O MESMO COMPORTAMENTO DE ANTES,

MAS 


AGORA 

O CÓDIGO 


SÓ É CARREGADO QUANDO É REALMENTE NECESSÁRIO..











--> PODEMOS FAZER A MESMA COISA COM O COMPONENT DE 'COACH REGISTRATION'...













O PROFESSOR DIZ QUE O LAZY LOADING NÃO SE LIMITA A COMPONENTS GLOBAIS...







PODEMOS TAMBÉM COLOCAR ESSE CARREGAMENTO ASYNC NAS ROUTES E NOS COMPONENTS...















--> ISSO PQ __ COLOCAR ASYNC NAS ROUTES É A COISA QUE MAIS SALVA CARREGAMENTO 



DESNECESSÁRIO DE CÓDIGO...















--> 



FAREMOS ISSO LÁ NAS NOSSAS ROUTES, TIPO ASSIM:



















import { defineAsyncComponent } from 'vue';
import { createRouter, createWebHistory } from 'vue-router';

import CoachesListPage from './pages/CoachesListPage.vue';
import RequestsListPage from './pages/RequestsListPage.vue';
import AuthPage from './pages/UserAuth.vue';
// import CoachDetail from './pages/CoachDetail/CoachDetail.vue';
import ContactCoach from './pages/CoachDetail/ContactCoach/ContactCoach.vue';
import NotFound from './pages/NotFound.vue';
// import RegisterCoach from './pages/RegisterCoach.vue';
import store from './store/store';

//nesse módulo, temos o EXEMPLO DE LAZY LOADING NAS ROUTES EM SI....

const CoachDetail = defineAsyncComponent(
  () => import('./pages/CoachDetail/CoachDetail.vue') // ? é assim que CARREGAMOS 1 COMPONENT/PAGE ASSÍNCRONAMENTE (lazy loading)..
);

const RegisterCoach = defineAsyncComponent(() =>
  import('./pages/RegisterCoach.vue') // ? é assim que CARREGAMOS 1 COMPONENT/PAGE ASSÍNCRONAMENTE (lazy loading)..
);

const routes = [
  {
    path: '/',
    redirect: '/coaches',
  },
  {
    path: '/coaches',
    component: CoachesListPage,
  },
  {
    meta: {
      authBlock: true,
    },
    path: '/auth',
    name: 'auth',
    component: AuthPage,
  },
  {
    name: 'coach-detail',
    path: '/coaches/:id',
    component: CoachDetail,
    props: true, /// isso vai passar 'id', o value da url, COMO PROP, para dentro desse component 'Detail' (e isso é usado, mais tarde, para CARREGAR A DATA DE CADA COACH, dinamicamente)...
    children: [
      {
        name: 'contact-coach',
        path: 'contact',
        component: ContactCoach,
      },
    ],
  },
  {
    meta: {
      needsAuth: true,
    },
    path: '/register',
    name: 'register-coach',
    component: RegisterCoach,
  },
  {
    meta: {
      needsAuth: true,
    },
    path: '/requests',
    component: RequestsListPage,
  },
  {
    path: '/notFound(.*)',
    component: NotFound,
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes: routes,
});

router.beforeEach((to, from, next) => {
  console.log(to);
  let isAuthenticated = store.getters.token;
  let isCoach = store.getters.isCoach;
  if (to.meta.authBlock && to.path === '/auth') {
    if (isAuthenticated) {
      return next('/coaches');
    } else {
      return next(true);
    }
  }

  if (to.meta.needsAuth && to.path === '/register') {
    if (isAuthenticated && !isCoach) {
      console.log(isAuthenticated, isCoach, 'PARAMS DOS GURI');
      return next(true);
    } else {
      return next('/auth');
    }
  }

  if (to.meta.needsAuth && to.path === '/requests') {
    if (isAuthenticated) {
      return next(true);
    } else {
      return next('/coaches');
    }
  }

  next(true);
});
export default router;






















E PODEMOS FAZER ISSO PARA MAIS COMPONENTS, COMO 'contactCoach'...















FICOU ASSIM:





















import { defineAsyncComponent } from 'vue';
import { createRouter, createWebHistory } from 'vue-router';

import CoachesListPage from './pages/CoachesListPage.vue';
// import RequestsListPage from './pages/RequestsListPage.vue';
// import AuthPage from './pages/UserAuth.vue';
// import CoachDetail from './pages/CoachDetail/CoachDetail.vue';
// import ContactCoach from './pages/CoachDetail/ContactCoach/ContactCoach.vue';
import NotFound from './pages/NotFound.vue';
// import RegisterCoach from './pages/RegisterCoach.vue';
import store from './store/store';

//nesse módulo, temos o EXEMPLO DE LAZY LOADING NAS ROUTES EM SI.... (use para routes que não são TÃO visitadas assim)....

const CoachDetail = defineAsyncComponent(
  () => import('./pages/CoachDetail/CoachDetail.vue') // ? é assim que CARREGAMOS 1 COMPONENT/PAGE ASSÍNCRONAMENTE (lazy loading)..
);

const RegisterCoach = defineAsyncComponent(
  () => import('./pages/RegisterCoach.vue') // ? é assim que CARREGAMOS 1 COMPONENT/PAGE ASSÍNCRONAMENTE (lazy loading)..
);

const ContactCoach = defineAsyncComponent(() =>
  import('./pages/CoachDetail/ContactCoach/ContactCoach.vue')
);

const RequestsListPage = defineAsyncComponent(() =>
  import('./pages/RequestsListPage.vue')
);

const AuthPage = defineAsyncComponent(() => import('./pages/UserAuth.vue'));

const routes = [
  {
    path: '/',
    redirect: '/coaches',
  },
  {
    path: '/coaches',
    component: CoachesListPage,
  },
  {
    meta: {
      authBlock: true,
    },
    path: '/auth',
    name: 'auth',
    component: AuthPage,
  },
  {
    name: 'coach-detail',
    path: '/coaches/:id',
    component: CoachDetail,
    props: true, /// isso vai passar 'id', o value da url, COMO PROP, para dentro desse component 'Detail' (e isso é usado, mais tarde, para CARREGAR A DATA DE CADA COACH, dinamicamente)...
    children: [
      {
        name: 'contact-coach',
        path: 'contact',
        component: ContactCoach,
      },
    ],
  },
  {
    meta: {
      needsAuth: true,
    },
    path: '/register',
    name: 'register-coach',
    component: RegisterCoach,
  },
  {
    meta: {
      needsAuth: true,
    },
    path: '/requests',
    component: RequestsListPage,
  },
  {
    path: '/notFound(.*)',
    component: NotFound,
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes: routes,
});

router.beforeEach((to, from, next) => {
  console.log(to);
  let isAuthenticated = store.getters.token;
  let isCoach = store.getters.isCoach;
  if (to.meta.authBlock && to.path === '/auth') {
    if (isAuthenticated) {
      return next('/coaches');
    } else {
      return next(true);
    }
  }

  if (to.meta.needsAuth && to.path === '/register') {
    if (isAuthenticated && !isCoach) {
      console.log(isAuthenticated, isCoach, 'PARAMS DOS GURI');
      return next(true);
    } else {
      return next('/auth');
    }
  }

  if (to.meta.needsAuth && to.path === '/requests') {
    if (isAuthenticated) {
      return next(true);
    } else {
      return next('/coaches');
    }
  }

  next(true);
});
export default router;
















COM ISSO, SE SALVAMOS,


o que percebemos é que 


se abrimos a aba de network,

percebemos que 



ECONOMIZAMOS UM MONTE COM O 'CHUNK PRINCIPAL'...












--> ISSO TUDO É MT ÚTIL, PQ COM ISSO 

PODEMOS 




BAIXAR 1 BUNDLE MAIS LEAN, 



E AÍ BAIXAR OS COMPONENTS APENAS QUANDO NECESSÁRIO...










ESSA OPTIMIZATION STEP É MT IMPORTANTE,

PRINCIPALMENTE 




NO ASPECTO DO ROUTING...