









-> PROFESSOR WRAPPA NOSSA FORM NAQUELE 'CARD ELEMENT',

TIPO ASSIM:







<template>



    <base-card>
    <form>
        <div>
            <label for="title">Title</label>
            <input type="text" v-model="userText" required>
        </div>
        <div>
            <label for="description">Description</label>
            <input type="text" v-model="userDescription" required>
        </div>
        <div>
            <label for="link">Link</label>
            <input type="text" v-model="userLink" required>
        </div>
        <base-button :type="'button'" 
        :mode="'normal'" 
        :disabled="userText === '' || userDescription === '' || userLink === '' "
            @click="addResource({ title: userText, description: userDescription, link: userLink })">Add Resource</base-button>
    </form>
</base-card>

</template>

















-> AÍ ELE FALA DAS COISAS NECESSÁRIAS 




DESSE COMPONENT,



AS LABELS E INPUT FIELDS..









--> 





ok... aí coloca assim:















<template>



    <base-card>
    <form>
        <div>
            <label for="title">Title</label>
            <input type="text" v-model="userText" required name="title">
        </div>
        <div>
            <label for="description">Description</label>
            <input type="text" v-model="userDescription" required name="description">
        </div>
        <div>
            <label for="link">Link</label>
            <input type="text" v-model="userLink" required name="link">
        </div>
        <base-button :type="'button'" 
        :mode="'normal'" 
        :disabled="userText === '' || userDescription === '' || userLink === '' "
            @click="addResource({ title: userText, description: userDescription, link: userLink })">Add Resource</base-button>
    </form>
</base-card>

</template>




<script>

export default {



    inject: [
        'addResource'
    ],


    data() {
        return {

            userText: '',
            userDescription: '',
            userLink: ''
        }
    }
}

</script>




<style scoped>

</style>

















CERTO..









--> AÍ ELE TAMBÉM WRAPPA OS INPUT FIELDS E LABELS COM DIVS,

chamadas de 'form-control'...









EX:













<template>



    <base-card>
        <form>
            <div class="form-control">
                <label for="title">Title</label>
                <input type="text" v-model="userText" required name="title">
            </div>
            <div class="form-control">
                <label for="description">Description</label>
                <textarea v-model="userDescription" required name="description"></textarea>
        </div>
        <div class="form-control">
            <label for="link">Link</label>
            <input type="text" v-model="userLink" required name="link">
        </div>
        <base-button :type="'button'" 
        :mode="'normal'" 
        :disabled="userText === '' || userDescription === '' || userLink === '' "
            @click="addResource({ title: userText, description: userDescription, link: userLink })">Add Resource</base-button>
    </form>
</base-card>

</template>




<script>

export default {



    inject: [
        'addResource'
    ],


    data() {
        return {

            userText: '',
            userDescription: '',
            userLink: ''
        }
    }
}

</script>




<style scoped>

</style> 











--> OK...





EM DESCRIPTION TEREMOS UMA TEXTAREA,




para que seja mais conveniente...










CERTO...






EX:
















<template>



    <base-card>
        <form>
            <div class="form-control">
                <label for="title">Title</label>
                <input type="text" v-model="userText" required name="title">
            </div>
            <div class="form-control">
                <label for="description">Description</label>
                <textarea v-model="userDescription" required name="description" rows="4"></textarea>
        </div>
        <div class="form-control">
            <label for="link">Link</label>
            <input type="text" v-model="userLink" required name="link">
        </div>
        <base-button :type="'button'" 
        :mode="'normal'" 
        :disabled="userText === '' || userDescription === '' || userLink === '' "
            @click="addResource({ title: userText, description: userDescription, link: userLink })">Add Resource</base-button>
    </form>
</base-card>

</template>




<script>

export default {



    inject: [
        'addResource'
    ],


    data() {
        return {

            userText: '',
            userDescription: '',
            userLink: ''
        }
    }
}

</script>




<style scoped>

</style>


















--> no input field de 'link',

colocamos um type de 

'url'...










EX:













<template>



    <base-card>
        <form>
            <div class="form-control">
                <label for="title">Title</label>
                <input type="text" v-model="userText" required name="title">
            </div>
            <div class="form-control">
                <label for="description">Description</label>
                <textarea v-model="userDescription" required name="description" rows="4"></textarea>
        </div>
        <div class="form-control">
            <label for="link">Link</label>
            <input type="url" v-model="userLink" required name="link">
        </div>
        <base-button :type="'button'" 
        :mode="'normal'" 
        :disabled="userText === '' || userDescription === '' || userLink === '' "
            @click="addResource({ title: userText, description: userDescription, link: userLink })">Add Resource</base-button>
    </form>
</base-card>

</template>




<script>

export default {



    inject: [
        'addResource'
    ],


    data() {
        return {

            userText: '',
            userDescription: '',
            userLink: ''
        }
    }
}

</script>




<style scoped>

</style>
















--> NA DIV FINAL,

ELE COLOCA UM BUTTON...






--> colocou  o type de submit (em vez de colocar 'type button' 

e 
aí 


fazer o '@click'...


)










EX:












<template>



    <base-card>
        <form>
            <div class="form-control">
                <label for="title">Title</label>
                <input type="text" v-model="userText" required name="title">
            </div>
            <div class="form-control">
                <label for="description">Description</label>
                <textarea v-model="userDescription" required name="description" rows="4"></textarea>
            </div>
            <div class="form-control">
                <label for="link">Link</label>
                <input type="url" v-model="userLink" required name="link">
            </div>
            <div>
                <base-button :type="'button'" :mode="'normal'"
                    :disabled="userText === '' || userDescription === '' || userLink === ''"
                    @click="addResource({ title: userText, description: userDescription, link: userLink })">Add
                    Resource</base-button>
            </div>
        </form>
    </base-card>

</template>




<script>

export default {



    inject: [
        'addResource'
    ],


    data() {
        return {

            userText: '',
            userDescription: '',
            userLink: ''
        }
    }
}

</script>




<style scoped>

</style>











----> SE QUISÉSSEMOS FAZER A VERSÃO ALTERNATIVA, COM 'onSubmit',

fficaria assim:







<form :submit.prevent="methodAserExecutado ">











--------------------------


















PROFESSOR TEM ALGUNS STYLES JÁ PREPARADOS PARA NÓS...









EX:













<template>



    <base-card>
        <form>
            <div class="form-control">
                <label for="title">Title</label>
                <input type="text" v-model="userText" required name="title">
            </div>
            <div class="form-control">
                <label for="description">Description</label>
                <textarea v-model="userDescription" required name="description" rows="4"></textarea>
            </div>
            <div class="form-control">
                <label for="link">Link</label>
                <input type="url" v-model="userLink" required name="link">
            </div>
            <div>
                <base-button :type="'button'" :mode="'normal'"
                    :disabled="userText === '' || userDescription === '' || userLink === ''"
                    @click="addResource({ title: userText, description: userDescription, link: userLink })">Add
                    Resource</base-button>
            </div>
        </form>
    </base-card>

</template>




<script>

export default {



    inject: [
        'addResource'
    ],


    data() {
        return {

            userText: '',
            userDescription: '',
            userLink: ''
        }
    }
}

</script>




<style scoped>
label {
    font-weight: bold;
    display: block;
    margin-bottom: 0.5rem;
}

input,
textarea {
    display: block;
    width: 100%;
    font: inherit;
    padding: 0.15rem;
    border: 1px solid #ccc;
}

input:focus,
textarea:focus {
    outline: none;
    border-color: #3a0061;
    background-color: #f7ebff;
}

.form-control {
    margin: 1rem 0;
}
</style>












QUEREMOS: 



1) QUE O USER CONSIGA CLICAR NO BUTTON 



2) COLETAR TODO O USER INPUT 



3) ADICIONAR UM NOVO RESOURCE,

 A PARTIR DESSE INPUT...









 --> PROFESSOR QUER IMPLEMENTAR ISSO 

 NA PRÓXIMA AULA...