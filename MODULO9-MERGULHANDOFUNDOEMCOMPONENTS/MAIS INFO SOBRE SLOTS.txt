






--> OK... SLOTS SÃO CLARAMENTE UMA FEATURE IMPORTANTE,

PQ 


NOS DÃO MAIOR FLEXIBILIDADE,




E PQ NOS PERMITEM CONSTRUIR COISAS QUE NÃO CONSEGUIMOS CONSTRUIR 

SEM ELES...













MAS HÁ MAIS COISAS QUE PODEMOS 

FAZER COM ELES...













--> PODEMOS DEFINIR 'DEFAULT SLOT CONTENT' -->










OU SEJA,


O PROFESSOR  QUER DIZER QUE 



CADA SLOT PODE RENDERIZAR 


'''SOME DEFAULT CONTENT''',






um conteúdo PADRONIZADO 





que será mostrado toda vez que vocÊ o utilizar..












imagine que temos um slot assim:











<template>
    <div>
        <header>
            <slot name="header">
            <h2>The Default</h2> <!-- EIS O CÓDIGO EM QUESTÃO. -->
            </slot>
        </header>
    <slot></slot>
</div>
</template>













--> QUEREMOS ADICIONAR CONTEÚDO NO MEIO DESSE 'SLOT'


de nome 

'header',


dentro 

desse nosso próprio HOC de 'BaseCard'..












--> VOCê PODE TER 




COMPONENTS EM QUE ESSE 'DEFAULT CONTENT'



FAZ SENTIDO...








OK... MAS SE VOCê DEFINIR 


CONTEÚDO NO MEIO DOS SEUS SLOT TAGS,








ISSO, POR DEFAULT,

NÃO FARÁ COM QUE ESSE CONTENT FIQUE VISÍVEL NA SUA PAGE.. --> 










ISSO PQ __ EM __ TODOS __ OS LUGARES QUE 

USAMOS 






O 'BaseCard'



COMO WRAPPER,


NÓS 



JÁ TEMOS 

O 

PASS __ DE CONTEÚDO __ QUE 

VAI SER ENFIADO NO MEIO DESSE 'SLOT'...











-----> 
EX:









<template v-slot:header>
    <h3>{{fullName}}</h3>
</template>










OU SEJA,


ELES __ JÁ PROVIDENCIARAM/PASSARAM CONTEÚDO PARA ESSE HEADER...









--> OK, 









MAS DIGAMOOS QUE __ USAMOS _ 


ESSE 


HOC/BaseCard 




SEM PASSAR 

NENHUM CONTEÚDO AO SLOT DELE.. --> 




SE FAZEMOS ISSO,



VEREMOS QUE 


O 



SLOT VAI USAR O CONTEÚDO PASSADO ASSIm:











<template>
    <div>
        <header>
            <slot name="header">
            <h2>The Default</h2> <!-- EIS O CÓDIGO EM QUESTÃO. -->
            </slot>
        </header>
    <slot></slot>
</div>
</template>













--> O HOC VAI USAR O CONTEÚDO DEFINIDO NO ITNERIOR DE SUAS '<slot></slot>'



TAGS 



__ DE FORMA __ FALLBACK (se nada for passado a esse HOC/wrapper, SERÁ USADO O CONTEÚDO PASSADO NO MEIO DAS TAGS DE '<slot></slot>' desse HOC )
















---> E ISSO, É CLARO, 

PODE SER ÚTIL PARA ALGUNS COMPONENTS...











--> NO CASO DESSE COMPONENT, DESSE WRAPPER QUE__ DEVERIA__ nos dar um 'default styling',



___ ELE TER UM DEFAULT TITLE NÃO FAZ MT SENTIDO.... (


    é por isso que o render 

DE UM CONTEÚDO COMO UM 'DEFAULT TITLE' não 

é mt bom..

)











--> MAS VOCê PODE, EM CASOS COMO ESSES (

    em que vocÊ NÃO _ _SABE__ SE VOCê VAI REALMENTE 

    PRECISAR  

    DESSE ELEMENTO 'slot' 

    NO INTERIOR DO SEU HOC

),







USAR __ OUTRa__ FEATURE__ NICE DO VUE .. .------>














digamos que 


temos este código:









<template>
    <div>
        <header>
            <slot name="header">
        <!--    <h2>The Default</h2> -->
            </slot>
        </header>
    <slot></slot>
</div>
</template>










NESSA VERSÃO DO CÓDIGO, 








NOSSO 'BaseCard'


FICARIA SEM TITLE -----------> 







MAS SE EXAMINAMOS O CÓDIGO HTML NAS DEVTOOLS,



VEREMOS A PRESENÇA DO '<!-- <h2>The Default</h2> -->'





E TAMBÉM DE UM 

'<header></header>'










--> OU SEJA,


FICAMOS COM UM 


ELEMENT 'HEADER'

VAZIO... --> 


E ISSO NÃO É IDEAL SEMANTICAMENTE (


    ter um elemento HTML vazio no seu DOM...
)













--> EM CASOS COMO ESSES ,

VOCÊ PODE USAR 

OUTRA FEATURE 

LEGAL... --> 










DENTRO DESSE COMPONENT, EM QUE VOCÊ DEFINIU o 'slot' (o 'HOC'),




VOCÊ 


TEM OUTRA 


PROPRIEDADE ESPECIAL, PROVIDENCIADA PELO VUE...












--> NÓS OBSERVAMOS ESSA PROPRIEDADE SE ESCREVEMOS O LIFECYCLE HOOK DE 
'mounted'

NO NOSSO COMPONENT,
TIPO ASSIM:






export default {



    data(){},



    mounted() {

    }
}











----> DENTRO DE 'mounted',


O PROFESSOR USA OUTRA PROPRIEDADE BUILT-IN DO VUE,

que é 


'this.$slots.xxxx'...












--> ESSA É OUTRA PROPRIEDADE PROVIDENCIADA PELO VUE,


E __ ELa__ 'SEGURA'


INFO SOBRE A SLOT DATA 

QUE 


__ ESSE __COMPONENT_ hoc 


recebe 

PARA OS 


DIFERENTES SLOTS QUE POSSUI...













-> O PROFESSOR SALVA ISSO,


E AÍ O OUTPUT DO CONSOLE FICA ASSIM:


Proxy {_: 1, __vInternal: 1, header-slot: ƒ, default: ƒ}
[[Handler]]
: 
Object
[[Target]]
: 
Object
[[IsRevoked]]
: 
false





Proxy {_: 1, __vInternal: 1, default: ƒ}
[[Handler]]
: 
Object
[[Target]]
: 
Object
[[IsRevoked]]
: 
false








-----> OU SEJA,



ENCONTRO 2 CONSOLE.LOGS...









PQ ENCONTRO 2 CONSOLE.LOGS?










--> É PQ ESTOU USANDO O COMPONENT DE 'BaseCard'



DUAS VEZES...











--> ESTAMOS USANDO COM 'UserInfo'


e com 
'BadgeList'...










--> E CADA VEZ QUE ESSE COMPONENT É USADO, 'mounted'

É CHAMADO,

PQ 



__ O COMPONENT ACABA SENDO CRIADO E MONTADO 2 VEZES... --> e é por isso que recebemos 2 console.logs..













-_>a COISA INTERESSANTE É QUE 






__ NO INTERIOR __ DE CADA 


OBJECT,


TEMOS 

ACESSO 




AOS DIFERENTES SLOTS QUE 

ESTAMOS PROVIDENCIANDo... (





    é por isso que podemos 

    acessar 

    'this.$slots.headerSlot' 


e 


'this.$slots.default' (PQ SEMPRE TEMOS ESSE DEFAULT)...


    e 


    '
)












----> CERTO...








--> PODEMOS ACESSAR ESSES SLOTS,

SIM,



E O PROFESSOR TENTA ACESSAR 


'header-slot',

tipo assim>:













this.$slots.headerSlot









-> eu escrevi assim:




    mounted() {
        console.log(this.$slots)
        console.log(this.$slots['header-slot'])
    }







--> OK.. O PROFESSOR RECARREGA:







--> ganhamos 'undefined' (pq não foi PASSADO UM VALOR A ESSE SLOT de nosso hoc, na primeira call dele),


e depois 







um OUTPUT estranho:








 const renderFnWithContext = (...args) => {

        if (renderFnWithContext._d) {
            setBlockTracking(-1);
        }















        ---> O PROFESSOR APONTA QUE 



        'undefined'



        ESTÁ 


        VINDO 


        DO COMPONENT EM QUE NÃO PROVIDENCIAMOS CONTEÚDO ALGUM 




AO 'BaseCard',


ao SLOT DE 'header-slot' -------> 







É POR ISSO QUE RECEBEMOS 'UNDEFINED'...









--> E PODEMOS UTILIZAR ESSA INFO DE 'undefined',



QUE OCORRE 


SEMPRE QUE NÃO PASSAMOS NENHUM CONTEÚDO A ALGUM SLOT DE NOSSO HOC...












--> PARA ISSO, PROFESSOR VAI ATÉ 'BaseCard'


E ADICIONA UM V-IF 


NO PRÓPRIO '<header>'


COMPONENT,

TIPO ASSIM:











<template>
    <div>
        <header v-if="$slots.['header-slot']">
            <slot name="header">
        <!--    <h2>The Default</h2> -->
            </slot>
        </header>
    <slot></slot>
</div>
</template>












OU SEJA,



SE NÃO FOR PASSADA NENHUMA DATA/CONTEÚDO A ESSE 'slot',



__ ESSE HEADER NÃO SERÁ RENDERIZADO...











EX:
















<template>
    <!-- ESTE É UM COMPONENT QUE SERÁ USADO COMO 'slot' (Terá slots), ou seja, COMO COMPONENT QUE ENVELOPA OUTROS COMPONENTS... É UM HOC/WRAPPER -->
    <div>
        <header v-if="$slots['header-slot']"> <!-- OU SEJA, SE NÃO FOR PASSADO NENHUM CONTENT A ESSE 'SLOT' de 'header-slot', esse header element não será renderizado-->
            <!-- ESTE É UM EXEMPLO DA FEATURE 'NAMED SLOTS', que é usada quando você quer MÚLTIPLOS SLOTS em um 'hoc'....-->
            <slot name="header-slot"></slot>
        </header>
        <!-- O ATTRIBUTE DE 'name' é OBRIGATÓRIO NOS SEUS SLOTS, QUANDO VOCÊ TEM MAIS DE 1 SLOT...-->
        <slot name="content-slot"></slot>
    </div>
</template>


<script>
export default {



    mounted() {
        console.log(this.$slots)
        console.log(this.$slots['header-slot'])
    }
}
</script>


<style scoped>
div {
    margin: 2rem auto;
    max-width: 30rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
    padding: 1rem;
}

section header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}
</style>























-----> OK... essa é uma melhoria pequena, 





e é um pouco avançada --> 




MAS O QUE INTERESSA É QUE COM '$slots' 


PODEMOS 

CHECAR 


SE 

ESTAMOS REALMENTE 



__ RECEBENDO __ DATA _ PARA UM SLOT ESPECÍFICO,

E SE NÃO 

TIVERMOS ESSA DATA,

PODEMOS 
USAR 


ESSA INFO 
PARA __ NÃO RENDERIZAR 


ALGUM ELEMENT NO NOSSO HOC...








--> continuando... no 'UserInfo',
PROVIDENCIAMOS CONTEÚDO PARA O 'header-slot',


POR ISSO 

ELE 

É EFETIVAMENTE RENDERIZADO E APARECE...











-> E É ASSIM QUE PODEMOS USAR A INFO de '$slots' ou '$this.slots'...












-> MAIS UMA COISA:
 













 UMA COISA ADICIONAL ---> 










 NOS LUGARES EM QUE VOCê USA O COMPONENT HOC (que oferece os SLOTS ),








 NÓS SEMPRE PROVIDENCIAMOS/PASSAMOS CONTEÚDO A ELE POR MEIO DA DIRECTIVE de 





 <template v-slot:nome-do-slot-desejado> 














 --> E, ASSIM COMO 'V-BIND',


 'v-on'

 E TUDO MAIS,


 HÁ 


 UMA SHORTHAND PARA o 'v-slot',










 QUE É 

 o 


 '#xxxx' 











 --> OU SEJA,




PODEMOS ESCREVER ASSIM:









v-slot:header-slot 





FICA 


#header-slot






TIPO ASSIM:







<template v-slot:header-slot>







FICA 




<template #header-slot>







--> OK, ESSA É UMA SHORTHAND ÚTIL...

