








---> POR UM MOMENTO,




VAMOS DEIXAR O VUE PARA ESTUDARMOS AQUELA COISA 'PROXY',

QUE É USADO 

PELO JAVASCRIPT,

QUE O 




VUE UTILIZA...






-----> 









VAMOS ESCREVER JAVASCRIPT COMUM..











let message = 'Hello';












AGORA, A COISA INTERESSANTE SOBRE O JAVASCRIPT, É QUE SE TIVERMOS ISTO:







let message = 'Hello';


let longMessage = message + 'World!';












--> SE CONSOLE.LOGGARMOS ISSO AÍ,


VEREMOS 



'Hello World!'..










ex:



let message = 'Hello';


let longMessage = message + 'World!';


console.log(longMessage);











--> MAS AGORA, SE TROCARMOS 

a mensagem 



'Hello'

para 



'Hello!!!' mais tarde,







AQUELE MESMO 'Hello',


SEM AS EXCLAMAÇÕES, AINDA SERÁ USADO.







ex:




let message = 'Hello';


let longMessage = message + 'World!';


console.log(longMessage);


message = 'Hello!!!!';

console.log(longMessage);








--> OS 2 CONSOLE.LOGS



TERÃO O MESMO OUTPUT, que será 

'Hello World' (sem as exclamações)...











--> ISSO SIGNIFICA QUE AQUELA VARIABLE _ QUE FOI CRIADA _ A PARTIR _dE OUTRA VARIABLE (longMessage, criada a partir de 'message")






VAI TER 'EXTRAÍDO' o value da message antiga para CRIAR SEU PRÓPRIO VALUE,




e vai seguir com esse value... quando a variable 'message' de que dependia/depende é ALTERADA,




não será alterado....











------> ISSO PQ, POR DEFAULT,

O JAVASCRIPT 




''''NÃO É REACTIVE'''...









--> ESSA 'REACTIVENESS'



É ALGO QUE O _ VUE__ ADICIONA PARA NÓS,



PQ _ O JAVASCRIPT, 

POR DEFAULT,

NÃO É REACTIVE...














--> SE TEMOS UMA CALCULATION EM QUE USAMOS UMA VARIABLE 


E TROCAMOS 


ESSA VARIABLE MAIS TARDE,





A CALCULATION ANTERIOR, ORIGINÁRIA, NÃO SERÁ 'RECALCULADA',







PQ O JAVASCRIPT _ NÃO 'ANOTA' QUE 'A MESSAGE MUDOU' 




__ E QUE A MESSAGE HAVIA SIDO USADA LÁ ATRÁS... (com a definição da variable 'longMessage')...















--> E É ASSIM QUE O JAVASCRIPT FUNCIONA.... NO ENTANTO, O VUE FUNCIONA DE FORMA DISTINTA....












-> O __ VUE __ TEM UM MECANISMO _ QUE, DE FATO,
FICA 

AWARE DE QUANDO QUALQUER VARIABLE É ALTERADA (


    ou seja,

    quando escrevemos 


    'this.message = this.currentUserInput',


    ELE FICA _ AWARE__ DO FATO DE QUE 


    'message'

    MUDOU,



    e aí 

    ALTERA__



    TODAS AS VARIABLES QUE DEPENDEM DESSa variable 'message'..
)









--> ISSO QUER DIZER QUE O __ VUE _ UTILIZA 

ESSA 
CARACTERÍSTICA 'REACTIVE'  



_ PARa__ UPDATAR__ TODAS AS PARTES/VARIABLES DO CÓDIGO 





QUE DEPENDEM _ DESSA VARIABLE, intuitivamente...















--> OK... AGORA DEVEMOS VER COMO 'PROXIES' PODEM FUNCIONAR..











--> PARA ISSO, O PROFESSOR REMOVE TODO O CÓDIGO E CRIA UM NOVO OBJECT data (sem relação com o vue),






e fica tipo assim:











const data = {
    message: 'Hello!';
}










--> AGORA PODEMOS __ WRAPPAR __ 

ESSE OBJECT COM UM 'PROXY',

NO JAVASCRIPT,



TUDO POR MEIO DO 

USO 




DE UMA CONSTRUCTOR FUNCTION DE NOME 'Proxy()'...








ex:








const data = {
    message: 'Hello!';
}



const proxy = new Proxy();













--> NO CASO,



VAMOS PASSAR A ESSE PROXY __ ''o OBJECT QUE ELE DEVE WRAPPAR''..











--> e VAMOS PASSAR 'data':










const data = {
    message: 'Hello!';
}



const proxy = new Proxy(data);















-------> CERTO... MAS O PROXY VAI PEDIR MAIS DO QUE ISSO:



PEDE _ TAMBÉM __ UM 



SEGUNDO ARGUMENTO,


UM SEGUNDO OBJECT,


E DENTRO DESSE OBJECT TEREMOS _ 'UM MONTE DE HANDLERS PARA __ 
ESSE WRAPPED OBJECT'..










-----> O PROFESSOR VOLTARÁ A ISSO DEPOIS,

MAS AGORA 


ELE VAI CRIAR UM OBJECT DE 'handler',

TIPO ASSIM:








const data = {
    message: 'Hello!';
}


const handler = {

}


const proxy = new Proxy(data, );

















-_> ESSE 'HANDLER OBJECT' agora pode usar 
CERTAS FEATURES,


como 

'traps',

QUE SÃO __ CONSTRUCTS  SUPORTADOS POR ELE...









ex:






const handler = {
    set() {

    }
}




const proxy = new Proxy(data, ) 












--> COMO EXEMPLO DISSO,

TEMOS TRAPS DE 'set()" -----> PARA DEFINIR TRAPS DE 'set()",


BASTA 

ESCREVER 





UMA FUNCTION DE NOME 'set()',



DENTRO DO HANDLER,




__ E,

COMO ARGUMENTO DESSE METHOD,


AUTOMATICAMENTE 




RECEBEMOS:










1) 'target'



2) 'key' 


3) 'value'









FICA TIPO ASSIM:






const handler = {
    set(target, key, value) {
    
    }
}




const proxy = new Proxy(data, ) 













--> PARA ENTENDER O QUE FAZ ESSE 'PROXY',

O PROFESSOR DIZ QUE 


podemos _ 


console.loggar os 3 valores...



ex:









const data = {
    message: 'Hello!';
}


const handler = {
    set(target, key, value) {
        console.log(target);
        console.log(key);
        console.log(value);
        

    }
}




const proxy = new Proxy(data, handler) 









--> O PROFESSOR EXPLICA UQE 

MAIS TARDE EXPLICARÁ OS 'HANDLERS'....











-----> O PROXY UTILIZA DE FEATURES COMO 'SET TRAPS'..







--> CERTo...





o 'handler'



SETTA UM MONTE DE 'TRAPS'...








 
 O SEGUNDO PARÂMETRO SERÁ UM _ OBJECT_ CHEIO DE 'HANDLERS' PARA 


 O WRAPPED OBJECT...







 ex:





 
const handler = {
    set(target, key, value) {
        console.log(target);
        console.log(key);
        console.log(value);
        

    }
}









--> ESSE HANDLER PODE USAR ALGUMAS FEATURES,

PODE USAR 



ALGO CHAMADO DE 'TRAPS'...













--> PODEMOS USAR UMA TRAP DE 'set()'..







-->  const data = {
  message: 'Hello!',
};

const handler = {


//TRAP DE 'set()': 
  set(target, key, value) {
    console.log(target);
    console.log(key);
    console.log(value);
  },
};

const proxy = new Proxy(data, handler);















--> CERTO... E DENTRO DE 'proxy',
 
 essa nova const,

 PODEMOS 

 ACESSAR 




 PROPRIEDADES COMO 'message',


 EXATAMENTE COMO 



 SE OBJECT 'data' AINDA EXISTISSE...


(pq ele ainda existe)...







 ex:





-->  const data = {
  message: 'Hello!',
};

const handler = {


//TRAP DE 'set()': 
  set(target, key, value) {
    console.log(target);
    console.log(key);
    console.log(value);
  },
};

const proxy = new Proxy(data, handler);




proxy.message = 'Hello!!!';








--> salvamos tudo e recarregamos...









--> o código completo:









const data = {
  message: 'Hello!',
};

const handler = {


//TRAP DE 'set()': 
  set(target, key, value) {
    console.log(target);
    console.log(key);
    console.log(value);
  },
};

const proxy = new Proxy(data, handler);

proxy.message = 'Hello!!!!2';

















---> o que percebemos:






1) RECEBEMOS 3 CONSOLE.LOGs lá 


no console..



(para os 3 console.logs)...







O OUTPUT:

{message: 'Hello!'}
 message
 Hello!!!!2












 -----> 'target' --> é a COISA QUE FOI ___ WRAPPED___ ( no caso, '{ message: Hello}' )








 ----> 'key' --> É A __ PROPRIEDADE__ EM QUE  VOCÊ DEFINIU UM NOVO VALUE... (no caso, 'message')...









 --> 'value' é o VALUE que foi settado...









 --> ISSO TE MOSTRA O QUE UM 'HANDLER' FAZ:






 COM O HANDLER, PODEMOS 

 DEFINIR UMA 



 'SETTER FUNCTION',


 QUE SERÁ _ TRIGGADA_ SEMPRE QUE _ 



 uma NOVA PROPRIEDADE for settada /PROPRIEDADE ANTERIOR TIVER SEU VALOR ALTERADO..








 ----> a partir de um 'PROXY', podemos descobrir:






 1) QUAL PROXY É ESSE (é o proxy do object '{message: Hello}' )




 2) a 'key' que alteramos/definimos 


 3) o VALUE novo que adicionamos/alteramos 

 nesse object....


















 --> E PODEMOS USAR ISSO __ SE TIVERMOS OUTRA PROPRIEDADE AÍ,


 como 


 'longMessage'...







 ex:











 const data = {
    message: 'Hello',
    longMessage: 'Hello world!'
 }



 const handler = {
    set (target, key, value) {
        console.log(target);
        console.log(key);
        console.log(value);
    }
 }


 const proxy = new Proxy(data, handler);



 proxy.message = 'Hello!!!!';
















 --->  DIGAMOS QUE NOSSO OBJETIVO, COM ESSE HANDLER, 

 
 É FAZER 'LONG MESSAGE'
 MUDAR,


 SE __ O ___ 'message'


 FOR ALTERADO...









 --> POR MEIO DO USO DE UM 'PROXY',



 E _ COM O USO DE 'set',

 que 

 é aquilo que chamamos de 'UMA TRAP _ dE SET_',






 PODEMOS   


IMPLEMENTAR ISSO AÍ...











vamos fazer que,

se _ a KEY que está sendo settada é ''xxx'',


QUEREMOS QUE 

A KEY DE 'longMessage'


TAMBÉM TENHA SEU VALOR ALTERADO/SETTADO...







TIPO ASSIM:









 const data = {
    message: 'Hello',
    longMessage: 'Hello world!'
 }



 const handler = {
    set (target, key, value) {


        if (key === 'message') {
            target.longMessage = value + 'World';
        }
        console.log(target);
        console.log(key);
        console.log(value);
    }
 }


 const proxy = new Proxy(data, handler);



 proxy.message = 'Hello!!!!';














--> COM ISSO, FAZEMOS COM QUE 

__ A PROPRIEDADE 'longMessage'


ACABE ALTERADA 






--> POR FIM, ESCREVEMOS QUE a 'target.message = value' (pq queremos que o comportamento NORMAL de set continue intacto)....







ex:













 const data = {
    message: 'Hello',
    longMessage: 'Hello world!'
 }



 const handler = {
    set (target, key, value) {


        if (key === 'message') {
            target.longMessage = value + 'World';
        }

            target.message = value;
    }
 }


 const proxy = new Proxy(data, handler);



 proxy.message = 'Hello!!!!';




















-----> CERTO....


finalmente,


VEREMOS ALGO INTERESSANTE AO FINAL DO CÓDIGO,




se

escrevermos um console.log da propriedade 'longMessage',


TIPO ASSIM:









 const data = {
    message: 'Hello',
    longMessage: 'Hello world!'
 }



 const handler = {
    set (target, key, value) {


        if (key === 'message') {
            target.longMessage = value + 'World';
        }

            target.message = value;
    }
 }


 const proxy = new Proxy(data, handler);



 proxy.message = 'Hello!!!!';



console.log(proxy.longMessage); ////////EIS O CÓDIGO EM QUESTÃO









---------------------












--> o que será outputtado, no console, será 

'Hello!!!! World'








 



OU SEJA,




A 'long message' foi updatada quando UPDATAMOS o 'message'...
















-- OK.. ISSO QUER DIZER QUE CRIAMOS NOSSO PRÓPRIO SISTEMA REATIVO... (






    e é isso que o vue faz, por trás das cenas, de forma simplificada..
)












--> O VUE 



__ KEEPS TRACK 

de 


todas suas data propertieas --> sempre que uma dessas properties é alterada,





ELE ALTERA 
AS 

PARTES DO CÓDIGO 

QUE 

A UTILIZAM... ----->  E __ O VUE FAZ ISSO __ POR MEIO DO WRAP 



DE SUAS 


PROPRIEDADES COM 'proxies',

TUDO PARA QUE __ ELE _ TENHA UMA 'CHANCE'


DE SABER QUANDO 

SUAS PROPERTIES são alteradas...












--> É CLARO QUE O VUE SEGUE UM APPROACH MAIS COMPLEXO DO QUE O PROFESSOR MOSTROU LOGO ABAIXO... E ELE TAMBÉM 

TEM COMPUTED PROPERTIES E WATCHERS,


QUE SÃO TRIGGADOS _ QUANDO UMA PROPERTY É ALTERADA..









--> MAS ESSE É O 'IN A NUTSHELL APPROACH' de como o vue 

funciona por trás das cenas...









--> essa mágica não é mágica, é lógica...