











--> OK... 

ATÉ AGORA,

TODA A DATA COM QUE TRABALHAMOS FOI DUMMY DATA,


E NÃO 

É PERMANENTE...











--> ISSO QUER DIZER QUE QUANDO RECARREGAMOS A PAGE,

PERDEMOS TODA A DATA...










--> TODO USER VÊ APENAS SUA PRÓPRIA DATA,

E NÃO A DATA DE OUTROS USERS --> NÃO É A IDEIA POR TRÁS DE UM APP COMO ESTE...














--> QUEREMOS VER 



VÁRIOS COACHES,

AO LONGO DE TODO O MUNDO..












--> PRECISAMOS DE UM BACKEND,

PARA ARMAZENAR A DATA...










--> NOVAMENTE,

O PROFESSOR VAI USAR O FIREBASE,



PQ 




_ ELE NÃO REQUER QUE ESCREVAMOS QUALQUER SERVERSIDE CODE...











--> CERTO...








VAMOS CRIAR 1 NOVO PROJECT...









CRIAMOS NOSSO APP EM MODO DE TESTE,

E AÍ 

DEIXAMOS AS RULES COMO 'read' e 'write' true...










ISSO FEITO,

DEVEMOS USAR 


ESSE NEGÓCIO COMO 

BACKEND DE NOSSO VUE APP...











--> OK, MAS PARA QUE 

LOCAL QUEREMOS ENVIAR 


HTTP REQUESTS?





--> BEM, QUEREMOS ENVIAR O REQUEST ASSIM QUE 



O 

PREENCHIMENTO DA FORM TERMINA....
















OK... OU SEJA,

QUEREMOS QUE 



O PROCESSO SEJA INICIADO LÁ NAS NOSSAS  ACTIONS...


















--> em coaches, na action de 'registerCoach',


QUEREMOS 

DISPARAR 1 REQUEST 
PARA 

ADICIONAR 1 COACH...














-- PRECISAMOS TAMBÉM DE ALGUMAS ACTIONS PARA FETCHEAR DATA....











--> OK.. VAMOS COMEÇAR COM OS COACHES...



O OBJECT DE 'COACH DATA'

DEVE SER ENVIADO AO 



BACKEND...


--> O PROFESSOR ESTÁ USANDO FETCH,

MAS EU VOU USAR AXIOS...



https://vue-coach-project-3c587-default-rtdb.firebaseio.com/coaches.json 



e 



https://vue-coach-project-3c587-default-rtdb.firebaseio.com/requests.json














--> OK...



É ASSIM QUE VAMOS CRIAR 



ESSES OBJECTS DE 'COACH' E 'REQUEST', NO FIREBASE...

ACHO QUE O CÓDIGO FICARÁ ASSIM:








TALVEZ ALGO ASSIM:













import axios from 'axios';

export default {
  loadCoaches(context) {
    axios
      .get(
        'https://vue-coach-project-3c587-default-rtdb.firebaseio.com/coaches.json'
      )
      .then((res) => {
        console.log(res.data, 'RESPONSE DOS GURI');
        context.commit('loadRequests', res.data);
      })
      .catch((error) => {
        console.log(error);
      });
  },
  loadCoach(context, coachId) {
    context.commit('loadCoach', coachId);
  },
  registerCoach(context, coachData) {
    const formattedCoachData = {
      firstName: coachData.first,
      lastName: coachData.last,
      description: coachData.desc,
      hourlyRate: coachData.rate,
      areas: coachData.areas,
      // id: new Date().toISOString() + coachData.first,
      id: context.rootGetters.userId,
    };

    axios
      .post(
        'https://vue-coach-project-3c587-default-rtdb.firebaseio.com/coaches.json',
        formattedCoachData
      )
      .then((res) => {
        console.log(res, 'RESPONSE DOS GURI');
        context.commit('registerCoach', formattedCoachData);
      })
      .catch((error) => {
        console.log(error);
      });
  },
};











OK.... FUNCIONOU.. FICOU TIPO ASSIM:














import axios from 'axios';

export default {
  loadCoaches(context) {
    axios
      .get(
        'https://vue-coach-project-3c587-default-rtdb.firebaseio.com/coaches.json'
      )
      .then((res) => {
        console.log(res.data, 'RESPONSE DOS GURI');
        context.commit('loadRequests', res.data);
      })
      .catch((error) => {
        console.log(error);
      });
  },
  loadCoach(context, coachId) {
    context.commit('loadCoach', coachId);
  },
  registerCoach(context, coachData) {
    const formattedCoachData = {
      firstName: coachData.first,
      lastName: coachData.last,
      description: coachData.desc,
      hourlyRate: coachData.rate,
      areas: coachData.areas,
      // id: new Date().toISOString() + coachData.first,
      id: context.rootGetters.userId,
    };

    axios
      .post(
        'https://vue-coach-project-3c587-default-rtdb.firebaseio.com/coaches.json',
        formattedCoachData
      )
      .then((res) => {
        console.log(res, 'RESPONSE DOS GURI');
        context.commit('registerCoach', formattedCoachData);
      })
      .catch((error) => {
        console.log(error);
      });
  },
};












JÁ CONSIGO 



ADICIONAR COACHES E 



FETCHEAR COACHES... 






AGORA É HORA DE FAZER A MESMA COISA, MAS COM REQUESTS...







TIPO ALGO ASSIM:








import axios from 'axios';

export default {
  loadCoaches(context) {
    axios
      .get(
        'https://vue-coach-project-3c587-default-rtdb.firebaseio.com/coaches.json'
      )
      .then((res) => {
        console.log(res, 'RESPONSE DOS GURI');
        const coaches = [];
        Object.keys(res.data).forEach((key) => {
          coaches.push(res.data[key]);
        });

        console.log(coaches);
        context.commit('loadCoaches', coaches);
      })
      .catch((error) => {
        console.log(error);
      });
  },
  loadCoach(context, coachId) {
    context.commit('loadCoach', coachId);
  },
  registerCoach(context, coachData) {
    const formattedCoachData = {
      firstName: coachData.first,
      lastName: coachData.last,
      description: coachData.desc,
      hourlyRate: coachData.rate,
      areas: coachData.areas,
      // id: new Date().toISOString() + coachData.first,
      id: context.rootGetters.userId,
    };

    axios
      .post(
        'https://vue-coach-project-3c587-default-rtdb.firebaseio.com/coaches.json',
        formattedCoachData
      )
      .then((res) => {
        console.log(res.data, 'RESPONSE DOS GURI');
        context.commit('registerCoach', formattedCoachData);
      })
      .catch((error) => {
        console.log(error);
      });
  },
};


















AGORA, COM OS REQUESTS, FAREMOS ALGO ASSIM:







import axios from 'axios';

export default {
  loadRequests(context) {
    axios
      .get(
        'https://vue-coach-project-3c587-default-rtdb.firebaseio.com/requests.json'
      )
      .then((res) => {
        const requests = [];
        Object.keys(res.data).forEach((key) => {
          requests.push(res.data[key]);
        });

        console.log(requests);
        context.commit('loadRequests', requests);
      })
      .catch((error) => {
        console.log(error);
      });
  },
  createRequest(context, data) {
    const requestData = {
      id: new Date().toISOString() + Math.random().toString(),
      coachId: data.coachId,
      message: data.message,
      email: data.email,
    };

    axios
      .post(
        'https://vue-coach-project-3c587-default-rtdb.firebaseio.com/requests.json',
        requestData
      )
      .then(() => {
        context.commit('registerCoach', requestData);
      })
      .catch((error) => {
        console.log(error);
      });
  },
};















OK... AGORA TENHO UMA VERSÃO INICIAL DO PROJETO QUE FUNCIONA...











MAS O PROFESSOR NÃO QUER QUE CADA OBJECT TENHA 1 ID ALEATÓRIO 

COMO KEY NAME,


POR ISSO ELE VAI MUDAR A SINTAXE 




DO 'axios.post()',,


PARA 


QUE 


UMA PARTE DA URL FIQUE DINÂMICA,

TIPO ASSIM:












  registerCoach(context, coachData) {
    const userId = context.rootGetters.userId;
    const formattedCoachData = {
      firstName: coachData.first,
      lastName: coachData.last,
      description: coachData.desc,
      hourlyRate: coachData.rate,
      areas: coachData.areas,
      // id: new Date().toISOString() + coachData.first,
      // id: context.rootGetters.userId,
    };

    axios
      .put(
        `https://vue-coach-project-3c587-default-rtdb.firebaseio.com/coaches/${userId}.json`,
        formattedCoachData
      )
      .then(() => {
        context.commit('registerCoach', formattedCoachData);
      })
      .catch((error) => {
        console.log(error);
      });
  },














  O PROFESSOR TAMBÉM COLOCOU 

  'PUT' como method do firebase,

  pq 



  ELE VAI QUERER 


  QUE 




  A ENTRY ATUAL SEJA OVERWRITTADA, SE ELA EXISTE,





  OU QUE ELA SEJA CRIADA, SE NÃO EXISTE...













  --> O PROFESSOR DIZ QUE PODERÍAMOS USAR A SINTAXE DO ASYNC AWAIT..






  --> OK, VAMOS USAR, PQ É MELHOR...












  FICOU TIPO ASSIM:









    async registerCoach(context, coachData) {
    const userId = context.rootGetters.userId;
    const formattedCoachData = {
      firstName: coachData.first,
      lastName: coachData.last,
      description: coachData.desc,
      hourlyRate: coachData.rate,
      areas: coachData.areas,
      // id: new Date().toISOString() + coachData.first,
      // id: context.rootGetters.userId,
    };

    const response = await axios.put(
      `https://vue-coach-project-3c587-default-rtdb.firebaseio.com/coaches/${userId}.json`,
      formattedCoachData
    );
    if (!response.ok) {
      console.log("Oops, something went wrong...")
    } else {
      context.commit('registerCoach', formattedCoachData);
    }
  },




  EX:










    async registerCoach(context, coachData) {
    const userId = context.rootGetters.userId;
    const formattedCoachData = {
      firstName: coachData.first,
      lastName: coachData.last,
      description: coachData.desc,
      hourlyRate: coachData.rate,
      areas: coachData.areas,
      // id: new Date().toISOString() + coachData.first,
      // id: context.rootGetters.userId,
    };

    const response = await axios.put(
      `https://vue-coach-project-3c587-default-rtdb.firebaseio.com/coaches/${userId}.json`,
      formattedCoachData
    );
    if (!response.ok) {
      console.log('Oops, something went wrong...');
    } else {
      context.commit('registerCoach', {
        ...coachData,
        id: userId,
      });
    }
  },











  O COMMIT AINDA FUNCIONA 




  COMO ANTES,





  VAI MUDAR DIRETAMENTE A STORE....




  --> MAS O ALTER DA STORE SÓ VAI OCORRER 

  DEPOIS 

  QUE 



  O NEGÓCIO TIVER ACABADO...





  --> aGORA A DATA DEVERÁ 

  FICAR ARMAZENADA NO SERVER, SEMPRE QUE 

  REGISTRARMOS COMO COACH...