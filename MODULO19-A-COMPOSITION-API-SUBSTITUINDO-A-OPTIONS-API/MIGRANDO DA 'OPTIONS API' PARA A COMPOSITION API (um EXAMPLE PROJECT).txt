










OK.... COM TODOS OS CONHECIMENTOS 


DA COMPOSITION 


API 



QUE 






APRENDEMOS ATÉ AGORA,




DEVEMOS 


VOLTAR ATÉ O PROJETO QUE O PROFESSOR NOS MOSTROU NAS ÚLTIMAS LIÇÕES..














---> TEMOS O CÓDIGO FONTE...










--> O PROFESSOR QUER 

QUE 



MIGREMOS 




ESSE APP, OPTIONS API,




À COMPOSITION API...










--> O PROFESSOR RECOMENDA QUE PAUSEMOS O VÍDEO E 



ANALISEMOS O PROJETO...









--> É ISSO QUE FAREI...










NÃO É UM PROJETO SUPER COMPLETO,







É 'ALL ABOUT' TER UMA LISTA DE USERS, COM 1 PUNHADO DE PROJECTS,


ETC....









-----> OK...











DEVEMOS ANALISAR O PROJETO...








SE FICARMOS TRAVADOS, DEVEMOS ASSISTIR À AULA DO PROFESSOR....












ACHO QUE FICA TIPO ASSIM:

















<template>
  <base-container>
    <h2>Active Users</h2>
    <base-search
      @search="updateSearch"
      :search-term="enteredSearchTerm"
    ></base-search>
    <div>
      <button @click="sort('asc')" :class="{ selected: sorting === 'asc' }">
        Sort Ascending
      </button>
      <button @click="sort('desc')" :class="{ selected: sorting === 'desc' }">
        Sort Descending
      </button>
    </div>
    <ul>
      <user-item
        v-for="user in displayedUsers"
        :key="user.id"
        :user-name="user.fullName"
        :id="user.id"
        @list-projects="$emit('list-projects', $event)"
      ></user-item>
    </ul>
  </base-container>
</template>

<script>
import UserItem from './UserItem.vue';

import { ref, computed, watch } from 'vue';

export default {
  components: {
    UserItem,
  },
  props: ['users'],

  setup(props) {
    //methods
    const updateSearch = (val) => {
      enteredSearchTerm.value = val;
    };

    const sort = (mode) => {
      sorting.value = mode;
    };

    //watch

    watch(enteredSearchTerm, (val) => {
      setTimeout(() => {
        if (val === enteredSearchTerm.value) {
          activeSearchTerm.value = val;
        }
      }, 300);
    });

    //data
    const enteredSearchTerm = ref('');
    const activeSearchTerm = ref('');
    const sorting = ref(null);

    //computed
    const availableUsers = computed(() => {
      let users = [];
      if (activeSearchTerm.value) {
        users = props.users.filter((usr) =>
          usr.fullName.includes(activeSearchTerm.value)
        );
      } else if (props.users) {
        users = props.users;
      }
      return users;
    });

    const displayedUsers = computed(() => {
      if (!sorting.value) {
        return availableUsers.value;
      }
      return availableUsers.value.slice().sort((u1, u2) => {
        if (sorting.value === 'asc' && u1.fullName > u2.fullName) {
          return 1;
        } else if (sorting.value === 'asc') {
          return -1;
        } else if (sorting.value === 'desc' && u1.fullName > u2.fullName) {
          return -1;
        } else {
          return 1;
        }
      });
    });

    return {
      enteredSearchTerm,
      activeSearchTerm,
      availableUsers,
      displayedUsers,
      updateSearch,
      sort,
    };
  },

  // data() {
  //   return {
  //     enteredSearchTerm: '',
  //     activeSearchTerm: '',
  //     sorting: null,
  //   };
  // },
  // computed: {
  // availableUsers() {
  //   let users = [];
  //   if (this.activeSearchTerm) {
  //     users = this.users.filter((usr) =>
  //       usr.fullName.includes(this.activeSearchTerm)
  //     );
  //   } else if (this.users) {
  //     users = this.users;
  //   }
  //   return users;
  // },
  // displayedUsers() {
  //   if (!this.sorting) {
  //     return this.availableUsers;
  //   }
  //   return this.availableUsers.slice().sort((u1, u2) => {
  //     if (this.sorting === 'asc' && u1.fullName > u2.fullName) {
  //       return 1;
  //     } else if (this.sorting === 'asc') {
  //       return -1;
  //     } else if (this.sorting === 'desc' && u1.fullName > u2.fullName) {
  //       return -1;
  //     } else {
  //       return 1;
  //     }
  //   });
  // },
  // },
  // methods: {
  //   updateSearch(val) {
  //     this.enteredSearchTerm = val;
  //   },
  //   sort(mode) {
  //     this.sorting = mode;
  //   },
  // },
  // watch: {
  //   enteredSearchTerm(val) {
  //     setTimeout(() => {
  //       if (val === this.enteredSearchTerm) {
  //         this.activeSearchTerm = val;
  //       }
  //     }, 300);
  //   },
  // },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>












O OUTRO CÓDIGO FICOU ASSIM:
















<template>
  <base-container v-if="user">
    <h2>{{ user.fullName }}: Projects</h2>
    <base-search
      v-if="hasProjects"
      @search="updateSearch"
      :search-term="enteredSearchTerm"
    ></base-search>
    <ul v-if="hasProjects">
      <project-item
        v-for="prj in availableProjects"
        :key="prj.id"
        :title="prj.title"
      ></project-item>
    </ul>
    <h3 v-else>No projects found.</h3>
  </base-container>
  <base-container v-else>
    <h3>No user selected.</h3>
  </base-container>
</template>

<script>
import { watch, ref, computed } from 'vue';
import ProjectItem from './ProjectItem.vue';

export default {
  components: {
    ProjectItem,
  },
  props: ['user'],

  setup(props) {
    //methods
    const updateSearch = (val) => {
      enteredSearchTerm.value = val;
    };

    //data
    const enteredSearchTerm = ref('');
    const activeSearchTerm = ref('');

    //computed
    const hasProjects = computed(() => {
      return props.user.projects && availableProjects.value.length > 0;
    });

    const availableProjects = computed(() => {
      if (activeSearchTerm.value) {
        return props.user.projects.filter((prj) =>
          prj.title.includes(activeSearchTerm.value)
        );
      }
      return props.user.projects;
    });

    //watch
    watch(enteredSearchTerm, (val) => {
      setTimeout(() => {
        if (val === enteredSearchTerm.value) {
          activeSearchTerm.value = val;
        }
      }, 300);
    });

    watch(props.user, () => {
      enteredSearchTerm.value = '';
    });

    return {
      enteredSearchTerm,
      activeSearchTerm,
      hasProjects,
      availableProjects,
      updateSearch,
    };
  },

  // data() {
  //   return {
  //     enteredSearchTerm: '',
  //     activeSearchTerm: '',
  //   };
  // },
  // computed: {
  //   hasProjects() {
  //     return this.user.projects && this.availableProjects.length > 0;
  //   },
  //   availableProjects() {
  //     if (this.activeSearchTerm) {
  //       return this.user.projects.filter((prj) =>
  //         prj.title.includes(this.activeSearchTerm)
  //       );
  //     }
  //     return this.user.projects;
  //   },
  // },
  // methods: {
  //   updateSearch(val) {
  //     this.enteredSearchTerm = val;
  //   },
  // },
  // watch: {
  //   enteredSearchTerm(val) {
  //     setTimeout(() => {
  //       if (val === this.enteredSearchTerm) {
  //         this.activeSearchTerm = val;
  //       }
  //     }, 300);
  //   },
  //   user() {
  //     this.enteredSearchTerm = '';
  //   },
  // },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>






























agora vou executar o projeto, ver se está funcionando...