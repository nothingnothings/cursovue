











OK... AGORA COMEÇAMOS COM 'REFS`,


`REACTIVE`' (que substituem 'data(){}'...)






E 'FUNCTIONS' (que substituem methods)












--> CERTO...









MAS E QUANTO A 'COMPUTED PROPERTIES'?









COMO PODEMOS SUBSTITUIR COMPUTED PROPERTIES, 


NA COMPOSITION API?

















--> OK.... DIGAMOS QUE 



TEMOS MAIS  DO QUE O BUTTON DE 'setAge',






COMO POR EXEMPLO 

2 INPUTS...








<div>
    <input type="text" placeholder="First Name"/>
    <input type="text" placeholder="Last Name" />
</div>










OK.... O QUE QUEREMOS FAZER, AQUI,



É 

COMBINAR OS VALUES DESSES 2 INPUT FIELDS EM 1 ÚNICO VALUE,

POR MEIO 


DE 'computed'...










--> OK...
 

 É UMA COMBINAÇÃO ENTRE FIRST E LAST NAME...









 COMO PODEMOS FAZER ISSO?










 BEM, O PROFESSOR COMEÇA POR 2 REFS,










 const firstName = ref("");
 const lastName = ref("");














 ESSAS 2 REFS VÃO COMEÇAR VAZIAS, INICIALMENTE...










 É CLARO QUE PODERÍAMOS TER 


 VALORES INICIAIS DIFERENTES,

 MAS O PROFESSOR COMEÇA COM EMPTY STRINGS...













 OK... O PROFESSOR DIZ QUE LOGO VEREMOS COMO FAZER TWO-WAY BINDING 

 COM 



 A COMPOSITION API...










 AGORA, O PROFESSOR QUER ATUALIZAR O 'FIRST NAME'

 SEMPRE QUE 



 DIGITARMOS NO PRIMEIRO INPUT,


 E
  




  'LAST NAME'

  SEMPRE QUE 

  DIGITARMOS NO SEGUNDO INPUT..










  --> DEPOI VEREMOS 2-WAY BINDING,




  POR ISSO, POR ENQUANTO,



  O PROFESSOR COLOCA 1 LISTENER DE EVENT DE INPUT,




  QUE VAI TRIGGAR 1 FUNCTION QUE VAI ter 1 nome de 'setFirstName',



  

  QUE VAI JUSTAMENTE SETTAR 




  o value de 'firstName' 


  COMO EQUIVALENTE A 'event.target.value'... 




  EX:




  const setFirstName = () => {
        firstName.value = event.target.value;
  }









  --> FAZEMOS A MESMA COISA PARA O 'LASTNAME'...











  EX:

















  <template>
  <div>
    <section class="container">
      <h2>{{ user.name }}</h2>
      <h3>{{ user.age }}</h3>
      <h3>{{ counter }}</h3>
    </section>
    <section class="container">
      <h2>{{ user2.name }}</h2>
      <h3>{{ user2.age }}</h3>
      <h3>{{ counter }}</h3>
    </section>
    <section class="container">
      <h2>{{ joanaName }}</h2>
      <h3>{{ joanaAge }}</h3>
      <h3>{{ counter }}</h3>
    </section>
    <div>
      <!-- EXEMPLO DE COMO USAR COMPUTED COM A COMPOSITION API... -->
      <input type="text" placeholder="First Name" @click="setFirstName" />
      <input type="text" placeholder="Last Name" @click="setLastName"/>
    </div>
    <!-- <button @click="user.age = 32"></button> -->
    <button @click="setNewData()"></button>
  </div>
</template>

<script>
import { ref } from 'vue'; ///usado com a COMPOSITION API... /// use com values SINGULARES, como 'const counter = ref(0)'
import { reactive } from 'vue'; ////é a mesma coisa que o 'ref()', mas é usado COM __ OBJECTS...

import { isReactive } from 'vue'; ///esse method RETORNA TRUE OU FALSE; se aquele value for REACTIVE (criado com REACTIVE() ), ele retorna true...
import { isRef } from 'vue'; ///esse method RETORNA TRUE OU FALSE; se aquele value for REACTIVE (criado com REF() ), ele retorna true...

import { toRefs } from 'vue'; ////TRANSFORMA TODOS OS NESTED VALUES/KEYS DE 1 OBJECT EM 'REACTIVE VALUES' (em refs, essencialmente)...

export default {
  // data() {
  //   return {
  //     userName: 'Maximilian',
  //   };
  // },

  setup() {
    // ? É O PILAR CENTRAL DA COMPOSITION API, o 'setup()'

    // const uName = ref('Maximilian'); ////armazenamos os values de 'data' em VARIÁVEIS COMUNS, como se não estivéssemos no vue... aí esses values viram 'REACTIVE VALUES', por assim dizer...
    // const uName = 'Maximilian' --- sem reactive value... (sem 'ref()')
    // const uAge = ref(31);

    ///É ASSIM QUE DEFINIMOS METHODS/FUNCTIONS, DENTRO DO SETUP METHOD... (ficarão disponíveis dentro do nosso COMPONENT, exatamente como 'methods:{}' na OPTIONS api do vue...)

    const setNewData = () => {
      user.age = 50;
    };

    const uCounter = ref(0);
    const user = ref({
      name: 'Maximilian',
      age: 31,
    });

    const user2 = reactive({
      ///// REACTIVE é quase a mesma coisa que ref, mas FUNCIONA APENAS COM OBJECTS...
      name: 'Manuel', ///a única diferença é que podemos ACESSAR E MUDAR SEUS VALUES com 'user.name' em vez de 'user.value.name'...
      age: 22,
    });

    const user3 = reactive({
      ///// REACTIVE é quase a mesma coisa que ref, mas FUNCIONA APENAS COM OBJECTS...
      name: 'Joana', ///a única diferença é que podemos ACESSAR E MUDAR SEUS VALUES com 'user.name' em vez de 'user.value.name'...
      age: 35,
    });

    const user3Refs = toRefs(user3); ////ESSE METHOD CONVERTE TODOS OS VALUES/KEYS 'NORMAIS' DE 1 OBJECT EM 'REFS' (bem útil...)

    setTimeout(
      () => {
        // uName = 'Max'; ///nunca faça assim, pq NÃO QUEREMOS SUBSTITUIR O VALUE 'COM' REF' POR 1 VALUE 'SEM REF'... (sem reatividade)...

        // uName.value = 'Max'; ///basta escrever assim, para trocar o value armazenado dentro da ref...
        // uAge.value = 32;
        //'.value' é usado apenas para SETTAR NOVOS VALUES para suas propriedades 'data'...
        user.value.name = 'Max';
        user.value.name = 34;
        uCounter.value = 1;

        user2.name = 'Manu';
        user2.age = 24;

        user3.name = 'Joana 2';
        user3.age = 50;
      },

      2000
    );

    const firstName = ref('');
    const lastName = ref('');

    ////demonstra o uso da composition api com listeners nos elementos do html...
    const setFirstName = (event) => {
      firstName.value = event.target.value;
    };

    const setLastName = (event) => {
      lastName.value = event.target.value;
    };

    return {
      //nesse object, retornamos os VALUES/KEYS QUE QUEREMOS QUE FIQUEM EXPOSTOS AO NOSSO DOM....
      // userName: uName, //com isso, a key de 'userName' consegue ser acessada no TEMPLATE DA PÁGINA...
      // age: uAge,

      // userName: user.value.name,  ///isso não funcionará...
      // age: user.value.age,

      user: user, // isso funciona (deve-se passar o RAW CONCRETE OBJECT, se usamos o ref, E NÃO OS VALUES dentro dele, como 'user.value.name'....)
      counter: uCounter,
      user2: user2, //nos mostra o uso de 'reactive()''

      joanaName: user3Refs.name,
      joanaAge: user3Refs.age,
      setNewData: setNewData, //// É ASSIM QUE DEFINIMOS/PASSAMOS METHODS AO TEMPLATE DE NOSSO APP...
      setLastName,
      setFirstName
    };
  },
};
</script>

<style>
* {
  box-sizing: border-box;
}

html {
  font-family: sans-serif;
}

body {
  margin: 0;
}

.container {
  margin: 3rem auto;
  max-width: 30rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  padding: 1rem;
  text-align: center;
}
</style>
















OK... É CLARO QUE EU EXPUS
 


 ESSAS FUNCTIONS AO OBJECT RETORNADO 




 ALI EMBAIXO... (para conseguir usar no template)...











 OK.. AGORA ESSAS FUNCTIONS SÃO EXPOSTAS AO TEMPLATE...













 E É POR ISSO QUE JÁ BINDEI, COM ESTE CÓDIGO:




       <input type="text" placeholder="First Name" @click="setFirstName" />
      <input type="text" placeholder="Last Name" @click="setLastName"/>













OK... O VUE VAI EXECUTAR ESSAS FUNCTIONS PARA NÓS... E PODEMOS 


OUTPUTTAR





ESSAS COISAS LÁ NO DOM, 

LÁ NO TEMPLATE, 

TIPO ASSIM:





      <input type="text" placeholder="First Name" @click="setFirstName" />
      <input type="text" placeholder="Last Name" @click="setLastName" />

      <div>
        {{ firstName }}
      </div>
      <div>
        {{ lastName }}
      </div>













OK...









MAS AGORA O PROFESSOR 








QUER ADICIONAR UMA 'COMPUTED' PROPERTY,






SERÁ UMA PROPRIEDADE QUE SERÁ ATUALIZADA 

SEMPRE QUANDO 






O 'firstName'




e o 'lastName'


FOREM ALTERADOS...












--> MAS É CLARO QUE NÃO USAREMOS A OPTION DE 'computed: {}',







PQ DEVEMOS __, NA VERDADE,


_ ESCREVER CÓDIGO DENTRO DO METHOD DE 'setup()'...










--> PARA CONSEGUIR DEFINIR 'COMPUTED' COISAS 


LÁ 


NA COMPOSITION API,


PRECISAMOS USAR 


A FUNCTION DE 'computed',


importada lá do vue...













O CALL DESSE METHOD SERÁ ESSENCIALMENTE ASSIM:









computed(
    () => {

    }
)







ELA REQUER UMA ARROW FUNCTION NO INTERIOR...







EX:






    computed(() => {}); ////ESSA É A FUNCTION QUE VAI 'SEGURAR NOSSA COMPUTED LOGIC'...








E ESSA FUNCTION É EXECUTADA __ DENTRO __ 

DE 


'setup()',

no caso...













---> É ESSENCIALMENTE O QUE TÍNHAMOS COM O 'computed()',


antigamente (

pq computed properties, com a options api,

ERAM METHODS EM QUE RETORNÁVAMOS O COMPUTED VALUE...


)







--> AQUI É ESSENCIALMENTE A MESMA COISA,




MAS ESCREVEMOS TIPO ASSIM:




    computed(() => {

        return firstName + ' ' + lastName
    }); 

















---> E  __ É CLARO__ QUE VAMOS ARMAZENAR ISSO EM UMA CONSTANTE,

QUE VAI SER RETORNADA POR AQUELE OBJECT ALI DE BAIXO,
TIPO ASSIM:




















<template>
  <div>
    <section class="container">
      <h2>{{ user.name }}</h2>
      <h3>{{ user.age }}</h3>
      <h3>{{ counter }}</h3>
    </section>
    <section class="container">
      <h2>{{ user2.name }}</h2>
      <h3>{{ user2.age }}</h3>
      <h3>{{ counter }}</h3>
    </section>
    <section class="container">
      <h2>{{ joanaName }}</h2>
      <h3>{{ joanaAge }}</h3>
      <h3>{{ counter }}</h3>
    </section>
    <div>
      <!-- EXEMPLO DE COMO USAR COMPUTED COM A COMPOSITION API... -->
      <input type="text" placeholder="First Name" @click="setFirstName" />
      <input type="text" placeholder="Last Name" @click="setLastName" />

      <div>
        {{ firstName }}
      </div>
      <div>
        {{ lastName }}
      </div>
      <div>
        {{ fullName }}
      </div>
    </div>
    <!-- <button @click="user.age = 32"></button> -->
    <button @click="setNewData()"></button>
  </div>
</template>

<script>
import { ref } from 'vue'; ///usado com a COMPOSITION API... /// use com values SINGULARES, como 'const counter = ref(0)'
import { reactive } from 'vue'; ////é a mesma coisa que o 'ref()', mas é usado COM __ OBJECTS...

import { isReactive } from 'vue'; ///esse method RETORNA TRUE OU FALSE; se aquele value for REACTIVE (criado com REACTIVE() ), ele retorna true...
import { isRef } from 'vue'; ///esse method RETORNA TRUE OU FALSE; se aquele value for REACTIVE (criado com REF() ), ele retorna true...

import { toRefs } from 'vue'; ////TRANSFORMA TODOS OS NESTED VALUES/KEYS DE 1 OBJECT EM 'REACTIVE VALUES' (em refs, essencialmente)...
import { computed } from 'vue';

export default {
  // data() {
  //   return {
  //     userName: 'Maximilian',
  //   };
  // },

  setup() {
    // ? É O PILAR CENTRAL DA COMPOSITION API, o 'setup()'

    // const uName = ref('Maximilian'); ////armazenamos os values de 'data' em VARIÁVEIS COMUNS, como se não estivéssemos no vue... aí esses values viram 'REACTIVE VALUES', por assim dizer...
    // const uName = 'Maximilian' --- sem reactive value... (sem 'ref()')
    // const uAge = ref(31);

    ///É ASSIM QUE DEFINIMOS METHODS/FUNCTIONS, DENTRO DO SETUP METHOD... (ficarão disponíveis dentro do nosso COMPONENT, exatamente como 'methods:{}' na OPTIONS api do vue...)

    const setNewData = () => {
      user.age = 50;
    };

    const uCounter = ref(0);
    const user = ref({
      name: 'Maximilian',
      age: 31,
    });

    const user2 = reactive({
      ///// REACTIVE é quase a mesma coisa que ref, mas FUNCIONA APENAS COM OBJECTS...
      name: 'Manuel', ///a única diferença é que podemos ACESSAR E MUDAR SEUS VALUES com 'user.name' em vez de 'user.value.name'...
      age: 22,
    });

    const user3 = reactive({
      ///// REACTIVE é quase a mesma coisa que ref, mas FUNCIONA APENAS COM OBJECTS...
      name: 'Joana', ///a única diferença é que podemos ACESSAR E MUDAR SEUS VALUES com 'user.name' em vez de 'user.value.name'...
      age: 35,
    });

    const user3Refs = toRefs(user3); ////ESSE METHOD CONVERTE TODOS OS VALUES/KEYS 'NORMAIS' DE 1 OBJECT EM 'REFS' (bem útil...)

    setTimeout(
      () => {
        // uName = 'Max'; ///nunca faça assim, pq NÃO QUEREMOS SUBSTITUIR O VALUE 'COM' REF' POR 1 VALUE 'SEM REF'... (sem reatividade)...

        // uName.value = 'Max'; ///basta escrever assim, para trocar o value armazenado dentro da ref...
        // uAge.value = 32;
        //'.value' é usado apenas para SETTAR NOVOS VALUES para suas propriedades 'data'...
        user.value.name = 'Max';
        user.value.name = 34;
        uCounter.value = 1;

        user2.name = 'Manu';
        user2.age = 24;

        user3.name = 'Joana 2';
        user3.age = 50;
      },

      2000
    );

    const firstName = ref('');
    const lastName = ref('');

    ////demonstra o uso da composition api com listeners nos elementos do html...
    const setFirstName = (event) => {
      firstName.value = event.target.value;
    };

    const setLastName = (event) => {
      lastName.value = event.target.value;
    };

    const fullName = computed(() => {
      ////ESSA É A FUNCTION QUE VAI 'SEGURAR CADA COMPUTED LOGIC'...

      return firstName.value + ' ' + lastName.value;
    });

    return {
      //nesse object, retornamos os VALUES/KEYS QUE QUEREMOS QUE FIQUEM EXPOSTOS AO NOSSO DOM....
      // userName: uName, //com isso, a key de 'userName' consegue ser acessada no TEMPLATE DA PÁGINA...
      // age: uAge,

      // userName: user.value.name,  ///isso não funcionará...
      // age: user.value.age,

      user: user, // isso funciona (deve-se passar o RAW CONCRETE OBJECT, se usamos o ref, E NÃO OS VALUES dentro dele, como 'user.value.name'....)
      counter: uCounter,
      user2: user2, //nos mostra o uso de 'reactive()''

      joanaName: user3Refs.name,
      joanaAge: user3Refs.age,
      setNewData: setNewData, //// É ASSIM QUE DEFINIMOS/PASSAMOS METHODS AO TEMPLATE DE NOSSO APP...
      firstName,
      lastName,
      fullName, ///EXEMPLO DE COMPUTED PROPERTY SENDO UTILIZADA COM A COMPOSITION API...
      setLastName,
      setFirstName,
    };
  },
};
</script>

<style>
* {
  box-sizing: border-box;
}

html {
  font-family: sans-serif;
}

body {
  margin: 0;
}

.container {
  margin: 3rem auto;
  max-width: 30rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  padding: 1rem;
  text-align: center;
}
</style>














CERTO...







mas eu errei o código...










o correto seria 'firstName.value' + 'lastName.value'...






-> VOCê SÓ PODE OMITIR A PROPRIEDADE DE 'value'















--> SE VC USA __ O VALUE __ _ EM QUALQUER LUGAR __ 

DO SEU CÓDIGO JAVASCRIPT,

É 

NECESSÁRIO ESCREVER '.value'...












OK... COM ISSO 


RETORNAMOS ESSE VALUE COMO UMA COMPUTED PROPERTY,

E ESSA COMPUTED FUNCTION 



SIMPLESMENTE 

ASSEGURA QUE 

ESSA 


FUNCTION VAI SEMPRE SER REEXECUTADA QUANDO 


'firstName'


ou 'lastName' 

for alterado...
















É ESCRITO ASSIM, BASICAMENTE:







    const fullName = computed(() => {
      ////ESSA É A FUNCTION QUE VAI 'SEGURAR CADA COMPUTED LOGIC'...

      return firstName.value + ' ' + lastName.value;
    });







O COMPUTE DE 1 VALUE É NICE,
SIM,







MAS TEMOS QUE O ARMAZENAR EM UMA CONSTANTE..







OK.... MAS 1 COMPUTED PROPERTY,

POR TRÁS DAS CENAS,



É BASICAMENTE 



1 REF... --> A ÚNICA DIFERENÇA PARA 'REFS'





NORMAIS 

É QUE 




COMPUTED PROPERTIES __ _SÃO ___READ-ONLY...












REFS NORMAIS, COMO 'firstName' 


e 'lastName',

  



ELAS SÃO __ READ AND WRITE (


    podemos definir novos values para 

    elas,

    como visto em locais como 


    'firstName.value = event.target.value'...


)








--> JÁ COMPUTED PROPERTIES,

REFS,



SÃO __ _READ-ONLY...











--> ISSO QUER DIZER QUE NÃO PODEMOS FAZER ALGO COMO:




    const fullName = computed(() => {
      ////ESSA É A FUNCTION QUE VAI 'SEGURAR CADA COMPUTED LOGIC'...

      return firstName.value + ' ' + lastName.value;
    });


    fullName.value = 'gibberish'...




















OK... AÍ RETORNAMOS ESSA COMPUTED REF/PROPERTY,

E ISSO 

UPDATA 






NOSSO 

DOM 



SEMPRE QUE DIGITARMOS NESSES INPUTS...












OK, DEU CERTO, E O CÓDIGO FICOU ASSIM:











<template>
  <div>
    <section class="container">
      <h2>{{ user.name }}</h2>
      <h3>{{ user.age }}</h3>
      <h3>{{ counter }}</h3>
    </section>
    <section class="container">
      <h2>{{ user2.name }}</h2>
      <h3>{{ user2.age }}</h3>
      <h3>{{ counter }}</h3>
    </section>
    <section class="container">
      <h2>{{ joanaName }}</h2>
      <h3>{{ joanaAge }}</h3>
      <h3>{{ counter }}</h3>
    </section>
    <div>
      <!-- EXEMPLO DE COMO USAR COMPUTED COM A COMPOSITION API... -->
      <input type="text" placeholder="First Name" @input="setFirstName" />
      <input type="text" placeholder="Last Name" @input="setLastName" />

      <div>
        {{ firstName }}
      </div>
      <div>
        {{ lastName }}
      </div>
      <div>
        {{ fullName }}
      </div>
    </div>
    <!-- <button @click="user.age = 32"></button> -->
    <button @click="setNewData()">SET NEW DATA</button>
  </div>
</template>

<script>
import { ref } from 'vue'; ///usado com a COMPOSITION API... /// use com values SINGULARES, como 'const counter = ref(0)'
import { reactive } from 'vue'; ////é a mesma coisa que o 'ref()', mas é usado COM __ OBJECTS...

// import { isReactive } from 'vue'; ///esse method RETORNA TRUE OU FALSE; se aquele value for REACTIVE (criado com REACTIVE() ), ele retorna true...
// import { isRef } from 'vue'; ///esse method RETORNA TRUE OU FALSE; se aquele value for REACTIVE (criado com REF() ), ele retorna true...

import { toRefs } from 'vue'; ////TRANSFORMA TODOS OS NESTED VALUES/KEYS DE 1 OBJECT EM 'REACTIVE VALUES' (em refs, essencialmente)...
import { computed } from 'vue';

export default {
  // data() {
  //   return {
  //     userName: 'Maximilian',
  //   };
  // },

  setup() {
    // ? É O PILAR CENTRAL DA COMPOSITION API, o 'setup()'

    // const uName = ref('Maximilian'); ////armazenamos os values de 'data' em VARIÁVEIS COMUNS, como se não estivéssemos no vue... aí esses values viram 'REACTIVE VALUES', por assim dizer...
    // const uName = 'Maximilian' --- sem reactive value... (sem 'ref()')
    // const uAge = ref(31);

    ///É ASSIM QUE DEFINIMOS METHODS/FUNCTIONS, DENTRO DO SETUP METHOD... (ficarão disponíveis dentro do nosso COMPONENT, exatamente como 'methods:{}' na OPTIONS api do vue...)

    const setNewData = () => {
      user.value.age = 50;
    };

    const uCounter = ref(0);
    const user = ref({
      name: 'Maximilian',
      age: 31,
    });

    const user2 = reactive({
      ///// REACTIVE é quase a mesma coisa que ref, mas FUNCIONA APENAS COM OBJECTS...
      name: 'Manuel', ///a única diferença é que podemos ACESSAR E MUDAR SEUS VALUES com 'user.name' em vez de 'user.value.name'...
      age: 22,
    });

    const user3 = reactive({
      ///// REACTIVE é quase a mesma coisa que ref, mas FUNCIONA APENAS COM OBJECTS...
      name: 'Joana', ///a única diferença é que podemos ACESSAR E MUDAR SEUS VALUES com 'user.name' em vez de 'user.value.name'...
      age: 35,
    });

    const user3Refs = toRefs(user3); ////ESSE METHOD CONVERTE TODOS OS VALUES/KEYS 'NORMAIS' DE 1 OBJECT EM 'REFS' (bem útil...)

    setTimeout(
      () => {
        // uName = 'Max'; ///nunca faça assim, pq NÃO QUEREMOS SUBSTITUIR O VALUE 'COM' REF' POR 1 VALUE 'SEM REF'... (sem reatividade)...

        // uName.value = 'Max'; ///basta escrever assim, para trocar o value armazenado dentro da ref...
        // uAge.value = 32;
        //'.value' é usado apenas para SETTAR NOVOS VALUES para suas propriedades 'data'...
        user.value.name = 'Max';
        user.value.age = 34;
        uCounter.value = 1;

        user2.name = 'Manu';
        user2.age = 24;

        user3.name = 'Joana 2';
        user3.age = 50;
      },

      2000
    );

    const firstName = ref('');
    const lastName = ref('');

    ////demonstra o uso da composition api com listeners nos elementos do html...
    const setFirstName = (event) => {
      firstName.value = event.target.value;
    };

    const setLastName = (event) => {
      lastName.value = event.target.value;
    };

    const fullName = computed(() => {
      ////ESSA É A FUNCTION QUE VAI 'SEGURAR CADA COMPUTED LOGIC'...

      return firstName.value + ' ' + lastName.value;
    });

    return {
      //nesse object, retornamos os VALUES/KEYS QUE QUEREMOS QUE FIQUEM EXPOSTOS AO NOSSO DOM....
      // userName: uName, //com isso, a key de 'userName' consegue ser acessada no TEMPLATE DA PÁGINA...
      // age: uAge,

      // userName: user.value.name,  ///isso não funcionará...
      // age: user.value.age,

      user: user, // isso funciona (deve-se passar o RAW CONCRETE OBJECT, se usamos o ref, E NÃO OS VALUES dentro dele, como 'user.value.name'....)
      counter: uCounter,
      user2: user2, //nos mostra o uso de 'reactive()''

      joanaName: user3Refs.name,
      joanaAge: user3Refs.age,
      setNewData: setNewData, //// É ASSIM QUE DEFINIMOS/PASSAMOS METHODS AO TEMPLATE DE NOSSO APP...
      firstName,
      lastName,
      fullName, ///EXEMPLO DE COMPUTED PROPERTY SENDO UTILIZADA COM A COMPOSITION API...
      setLastName,
      setFirstName,
    };
  },
};
</script>

<style>
* {
  box-sizing: border-box;
}

html {
  font-family: sans-serif;
}

body {
  margin: 0;
}

.container {
  margin: 3rem auto;
  max-width: 30rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  padding: 1rem;
  text-align: center;
}
</style>














OK, A DEFINIÇÃO DE 1 COMPUTED REF DEU CERTo...