











COMO VOCÊ PODE PERCEBER,






EMIT DE EVENTS É ALGO IMPORTANTE (por parte dos seus child components)..











--> E, ASSIM COMO COM 'PROPS',



VOCÊ 
PODE 


DEFINIR 

'O QUE É EMITIDO POR CADA  


COMPONENT'..









--> BASTA 



COLOCAR UMA 



KEY DE 





'''emits''..









-> export default {



    props: {

    },

    emits: [],


    data() {
        return {
            detailsAreVisible: false
        }
    },


    methods: {

     } ,

     computed: {}
}













--> O 'EMITS' É O CONTRÁRIO DE 'PROPS':




COM PROPS VOCÊ DEFINE 


OS PROPS QUE ESSE COMPONENT VAI RECEBER...










JÁ COM 'emits',

VOCê DEFINE OS EVENTS QUE SEU COMPONNET VAI EVENTUALMENTE EMITIR --> ISSO DEIXA ÓBVIO,  A OUTROS 

DEVS,

O QUE 


SEU 

COMPONENT EMITE...









--> VOCê PODE DEFINIR:



'o nome da coisa emitida'... (event emitido)..







ex:











emits: ['toggle-favorite']










--> OK... AÍ VOCê PODE DEFINIR COISAS MAIS EXPLÍCITAS SOBRE SEUS EVENTS,]



COMO 'A DATA QUE SERÁ EMITIDA JUNTO DE SEUS EVENTS'...














--> BASTA VOCê DEFFINIR 'emits'


COMO UM __ OBJECT (em vez de um array),

E, ENTÃO,

DENTRO DELE,



DEFINIR A DATA QUE 

VOCê EVENTUALMENTE EMITIRÁ, COMO VALUE...





tipo assim:








ex:









emits: {

    'toggle-favorite': (id) => {

    }
}











--> NESSE CASO,

DEFINIMOS/DEIXAMOS EXPLÍCITO QUE VAMOS 'EMITIR ID, COMO UM PARÂMETRO DESSE EVENT'.








ex:








emits: {

    'toggle-favorite': (id) => {
        if () {

        }
    }
}













--> AÍ, NO CASO,

PODEMOS ADICIONAR 'VALIDATION' A 


ESSE EVENT/EMIT DESSE EVENT -->  VALIDATION PARA 


'''CHECAR SE O ID EXISTE''' --> se o id 



FOR TRUE,



VAMOS QUERER RETORNAR TRUE... CASO CONTRÁRIO, V AMOS QUERER RETORNAR FALSE-- >





e também colocar um console.warn,






TIPO ASSIM:









emits: {

    'toggle-favorite': (id) => {
        if (id) {
            return true;
        } else {
            console.warn('id is missing!');
            return false;
        }
    }
}












----> COM ISSO,





SE TENTAMOS FAZER EMIT DE UM 

EVENT SEM TER 

ESSE 

ARGUMENTO/DATA,



VAMOS RECEBER UM ERROR (

    pq colocamos o 

    código de 


    ''console.warn()
        return false''
)










--> ISSO É ÚTIL _ ESPECIALMENTE__ SE VOCÊ ESTÁ TRABALHANDO EM UMA EQUIPE...












--> O PROFESSOR NÃO VAI USAR ESSE CÓDIGO COMPLETO DE VALIDATION, 

MAS É ÚTIL CONHECER ESSA FEATURE..










-----> OK... MAS O PROFESSOR AINDA VAI USAR A SINTAXE SIMPLES DE DEFINE DE EMITS,


PARA 

DEIXAR BEM CLARO QUAIS EVENTS ELE VAI EMITIR, POR COMPONENT..











EX DO CÓDIGO COMPLETO:






<template>
  <li>
    <h2>{{ name }} {{ friendIsFavorite === '1' ? '(FAVORITE)' : '' }}</h2>
    <button @click="toggleFavoriteCorrectVersion">Toggle Favorite</button>
    <button @click="toggleDetails">{{ detailsAreVisible ? 'Hide' : 'Show' }} Details</button>
    <ul v-if="detailsAreVisible">
      <li>
        <strong>Phone:</strong>
        {{ phoneNumber }}
      </li>
      <li>
        <strong>Email:</strong>
        {{ emailAddress }}
      </li>
    </ul>
  </li>


</template>

<script>
export default {

  // props: [ ////É ASSIM QUE PASSAMOS O 'BARE MINIMUM' DE INFO SOBRE OS NOSSOS PROPS; NO CASO, PASSAMOS APENAS __ _o NAME _ DOS PROPS a serem recebidos por esse child component (É CLARO QUE, EM APPS MAIORES, VAMOS PASSAR MAIS INFORMAÇÕES, VAMOS 'TYPAR' OS NOSSOS PROPS, PARA QUE COISAS INCORRETAS NÃO SEJAM RECEBIDAS POR NOSSOS CHILD COMPONENTS)...
  //   'name',
  //   'phoneNumber',
  //   'emailAddress',
  //   'isFavorite'
  // ],



  // emits: ['custom-event-created-by-me'],  ///VERSÃO SIMPLES DE ESPECIFICAR QUAIS EVENTS SERÃO EMITIDOS POR ESSE COMPONENT...

  emits: {
    'custom-events-created-by-me': (id) => {  ///versão complexa de ESPECIFICAR QUAIS EVENTS SERÃO EMITIDOS POR ESSE COMPONENT (e qual data SERÁ EMITIDA JUNTA DESSE EVENT... E COMO DEVERÁ SER VALIDADA ESSA DATA)...

      if (id) {
        return true;
      } else {
        console.warn('EXEMPLO - FAILED TO RECEIVE ID DATA ON CUSTOM EMITTED EVENT');
        return false;
      }
    },

    'custom-events-created-by-me-2': (id) => {  ///versão complexa de ESPECIFICAR QUAIS EVENTS SERÃO EMITIDOS POR ESSE COMPONENT (e qual data SERÁ EMITIDA JUNTA DESSE EVENT... E COMO DEVERÁ SER VALIDADA ESSA DATA)...

if (id) {
  return true;
} else {
  console.warn('EXEMPLO - FAILED TO RECEIVE ID DATA ON CUSTOM EMITTED EVENT');
  return false;
}
}


  },

  props: { ///MANEIRA MAIS ELABORADA DE ESPECIFICAR OS PROPS A SEREM RECEBIDOS.. --> CADA PROPS SERÁ UMA key nesse seu object...

    // name: String,  ///essa já é uma maneira mais elaborada de dizer o que vamos receber com esse prop.... mas há uma maneira mais detalhada ainda, vista logo abaixo desta linha:
    name: { ///assim conseguimos definir a maior quantidade de detalhes possível sobre esse prop que será recebido...

      type: String, ///será o TYPE desse negócio, desse prop...
      required: false ////DEFINE SE _ ESSE PROP __ DEVE SER OBRIGATORIAMENTE PASSADO A ESSE NOSSO COMPONENT, OU NÃO...


    },


    // phoneNumber: String,
    phoneNumber: {
      type: String,
      required: true
    },
    emailAddress: String,

    ///exemplo de prop que é definido como 'OPCIONAL'

    // isFavorite: {
    //   type: String,
    //   required: false ///será opcional
    // }


    isFavorite: {
      type: String,
      required: false, ///será opcional o pass desse prop
      default: '0', //será o VALUE USADO POR ESSE PROP nesse nosso component, se ESSE PROP ESPECÍFICO não for passado pelo PARENT COMPONENT...
      // default: function() { ///TAMBÉM PODEMOS RODAR FUNCTIONS PARA DERIVAR O 'default', se assim desejarmos...
      //   return 'VALORDEFAULT';
      // }


      validator: function (valueProvidedByTheProp) { //////PODEMOS TAMBÉM TER A KEY DE 'validator', que SEMPRE SERÁ UMA FUNCTION QUE __ VAI RETORNAR __ TRUE OU FALSE...


        //O VALIDATOR SEMPRE VAI RETORNAR OU 'TRUE' OU 'FALSE' 
        ///e sempre vai receber, como parâmetro, o value PROVIDENCIADO/PASSADO no nosso prop...
        ///dentro do validator podemos ter QUALQUER VALIDATION LOGIC DE NOSSA ESCOLHA, para determinar se o value recebido como esse prop é válido ou não....



        ////este é um validator exemplo, que é a mesma coisa que escrever 'type: Boolean' nesse prop.... (pq, como com os booleans, aqui só permitiremos 2 values, '0' e '1', que são quase exatamente como true/false, mas com STRINGS)
        ////APENAS ESSES 2 VALUES DEVERÃO SER PERMITIDOS POR NOSSO PROP.... é isso que esses checks fazem..
        if (valueProvidedByTheProp === '1' || valueProvidedByTheProp === '0') {

          return true;
        } else {
          ////todos outros values, para esse prop, serão NEGADOS...
          return false;
        }

      }
    }
  },


  data() {
    return {
      friendIsFavorite: this.isFavorite,
      detailsAreVisible: false,
      // friend: {  /////NÃO É MAIS NECESSÁRIO (outsourceado para 'App.vue', que contém a data property que criará 1 elemento 'FriendContact' para cada object 'friend' in 'friends' array)
      //   id: "manuel",
      //   name: "Manuel Lorenz",
      //   phone: "0123 45678 90",
      //   email: "manuel@localhost.com",
      // },
    };
  },
  methods: {
    toggleDetails() {
      this.detailsAreVisible = !this.detailsAreVisible;
    },

    toggleFavoriteCorrectVersion() {
      if (this.friendIsFavorite === '1') {
        this.friendIsFavorite = '0';
      } else {
        this.friendIsFavorite = '1';
      }
    }


  }
};
</script>













