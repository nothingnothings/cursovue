













---> COMO MENCIONADO,




O PROFESSOR TAMBÉM QUER SER CAPAZ DE FAZER 'DELETE'

DE FRIENDS --> 






PARA ISSO, TEREMOS MAIS UM BUTTON EM CADA 'FRIEND CONTACT',

QUE SERÁ UM


BUTTON DE 'REMOVE FRIEND'...













OK, VOU TENTAR FAZER ISSO POR CONTA PRÓPRIA...











ACHO QUE VAI FICAR ASSIM:

















<template>
  <li>
    <h2>{{ name }} {{ friendIsFavorite === '1' ? '(FAVORITE)' : '' }}</h2>
    <button @click="toggleFavoriteCorrectVersion">Toggle Favorite</button>
    <button @click="toggleDetails">{{ detailsAreVisible ? 'Hide' : 'Show' }} Details</button>
    <button @click="removeFriend(id)">Remove Friend</button>
    <ul v-if="detailsAreVisible">
      <li>
        <strong>Phone:</strong>
        {{ phoneNumber }}
      </li>
      <li>
        <strong>Email:</strong>
        {{ emailAddress }}
      </li>
    </ul>
  </li>


</template>

<script>
export default {

  // props: [ ////É ASSIM QUE PASSAMOS O 'BARE MINIMUM' DE INFO SOBRE OS NOSSOS PROPS; NO CASO, PASSAMOS APENAS __ _o NAME _ DOS PROPS a serem recebidos por esse child component (É CLARO QUE, EM APPS MAIORES, VAMOS PASSAR MAIS INFORMAÇÕES, VAMOS 'TYPAR' OS NOSSOS PROPS, PARA QUE COISAS INCORRETAS NÃO SEJAM RECEBIDAS POR NOSSOS CHILD COMPONENTS)...
  //   'name',
  //   'phoneNumber',
  //   'emailAddress',
  //   'isFavorite'
  // ],



  // emits: ['custom-event-created-by-me'],  ///VERSÃO SIMPLES DE ESPECIFICAR QUAIS EVENTS SERÃO EMITIDOS POR ESSE COMPONENT...

  emits: {
    'custom-events-created-by-me': (id) => {  ///versão complexa de ESPECIFICAR QUAIS EVENTS SERÃO EMITIDOS POR ESSE COMPONENT (e qual data SERÁ EMITIDA JUNTA DESSE EVENT... E COMO DEVERÁ SER VALIDADA ESSA DATA)...

      if (id) {
        return true;
      } else {
        console.warn('EXEMPLO - FAILED TO RECEIVE ID DATA ON CUSTOM EMITTED EVENT');
        return false;
      }
    },

    'custom-events-created-by-me-2': (id) => {  ///versão complexa de ESPECIFICAR QUAIS EVENTS SERÃO EMITIDOS POR ESSE COMPONENT (e qual data SERÁ EMITIDA JUNTA DESSE EVENT... E COMO DEVERÁ SER VALIDADA ESSA DATA)...

      if (id) {
        return true;
      } else {
        console.warn('EXEMPLO - FAILED TO RECEIVE ID DATA ON CUSTOM EMITTED EVENT');
        return false;
      }
    },

    'remove-friend': (id) => {
      if (id) {
        return true;
      } else {
        return false
      }
    }


  },

  props: { ///MANEIRA MAIS ELABORADA DE ESPECIFICAR OS PROPS A SEREM RECEBIDOS.. --> CADA PROPS SERÁ UMA key nesse seu object...

    // name: String,  ///essa já é uma maneira mais elaborada de dizer o que vamos receber com esse prop.... mas há uma maneira mais detalhada ainda, vista logo abaixo desta linha:
    name: { ///assim conseguimos definir a maior quantidade de detalhes possível sobre esse prop que será recebido...

      type: String, ///será o TYPE desse negócio, desse prop...
      required: false ////DEFINE SE _ ESSE PROP __ DEVE SER OBRIGATORIAMENTE PASSADO A ESSE NOSSO COMPONENT, OU NÃO...


    },


    // phoneNumber: String,
    phoneNumber: {
      type: String,
      required: true
    },
    emailAddress: String,

    ///exemplo de prop que é definido como 'OPCIONAL'

    // isFavorite: {
    //   type: String,
    //   required: false ///será opcional
    // }


    isFavorite: {
      type: String,
      required: false, ///será opcional o pass desse prop
      default: '0', //será o VALUE USADO POR ESSE PROP nesse nosso component, se ESSE PROP ESPECÍFICO não for passado pelo PARENT COMPONENT...
      // default: function() { ///TAMBÉM PODEMOS RODAR FUNCTIONS PARA DERIVAR O 'default', se assim desejarmos...
      //   return 'VALORDEFAULT';
      // }


      validator: function (valueProvidedByTheProp) { //////PODEMOS TAMBÉM TER A KEY DE 'validator', que SEMPRE SERÁ UMA FUNCTION QUE __ VAI RETORNAR __ TRUE OU FALSE...


        //O VALIDATOR SEMPRE VAI RETORNAR OU 'TRUE' OU 'FALSE' 
        ///e sempre vai receber, como parâmetro, o value PROVIDENCIADO/PASSADO no nosso prop...
        ///dentro do validator podemos ter QUALQUER VALIDATION LOGIC DE NOSSA ESCOLHA, para determinar se o value recebido como esse prop é válido ou não....



        ////este é um validator exemplo, que é a mesma coisa que escrever 'type: Boolean' nesse prop.... (pq, como com os booleans, aqui só permitiremos 2 values, '0' e '1', que são quase exatamente como true/false, mas com STRINGS)
        ////APENAS ESSES 2 VALUES DEVERÃO SER PERMITIDOS POR NOSSO PROP.... é isso que esses checks fazem..
        if (valueProvidedByTheProp === '1' || valueProvidedByTheProp === '0') {

          return true;
        } else {
          ////todos outros values, para esse prop, serão NEGADOS...
          return false;
        }

      }
    },

    id: {
      type: String,
      required: true,
      default: ''
    }
  },


  data() {
    return {
      friendIsFavorite: this.isFavorite,
      detailsAreVisible: false,
      // friend: {  /////NÃO É MAIS NECESSÁRIO (outsourceado para 'App.vue', que contém a data property que criará 1 elemento 'FriendContact' para cada object 'friend' in 'friends' array)
      //   id: "manuel",
      //   name: "Manuel Lorenz",
      //   phone: "0123 45678 90",
      //   email: "manuel@localhost.com",
      // },
    };
  },
  methods: {
    toggleDetails() {
      this.detailsAreVisible = !this.detailsAreVisible;
    },

    toggleFavoriteCorrectVersion() {
      if (this.friendIsFavorite === '1') {
        this.friendIsFavorite = '0';
      } else {
        this.friendIsFavorite = '1';
      }
    },

    removeFriend(id) {
      console.log(id);
      this.$emit('remove-friend', id)
    }


  }
};
</script>




















E ASSIM:
















<template>
  <section>
    <header>
      <h1>My Friends</h1>
    </header>
    <friend-form @add-friend="addFriend"></friend-form>
    <ul>
      <friend-contact v-for="friend in friends" :key="friend.name" :name="friend.name" :phone-number="friend.phone"
        :email-address="friend.email" :is-favorite="friend.isFavorite" :id="friend.id"  @remove-friend="removeFriend">
      </friend-contact>
    </ul>
  </section>
</template>

<script>
export default {
  data() {
    return {
      friends: [
        {
          id: "manuel",
          name: "Manuel Lorenz",
          phone: "0123 45678 90",
          email: "manuel@localhost.com",
          isFavorite: true
        },
        {
          id: "julie",
          name: "Julie Jones",
          phone: "0987 654421 21",
          email: "julie@localhost.com",
          isFavorite: false
        },
      ],
    };
  },

  methods: {
    addFriend(data) {

      data.id = new Date().toISOString();
      data.isFavorite = false;
      this.friends.push(data);
    },

    removeFriend(id) {
      const friendIndex = this.friends.findIndex(
        (friend) => {
          return friend.id === id
        }
      )
      this.friends.splice(friendIndex, 1);
    }
  }
};
</script>

<style>
* {
  box-sizing: border-box;
}

html {
  font-family: "Jost", sans-serif;
}

body {
  margin: 0;
}

header {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  margin: 3rem auto;
  border-radius: 10px;
  padding: 1rem;
  background-color: #58004d;
  color: white;
  text-align: center;
  width: 90%;
  max-width: 40rem;
}

#app ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

#app li,
#app form {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  margin: 1rem auto;
  border-radius: 10px;
  padding: 1rem;
  text-align: center;
  width: 90%;
  max-width: 40rem;
}

#app h2 {
  font-size: 2rem;
  border-bottom: 4px solid #ccc;
  color: #58004d;
  margin: 0 0 1rem 0;
}

#app button {
  font: inherit;
  cursor: pointer;
  border: 1px solid #ff0077;
  background-color: #ff0077;
  color: white;
  padding: 0.05rem 1rem;
  box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.26);
}

#app button:hover,
#app button:active {
  background-color: #ec3169;
  border-color: #ec3169;
  box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.26);
}


#app input {
  font: inherit;
  padding: 0.15rem;
}

#app label {
  font-weight: bold;
  margin-right: 1rem;
  width: 7rem;
  display: inline-block;
}

#app form div {
  margin: 1rem 0;
}
</style>












--> PODERÍAMOS CHAMAR '$emit()'


DIRETAMENTE NO TEMPLATE,




em vez de ter um METHOD 

para emitir isso (no próprio component)...






MAS EU NÃO FIZ ASSIM,

FIZ DA MANEIRA TRADICIOANL...













--> OK, LÁ EM 'App.vue'




EU COLOQUEI O EVENT LISTENER CUSTOM DE 'remove-friend',







E ISSO FUNCIONOU..





--> PASSEI O ID DO 

FRIEND JUNTO COM O EVENT DE 'remove-friend'....










--> O METHOD FICOU TIPO ASSIM:











    removeFriend(id) {
      const friendIndex = this.friends.findIndex(
        (friend) => {
          return friend.id === id
        }
      )
      this.friends.splice(friendIndex, 1);
    }






















PRONTO.... E ISSO REALMENTE FUNCIONOU...







--> O PROFESSOR USOU 

UMA MANEIRA ELEGANTE DE FAZER ISSO NO JAVASCRIPT --> 








ele 


escreveu tipo assim:














this.friends = this.friends.filter();













--> ELE USOU 'filter' PARA CRIAR UM NOVO ARRAY, 


MAS SEM O ELEMENTO QUE VOCê FILTROU..





-> E AÍ VOCÊ JÁ DEFINE ISSO 


COMO 


O VALUE DESSA NOVA PROPRIEDAE DE 'friends'...










OK, É QUASE A MESMA COISA QUE EU FIZ COM 'splice()',


MAS COM MENOS LINHAS....











-->  OK... O VUE VAI PERCEBER QUE A DATA PROPERTY EM QUE EXISTE O FRIEND VAI SER 


REDUZIDA EM 1 ITEM, E AÍ VAI UPDATAR A UI APROPRIADAMENTE...










--> SE RECARREGAMOS A PAGE,


NOSSO AMIGO VOLTA,

PQ 

TUDO ISSO ACONTECE APENAS EM AJVASCRIPT (na memória)...










-> MAS MAIS TARDE VEREMOS:







''COMO PODEMOS ENVIAR DATA ASSIM A UM 


SERVER,
E AÍ 

SALVAR ESSA DATA PERMANENTEMENTE,

EM UM SERVERSIDE DATABASE'''...










--> MAS ISSO É BOM, PQ JÁ PRATICAMOS BASTANTE COM COMPONENTS, AGORA...