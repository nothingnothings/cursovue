







TERMINAMOS COM ESSE MÓDULO DE COMPONENT COMMUNICATION...








APRENDEMOS ALGUNS CORE CONCEPTS QUE PRECISAMOS TER EM MENTE:











1) COMPONENT COMMUNICATION OVERVIEW -> COOMPONENTS SÃO USADOS PARA CONSTRUIR UIs,


POR MEIO 


DE SUAS COMBINAÇÕES --> reutilizar components, 

EDITAR COMPONENTS, ETC...










2) COMPONENTS FORMAM RELAÇÕES 'PARENT-CHILD' automaticamente --> 



E USAM 

'UNIDIRECTIONAL DATA FLOWS' 

para 



SUA COMUNICAÇÃO...








3) ESTUDAMOS QUE TAMBÉM EXISTE A COMUNICAÇÃO NO SENTIDO INVERSO, COM O USO DE 'EVENTS' (emit de events),



EMIT DE EVENTS, QUE SÃO CAPTADOS POR PARENT COMPONENTS, POR MEIO DO 'bubbling/pop-up'..









4) TEMOS 'props' --> OS PROPS NOS AJUDAM A FAZER 'PASS' DE 

DATA 

DE PARENTS PARA CHILDS...






-> PROPS DEVEM SER ESTABLECIDOS ANTECIPADAMENTE,

POSSÍVELMENTE EM GRANDE DETALHE (como é o ideal, O TYPE, REQUIRED, ETC)...












5) SE VOCÊ PRECISA DA 'OUTRA DIREÇÃO',



CHILD -> PARENT,

VOCÊ 



PRECISA DO 'EMIT DE CUSTOM EVENTS' --> 


USAMOS 



O 'this.$emit()'


PARA 



EMITIR UM 


EVENT, 

PARA TRIGGAR CÓDIGO NO 

PARENT COMPONENT (methods, etC)....







--> TAMBÉM VIMOS QUE 'CUSTOM EVENTS PODEM LEVAR DATA' -> podem 
levar 

data 
de input fields,  





PODEM LEVAR O ID DE ALGO QUE FOI SELECIONADO,

OU QUALQUER DATA DE QUE 

VOCÊ PRECISA, NO SEU USER CASE...






6) MAS O QUE NÁO TEMOS, AQUI,




É 

'SIBLING COMMUNICATION' --> SE TIVERMOS ESSE CENÁRIO,

SEMPRE USAREMOS 
O 

'COMMON PARENT COMPONENT' ENTRE ESSES 2 SIBLINGS,






PARA 



AÍ ARMAZENAR A DATA DENTRO DELE,

E AÍ 



FAZER TALK 

COM CADA COMPONENT 









(

    ISSO QUER DIZER QUE VOCÊ SEMPRE TERÁ 'PARENT-CHILD'...
)














8) àS VEZES VOCê TERÁ 'UM MONTE DE COMPONENTS NO CAMINHO'

entre 1 component pai e o filho -> É PARA ISSO QUE 

EXISTE 
O 





'PROVIDE-INJECT' ------> 







ISSO TE PERMITE FAZER 'PROVIDE'
DE UMA DATA 
NO PARENT COMPONENT,  


E AÍ 
INJETAR ESSA DATA 


EM 

1 CHILD COMPONENT,

NÃO INTERESSA O QUÃO NESTEADO ELE ESTEJA, 






ISSO SEM PRECISAR PASSAR A DATA POR MEIO DE UM MONTE DE COMPONENTS (sem o pass de PROPS e custom events por meio de toods esses components  )













MAS NÃO SE VICIE NISSO: NÃO USE O 'provide-inject'


PARA SUBSTITUIR TODOS SEUS PROPS E CUSTOME VENTS,


E SIM 

APENAS 

SE 
VOCÊÊ 

PRECISA 

DESSA 'LONG-RANGE COMMUNICATION' -->  E É TUDO ISSO QUE 


PRECISAMOS SABER SOBRE COMPONENT COMMUNICATION, ATÉ AGORA...
