














--> OK.... AGORA DEVEMOS UPDATAR AS HEALTH BARS...








O JEITO QUE ENCONTREI FOI ESTE:




(BIND DINÂMICO DE STYLES, NO CASO A PROPRIEDADE CSS de 'width')...












TIPO ASSIM:








        <section id="monster">
            <h2>Monster Health</h2>
            <div class="healthbar">
                <progress class="healthbar__value" :value="monsterHealth" :style="{width: monsterHealthString}">
                </progress>
            </div>
        </section>







-----------------------------------------------------












--> QUANDO O BUTTON DE 'attack' for clicado... fazemos um event binding nesse button,
tipo assim:






        <section id="controls" v-if="!battleStatus">
            <button @click="attack">ATTACK</button>
            <button @click="specialAttack">SPECIAL ATTACK</button>
            <button @click="heal">HEAL</button>
            <button @click="surrender">SURRENDER</button>
        </section>








--> CERTO...














---> APONTAMOS À FUNCTION...





sim...















O PROFESSOR QUER QUE 


ESSAS HEALTHBARS ACABEM UPDATADAS 

SEMPRE QUE 





O VALOR DA VIDA DOS CARAS REALMENTE MUDAR...









-> O PROFESSOR FAZ O QUE FIZ,

DEFINIR O WIDTH 

DAS NOSSAS PROGRESS BARS DINAMICAMENTE... (pre-defined classes css é quase impossível com esse approach),



POR ISSO USAMOS 


INLINE-STYES...









--> O PROFESSOR ESCREVE TIPO ASSIM:







<div class="healthbar__value" :style="{}"







--> DENTRO DESSE OBJECT,

PODEMOS DEFINIR 'QUAL PROPRIEDADE CSS QUEREMOS MUDAR',

E PODEMOS 

DAR 

UM 






VALOR QUE SERÁ DINÂMICO...








--> o professor quer settar esse value aí 


de acordo com 

a healthBar do monster/player...









----> ELE ESCREVEU ASSIM:





:style="{width: monsterHealth}" 










--> MAS É CLARO QUE ISSO NÃO FUNCIONARÁ,

PQ 

O MONSTER HEALTH PRECISA TER A 'PORCENTAGEM' (%) ao final do valor, para que 

isso funcione 

na healthBar...





o professor escreve assim: 

{ width: monsterHealth + '%'}














-> CERTO... MAS O PROFESSOR DECIDE OUTSOURCEAR ISSO AÍ 




_ EM UMA COMPUTED PROPERTY, PELO VISTO....










----> certo...




até agora, tudo bem....







--> SE SALVAMOS TUDO E RECARREGAMOS, AGORA QUANDO APERTAMOS 'ATTACK',
as health bars ficam menores..










--> os valores vão ficando menores e as barras também (visualmente)...








----> isso significa que nossa lógica interna funciona,



e o style binding, também....







-> REFORMATTAMOS TUDO... 









--> Agora funciona, e eu também outsourceei tudo 

lá 



no app vue:










const app = Vue.createApp({
  data() {
    return {
      log: [],
      playerHealth: 100,
      monsterHealth: 100,
      battleStatus: null,
    };
  },
  watch: {
    playerHealth() {
      if (this.playerHealth < 0 && this.monsterHealth > 0) {
        this.battleStatus = 'lost!';
      }
    },

    monsterHealth() {
      if (this.monsterHealth < 0 && this.playerHealth > 0) {
        this.battleStatus = 'won!';
        
      }
    },
  },
  computed: {
    // monsterHealthString() {
    //   return this.monsterHealth.toString() + '%';
    // },

    // playerHealthString() {
    //   return this.playerHealth.toString() + '%';
    // },

    ////ainda maior outsourcing de código (tiramos a lógica lá do html, para colocar nesse app vue, javascript)...
    monsterHealthString() {
      return { width: this.monsterHealth.toString() + '%' };
    },

    playerHealthString() {
      return {width:  this.playerHealth.toString() + '%' };
    },
  },
  methods: {
    attack() {

      const playerDamage = Math.random().toFixed(2) * 10;
      const monsterDamage = Math.random().toFixed(2) * 10;
      this.playerHealth = this.playerHealth - playerDamage;
      this.monsterHealth = this.monsterHealth - monsterDamage;

      this.logFight(playerDamage, monsterDamage);


    },

    specialAttack() {

      const playerDamage = Math.random().toFixed(2) * 10;
      const monsterDamage = Math.random().toFixed(2) * 20;

      this.playerHealth = this.playerHealth - playerDamage;
      this.monsterHealth = this.monsterHealth - monsterDamage;

      this.logFight(monsterDamage, playerDamage);
    },

    heal() {
      const healAmount = Math.random() * 10;
      if (this.playerHealth < 100 && this.playerHealth + healAmount < 100) {
        this.playerHealth = this.playerHealth + healAmount;
        this.logFight(0, 0, healAmount);
      } else {
        alert('You cannot heal more than your max health.');
      }
    },
    surrender() {
      const answer = confirm('Are you sure you want to give up?');
      if (answer) {
        this.battleStatus = 'lost!';
        this.log = [];
      } else {
        return;
      }
    },
    resetGame() {
      this.battleStatus = null;
      this.playerHealth = 100;
      this.monsterHealth = 100;
      this.log = [];
    },

    logFight(playerDamage, monsterDamage, amountHealed=0) {
      this.log.push(
        {
          count: Math.random(),
          playerDamage: playerDamage,
          monsterDamage: monsterDamage,
          amountHealed: amountHealed
        }
      )
    }
  },
});
app.mount('.game');














no html:















<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Jost:wght@400;700&amp;display=swap" rel="stylesheet">
    <script src="https://unpkg.com/vue@next" defer></script>
    <script src="app.js" defer></script>
    <link rel="stylesheet" href="app.css">
    <title>Monster Slayer</title>
</head>

<body>
    <header>Monster Slayer</header>
    <div class="game">
        <section id="monster">
            <h2>Monster Health</h2>
            <div class="healthbar">
                <!-- <progress class="healthbar__value" :value="monsterHealth" :style="{width: monsterHealthString}">
                </progress> -->
                <progress class="healthbar__value" :value="monsterHealth" :style="monsterBarStyles">
                </progress>
            </div>
        </section>
        <section id="player">
            <h2>Your Health</h2>
            <div class="healthbar">
                <progress class="healthbar__value" :value="playerHealth" :style="playerBarStyles">
                </progress>
                <!-- <progress class="healthbar__value" :value="playerHealth" :style="{width: playerHealthString}">
                </progress> -->
            </div>
        </section>

        <section id="controls" v-if="!battleStatus">
            <button @click="attack">ATTACK</button>
            <button @click="specialAttack">SPECIAL ATTACK</button>
            <button @click="heal">HEAL</button>
            <button @click="surrender">SURRENDER</button>
        </section>
        <section class="container" v-else>
            <h1>Game Over!</h1>
            <h3>You {{ battleStatus }}</h3>
            <button @click="resetGame">Start New Game</button>
        </section>
        <section id="log" class="container">
            <h2>Battle Log</h2>
            <ul v-if="log.length !== 0">
                <li v-for="battle in log" key="battle.count">
                    <p v-if="battle.monsterDamage !== 0"><span style="color: rgb(219, 172, 31)">Monster</span> attacks
                        and deals <span style="color: red">{{ battle.monsterDamage.toFixed(1) }}</span></p>
                    <p v-if="battle.playerDamage !==  0"><span style="color: rgb(209, 26, 209)">Player</span> attacks
                        and deals <span style="color: red">{{ battle.playerDamage.toFixed(1) }}</span></p>
                    <p v-if="battle.amountHealed !==  0"><span style="color: rgb(209, 26, 209)">Player</span> heals
                        for <span style="color: rgb(7, 224, 7)">{{ battle.amountHealed.toFixed(1) }}</span></p>
                </li>
            </ul>
        </section>
    </div>

</body>

</html>





















ok... agora está funcionando melhor...
















--> ADICIONANDO UM SPECIAL ATTACK BUTTON -----> 









JÁ IMPLEMENTEI ESSE SPECIAL ATTACK BUTTON .. 









--> MAS O PROBLEMA É QUE ESSE ATTACK BUTTON PODE SER USADO SEMPRE,



E ISSO N PODE ACONTECER...




(

    DEVE FICAR DISPONÍVEL _ APENAS _ A CADA 3 ROUNDS...
)








--> MAS COMO PODEMOS IMPLEMENTAR ISSO?


COMO PODEMOS _ ASSEGURAR_ QUE 


O 


SPECIAL ATTACK BUTTON SÓ PODE SER USADO __ A CADA _ 
3 

ROUNDS?








--> talvez colocar uma variable de name 'rounds',


e aí 


fazer com que __ APENAS _ SEJA __ 



PERMITIDO RODAR O 'SPECIAL ATTACK' (button fica enabled)



_ 



se estivermos em um número IMPAR de rounds (desconsiderando o ROUND 0 e o ROUND 1)..














--> TALVEZ SEJA MELHOR COLOCAR UM _ WATCHER__ PARA A PROPRIEDADE DE 'ROUNDS',

que então 



vai dar toggle entre true/false em _ OUTRA PROPRIEDADE 'data'

lá 


no nosso state do vue...









tipo assim:




DATA:



  data() {
    return {
      log: [],
      playerHealth: 100,
      monsterHealth: 100,
      battleStatus: null,
      round: 0,
      canSpecialAttack: false
    };






WATCH:




      round() {
        if ((this.round !== 0 && 
            this.round !== 1 && 
            this.round%2 == 0) || this.canSpecialAttack
            ) {
              this.canSpecialAttack = true
            } else {
              this.canSpecialAttack = false
            }
            console.log(this.round);
      }













--> aGORA SÓ PRECISO ATRIBUIR ISSO A ALGUM STYLE DE 'DISABLED' 

lá no button de 'strong attack'...












---> CONSEGUI...  FICOU MEIO GAMBIARRA, MAS FICOU ASSIM:











const app = Vue.createApp({
  data() {
    return {
      log: [],
      playerHealth: 100,
      monsterHealth: 100,
      battleStatus: null,
      round: 0,
      canSpecialAttack: false,
    };
  },
  watch: {
    playerHealth() {
      if (this.playerHealth < 0 && this.monsterHealth > 0) {
        this.battleStatus = 'lost!';
      }
    },

    monsterHealth() {
      if (this.monsterHealth < 0 && this.playerHealth > 0) {
        this.battleStatus = 'won!';
      }
    },

    round(newWatchedValue, oldWatchedValue) {
      if (
        this.round === 3
      ) {
        this.canSpecialAttack = true;
      } else {
        this.canSpecialAttack = false;
      }
      console.log(this.round);
    },
  },
  computed: {
    // monsterHealthString() {
    //   return this.monsterHealth.toString() + '%';
    // },

    // playerHealthString() {
    //   return this.playerHealth.toString() + '%';
    // },

    ////ainda maior outsourcing de código (tiramos a lógica lá do html, para colocar nesse app vue, javascript)...
    monsterBarStyles() {
      return { width: this.monsterHealth.toString() + '%' };
    },

    playerBarStyles() {
      return { width: this.playerHealth.toString() + '%' };
    },
  },
  methods: {
    attack() {
      const playerDamage = Math.random().toFixed(2) * 10;
      const monsterDamage = Math.random().toFixed(2) * 10;
      this.playerHealth = this.playerHealth - playerDamage;
      this.monsterHealth = this.monsterHealth - monsterDamage;
      if (this.round !== 3) {
        this.round += 1;
      }
      this.logFight(playerDamage, monsterDamage);
    },

    specialAttack() {
      const playerDamage = Math.random().toFixed(2) * 10;
      const monsterDamage = Math.random().toFixed(2) * 20;

      this.playerHealth = this.playerHealth - playerDamage;
      this.monsterHealth = this.monsterHealth - monsterDamage;
      this.canSpecialAttack = !this.canSpecialAttack;
      this.round = 0;
      this.logFight(monsterDamage, playerDamage);
    },

    heal() {
      const healAmount = Math.random() * 10;
      if (this.playerHealth < 100 && this.playerHealth + healAmount < 100) {
        this.playerHealth = this.playerHealth + healAmount;
        if (this.round !== 3) {
          this.round += 1;
        }
        this.logFight(0, 0, healAmount);
      } else {
        alert('You cannot heal more than your max health.');
      }
    },
    surrender() {
      const answer = confirm('Are you sure you want to give up?');
      if (answer) {
        this.battleStatus = 'lost!';
        this.log = [];
        this.round = 0;
      } else {
        return;
      }
    },
    resetGame() {
      this.battleStatus = null;
      this.playerHealth = 100;
      this.monsterHealth = 100;
    },

    logFight(playerDamage, monsterDamage, amountHealed = 0) {
      this.log.push({
        count: Math.random(),
        playerDamage: playerDamage,
        monsterDamage: monsterDamage,
        amountHealed: amountHealed,
      });
    },
  },
});
app.mount('.game');











---------------------------













----> ok... agora isso está funcionando...













--> FUNCIONALIDADE DE 'HEAL':







    heal() {
      const healAmount = Math.random() * 10;
      if (this.playerHealth < 100 && this.playerHealth + healAmount < 100) {
        this.playerHealth = this.playerHealth + healAmount;
        if (this.round !== 3) {
          this.round += 1;
        }
        this.logFight(0, 0, healAmount);
      } else {
        alert('You cannot heal more than your max health.');
      }
    },










  ------> ok... funcionou.....









  ------> PRECISAMOS ter um scenario para 'draw', também..






  --> VEREMOS AS WIN CONDITIONS NA PRÓXIMA AULA...








  --> FICOU TIPO ASSIM:









  const app = Vue.createApp({
  data() {
    return {
      log: [],
      playerHealth: 100,
      monsterHealth: 100,
      battleStatus: null,
      round: 0,
      canSpecialAttack: false,
    };
  },
  watch: {
    playerHealth() {
      if (this.playerHealth < 0 && this.monsterHealth > 0) {
        this.battleStatus = 'lost!';
      }
    },

    monsterHealth() {
      if (this.monsterHealth < 0 && this.playerHealth > 0) {
        this.battleStatus = 'won!';
      }

      if (this.playerHealth < 0 && this.monsterHealth < 0) {
        this.battleStatus = 'have a draw!';
      }
    },

    round(newWatchedValue, oldWatchedValue) {
      if (this.round === 3) {
        this.canSpecialAttack = true;
      } else {
        this.canSpecialAttack = false;
      }
      console.log(this.round);
    },
  },
  computed: {
    // monsterHealthString() {
    //   return this.monsterHealth.toString() + '%';
    // },

    // playerHealthString() {
    //   return this.playerHealth.toString() + '%';
    // },

    ////ainda maior outsourcing de código (tiramos a lógica lá do html, para colocar nesse app vue, javascript)...
    monsterBarStyles() {
      return { width: this.monsterHealth.toString() + '%' };
    },

    playerBarStyles() {
      return { width: this.playerHealth.toString() + '%' };
    },
  },
  methods: {
    attack() {
      const playerDamage = Math.random().toFixed(2) * 10;
      const monsterDamage = Math.random().toFixed(2) * 10;
      this.playerHealth = this.playerHealth - playerDamage;
      this.monsterHealth = this.monsterHealth - monsterDamage;
      if (this.round !== 3) {
        this.round += 1;
      }
      this.logFight(playerDamage, monsterDamage);
    },

    specialAttack() {
      const playerDamage = Math.random().toFixed(2) * 10;
      const monsterDamage = Math.random().toFixed(2) * 20;

      this.playerHealth = this.playerHealth - playerDamage;
      this.monsterHealth = this.monsterHealth - monsterDamage;
      this.canSpecialAttack = !this.canSpecialAttack;
      this.round = 0;
      this.logFight(monsterDamage, playerDamage);
    },

    heal() {
      const healAmount = Math.random() * 10;
      if (this.playerHealth < 100 && this.playerHealth + healAmount < 100) {
        this.playerHealth = this.playerHealth + healAmount;
        if (this.round !== 3) {
          this.round += 1;
        }
        this.logFight(0, 0, healAmount);
      } else {
        alert('You cannot heal more than your max health.');
      }
    },
    surrender() {
      const answer = confirm('Are you sure you want to give up?');
      if (answer) {
        this.battleStatus = 'lost!';
        this.log = [];
        this.round = 0;
      } else {
        return;
      }
    },
    resetGame() {
      this.battleStatus = null;
      this.playerHealth = 100;
      this.monsterHealth = 100;
    },

    logFight(playerDamage, monsterDamage, amountHealed = 0) {
      this.log.push({
        count: Math.random(),
        playerDamage: playerDamage,
        monsterDamage: monsterDamage,
        amountHealed: amountHealed,
      });
    },
  },
});
app.mount('.game');
