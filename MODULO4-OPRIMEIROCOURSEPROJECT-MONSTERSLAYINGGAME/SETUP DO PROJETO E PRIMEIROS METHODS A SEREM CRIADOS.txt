








TEMOS UM FOLDER COM OS ARQUIVOS INICIAIS,

QUE 


POSSUEM ESTE CONTEÚDO:














<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <header>Monster Slayer</header>
    <div class="game">
        <section id="monster">
            <h2>Monster Health</h2>
            <div class="healthbar">
                <div class="healthbar__value">

                </div>
            </div>
        </section>
        <section id="player">
            <h2>Your Health</h2>
            <div class="healthbar">
                <div class="healthbar__value">
                </div>
            </div>

        </section>
        <section id="controls">
            <button>ATTACK</button>
            <button>SPECIAL ATTACK</button>
            <button>HEAL</button>
            <button>SURRENDER</button>
        </section>
        <section id="log">
            <h2>Battle Log</h2>
            <ul></ul>
        </section>
    </div>

</body>

</html>














E ESTE:














const app = Vue.createApp({
  data() {
    return {};
  },
  watch: {},
  computed: {},
  methods: {},
});
app.mount('#game');
















E ESTE:













* {
  box-sizing: border-box;
}
html {
  font-family: 'Jost', sans-serif;
}

body {
  margin: 0;
}

header {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  padding: 0.5rem;
  background-color: #880017;
  color: white;
  text-align: center;
  margin-bottom: 2rem;
}

section {
  width: 90%;
  max-width: 40rem;
  margin: auto;
}

.healthbar {
  width: 100%;
  height: 40px;
  border: 1px solid #575757;
  margin: 1rem 0;
  background: #fde5e5;
}

.healthbar__value {
  background-color: #00a876;
  width: 100%;
  height: 100%;
}

.container {
  text-align: center;
  padding: 0.5rem;
  margin: 1rem auto;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  border-radius: 12px;
}

#monster h2,
#player h2 {
  margin: 0.25rem;
}

#controls {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
}

button {
  font: inherit;
  border: 1px solid #88005b;
  background-color: #88005b;
  color: white;
  padding: 1rem 2rem;
  border-radius: 12px;
  margin: 1rem;
  width: 12rem;
  cursor: pointer;
  box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.26);
}

button:focus {
  outline: none;
}

button:hover,
button:active {
  background-color: #af0a78;
  border-color: #af0a78;
  box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.26);
}

button:disabled {
  background-color: #ccc;
  border-color: #ccc;
  box-shadow: none;
  color: #3f3f3f;
  cursor: not-allowed;
}

#log ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

#log li {
  margin: 0.5rem 0;
}

.log--player {
  color: #7700ff;
}

.log--monster {
  color: #da8d00;
}

.log--damage {
  color: red;
}

.log--heal {
  color: green;
}




























NO CÓDIGO VUE.JS,


COMEÇO COM ALGO ASSIM:









const app = Vue.createApp({
  data() {
    return {
      log: [],
      playerHealth: 100,
      monsterHealth: 100,
    };
  },
  watch: {},
  computed: {},
  methods: {},
});
app.mount('#game');



















--> esses são os pedaços de data pertinentes ao nosso app...












tenho que adicionar methods para cada uma das ACTIONS do app..






---> TIPO ASSIM:









const app = Vue.createApp({
  data() {
    return {
      log: [],
      playerHealth: 100,
      monsterHealth: 100,
    };
  },
  watch: {},
  computed: {},
  methods: {
    attack() {
      
    },

    specialAttack() {

    },
    heal() {

    },
    surrender() {

    },
  },
});
app.mount('#game');















CERTO.... ISSO FEITO,

provavelmente 


PRECISO VINCULAR ESSES METHODS AOS BUTTONS, TIPO ASSIM:
















<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Jost:wght@400;700&amp;display=swap" rel="stylesheet">
    <script src="https://unpkg.com/vue@next" defer></script>
    <script src="app.js" defer></script>
    <link rel="stylesheet" href="app.css">
    <title>Document</title>
</head>

<body>
    <header>Monster Slayer</header>
    <div class="game">
        <section id="monster">
            <h2>Monster Health</h2>
            <div class="healthbar">
                <div class="healthbar__value">
                    <!-- <progress id="monster-health" :value="monsterHealthNumber" max="100">{{ }} </progress> -->
                </div>
            </div>
        </section>
        <section id="player">
            <h2>Your Health</h2>
            <div class="healthbar">
                <div class="healthbar__value">
                    <!-- <progress id="player-health" :value="playerHealthNumber" max="100">{{ }} </progress> -->
                </div>
            </div>

        </section>
        <section id="controls">
            <button @click="attack">ATTACK</button>
            <button @click="specialAttack">SPECIAL ATTACK</button>
            <button @click="heal">HEAL</button>
            <button @click="surrender">SURRENDER</button>
        </section>
        <section id="log" class="container">
            <h2>Battle Log</h2>
            <ul></ul>
        </section>
    </div>

</body>

</html>



















--> tentei escrever um código para fazer as health bars (usando a tag 'progress'),

mas não 

ficou muito bom....














-> FIZ BASTANTE PROGRESSO, AGORA...










O CÓDIGO FICOU ASSIM:















<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Jost:wght@400;700&amp;display=swap" rel="stylesheet">
    <script src="https://unpkg.com/vue@next" defer></script>
    <script src="app.js" defer></script>
    <link rel="stylesheet" href="app.css">
    <title>Document</title>
</head>

<body>
    <header>Monster Slayer</header>
    <div class="game">
        <section id="monster">
            <h2>Monster Health</h2>
            <div class="healthbar">
                <progress class="healthbar__value" :value="monsterHealth" :style="{width: monsterHealthString}">
                </progress>
            </div>
        </section>
        <section id="player">
            <h2>Your Health</h2>
            <div class="healthbar">
                <progress class="healthbar__value" :value="playerHealth" :style="{width: playerHealthString}">
                </progress>
            </div>

        </section>
        <section id="controls">
            <button @click="attack">ATTACK</button>
            <button @click="specialAttack">SPECIAL ATTACK</button>
            <button @click="heal">HEAL</button>
            <button @click="surrender">SURRENDER</button>
        </section>
        <section id="log" class="container">
            <h2>Battle Log</h2>
            <ul></ul>
        </section>
    </div>

</body>

</html>







 








E O CÓDIGO VUE:
















const app = Vue.createApp({
  data() {
    return {
      log: [],
      playerHealth: 100,
      monsterHealth: 100,
    };
  },
  watch: {},
  computed: {
    monsterHealthString() {
      console.log('example', this.monsterHealth);
      return this.monsterHealth.toString() + '%';
    },

    playerHealthString() {
      return this.playerHealth.toString() + '%';
    },
  },
  methods: {
    attack() {
      this.playerHealth = this.playerHealth - Math.random().toFixed(2) * 10;
      this.monsterHealth = this.monsterHealth - Math.random().toFixed(2) * 10;
    },

    specialAttack() {
      this.playerHealth = this.playerHealth - Math.random().toFixed(2) * 20;
      this.monsterHealth = this.monsterHealth - Math.random().toFixed(2) * 10;
    },
    heal() {
      this.playerHealth = this.playerHealth + Math.random() * 10;
    },

    surrender() {
      const answer = confirm('Are you sure you want to give up?');
      if (answer) {
        this.playerHealth = 100;
        this.monsterHealth = 100;
      }
    },
  },
});
app.mount('.game');




















----> AS 2 BARRAS ESTÃO SE MEXENDO CONFORME VAMOS MEXENDO NO VALOR DO 'playerHealth' 

e 

'monsterHealth'...







--> O QUE SERIA BOM, AGORA, SERIA UM __ WATCHER... --> 



2 WATCHERS...






-> UM WATCHER PARA A BARRA DO PLAYER, QUE MOSTRARÁ 'game over'

SE A VIDA DO PLAYER CHEGAR A 0




--> UM WATCHER PARA A BARRA DO MONSTER, QUE MOSTRARÁ 'YOU WIN' 

se A VIDA DELE CHEGAR A 0






(
  AMBAS AS BARRAS RESETTARÃO OS VALUES DAS BARRAS DE VIDA PARA '100'...
)














UPDATEI O CÓDIGO, FICOU ASSIM:













const app = Vue.createApp({
  data() {
    return {
      log: [],
      playerHealth: 100,
      monsterHealth: 100,
    };
  },
  watch: {
    playerHealth() {
      if (this.playerHealth < 0 && this.monsterHealth > 0) {
        alert('You have run out of HP, game over.');
        this.playerHealth = 100;
        this.monsterHealth = 100;
      }
    },

    monsterHealth() {
      if (this.monsterHealth < 0 && this.playerHealth > 0) {
        alert('You have defeated the monster, congratulations!');
        this.playerHealth = 100;
        this.monsterHealth = 100;
      }
    },
  },
  computed: {
    monsterHealthString() {
      return this.monsterHealth.toString() + '%';
    },

    playerHealthString() {
      return this.playerHealth.toString() + '%';
    },
  },
  methods: {
    attack() {
      this.playerHealth = this.playerHealth - Math.random().toFixed(2) * 10;
      this.monsterHealth = this.monsterHealth - Math.random().toFixed(2) * 10;
    },

    specialAttack() {
      this.playerHealth = this.playerHealth - Math.random().toFixed(2) * 10;
      this.monsterHealth = this.monsterHealth - Math.random().toFixed(2) * 20;
    },

    heal() {
      const healAmount = Math.random() * 10;
      if (this.playerHealth < 100 && this.playerHealth + healAmount < 100) {
        this.playerHealth = this.playerHealth + healAmount;
      } else {
        alert('You cannot heal more than your max health.');
      }
    },

    surrender() {
      const answer = confirm('Are you sure you want to give up?');
      if (answer) {
        this.playerHealth = 100;
        this.monsterHealth = 100;
      }
    },
  },
});
app.mount('.game');













---------------------



--> ESPERE... FIZ ALGO ERRADO...









--> O PROFESSOR QUER QUE AS VÁRIAS MENSAGENS 


FIQUEM OUTPUTTADAS 

LÁ 



EM UMA SECTION NO NOSSO HTML,
 E NÃO 
 QUE SEJAM ANUNCIADAS POR MEIO DE UM 'ALERT'...





AGORA A ÚNICA COISA QUE ME RESTA É O 'BATTLE LOG'...














--> E O SPECIAL ATTACK TBM NÃO FICA SEMPRE DISPONÍVEL...








--> A TELA DE 'GAME OVER'

aparece:





1) SE VOCÊ PERDE   (game over!, you lost! , start a new game)...



2) SE VOCÊ GANHA  (game over!, you won!, start a new game)...












AGORA O CÓDIGO FICOU BEM PARECIDO:













<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Jost:wght@400;700&amp;display=swap" rel="stylesheet">
    <script src="https://unpkg.com/vue@next" defer></script>
    <script src="app.js" defer></script>
    <link rel="stylesheet" href="app.css">
    <title>Monster Slayer</title>
</head>

<body>
    <header>Monster Slayer</header>
    <div class="game">
        <section id="monster">
            <h2>Monster Health</h2>
            <div class="healthbar">
                <progress class="healthbar__value" :value="monsterHealth" :style="{width: monsterHealthString}">
                </progress>
            </div>
        </section>
        <section id="player">
            <h2>Your Health</h2>
            <div class="healthbar">
                <progress class="healthbar__value" :value="playerHealth" :style="{width: playerHealthString}">
                </progress>
            </div>

        </section>

        <section id="controls" v-if="!battleStatus">
            <button @click="attack">ATTACK</button>
            <button @click="specialAttack">SPECIAL ATTACK</button>
            <button @click="heal">HEAL</button>
            <button @click="surrender">SURRENDER</button>
        </section>
        <section class="container" v-else>
            <h1>Game Over!</h1>
            <h3>You {{ battleStatus }}</h3>
            <button @click="resetGame">Start New Game</button>


        </section>
        <section id="log" class="container">
            <h2>Battle Log</h2>
            <ul>
                <li v-for="battle in log">

                </li>


            </ul>
        </section>
    </div>

</body>

</html>













E O CÓDIGO VUE:



















const app = Vue.createApp({
  data() {
    return {
      log: [],
      playerHealth: 100,
      monsterHealth: 100,
      battleStatus: null,
    };
  },
  watch: {
    playerHealth() {
      if (this.playerHealth < 0 && this.monsterHealth > 0) {
        this.battleStatus = 'lost!';
      }
    },

    monsterHealth() {
      if (this.monsterHealth < 0 && this.playerHealth > 0) {
        this.battleStatus = 'won!';
      }
    },
  },
  computed: {
    monsterHealthString() {
      return this.monsterHealth.toString() + '%';
    },

    playerHealthString() {
      return this.playerHealth.toString() + '%';
    },
  },
  methods: {
    attack() {
      this.playerHealth = this.playerHealth - Math.random().toFixed(2) * 10;
      this.monsterHealth = this.monsterHealth - Math.random().toFixed(2) * 10;
    },

    specialAttack() {
      this.playerHealth = this.playerHealth - Math.random().toFixed(2) * 10;
      this.monsterHealth = this.monsterHealth - Math.random().toFixed(2) * 20;
    },

    heal() {
      const healAmount = Math.random() * 10;
      if (this.playerHealth < 100 && this.playerHealth + healAmount < 100) {
        this.playerHealth = this.playerHealth + healAmount;
      } else {
        alert('You cannot heal more than your max health.');
      }
    },
    surrender() {
      const answer = confirm('Are you sure you want to give up?');
      if (answer) {
        this.battleStatus = 'Lost!';
      } else {
        return;
      }
    },

    resetGame() {
      this.battleStatus = null;
      this.playerHealth = 100;
      this.monsterHealth = 100;
    },
  },
});
app.mount('.game');

















FALTOU O 'BATTLE LOG'...












--> NO BATTLE LOG,
VAMOS PRECISAR __ CRIAR_ 1 'BATTLE OBJECT' para cada batalha entre o monstro e o player...









--> como faremos isso?









PRECISAMOS CRIAR UM LIST ITEM COM ESTE FORMATO:





<li> 

<p>Monster attacks and deals {{ computedProperty }}</p>
<p>Player attacks and deals {{ computedProperty }}</p>


</li>











é, isso mesmo...







----------------------











-> só falta deixar o 'special attack' 


condicional (a partir de alguma condição aleatória)...













OK, MAS COMO O GRINGO FEZ O PROJETO?









--> PROFESSOR FALA DO CÓDIGO INICIAL 







que 


controla nosso app vue...



ex:










const app = Vue.createApp({
  data() {
    return {
      log: [],
      playerHealth: 100,
      monsterHealth: 100,
      battleStatus: null,
    };
  },
  watch: {
    playerHealth() {
      if (this.playerHealth < 0 && this.monsterHealth > 0) {
        this.battleStatus = 'lost!';
      }
    },

    monsterHealth() {
      if (this.monsterHealth < 0 && this.playerHealth > 0) {
        this.battleStatus = 'won!';
        
      }
    },
  },
  computed: {
    monsterHealthString() {
      return this.monsterHealth.toString() + '%';
    },

    playerHealthString() {
      return this.playerHealth.toString() + '%';
    },
  },
  methods: {
    attack() {

      const playerDamage = Math.random().toFixed(2) * 10;
      const monsterDamage = Math.random().toFixed(2) * 10;
      this.playerHealth = this.playerHealth - playerDamage;
      this.monsterHealth = this.monsterHealth - monsterDamage;

      this.logFight(playerDamage, monsterDamage);


    },

    specialAttack() {

      const playerDamage = Math.random().toFixed(2) * 10;
      const monsterDamage = Math.random().toFixed(2) * 20;

      this.playerHealth = this.playerHealth - playerDamage;
      this.monsterHealth = this.monsterHealth - monsterDamage;

      this.logFight(monsterDamage, playerDamage);
    },

    heal() {
      const healAmount = Math.random() * 10;
      if (this.playerHealth < 100 && this.playerHealth + healAmount < 100) {
        this.playerHealth = this.playerHealth + healAmount;
        this.logFight(0, 0, healAmount);
      } else {
        alert('You cannot heal more than your max health.');
      }
    },
    surrender() {
      const answer = confirm('Are you sure you want to give up?');
      if (answer) {
        this.battleStatus = 'lost!';
        this.log = [];
      } else {
        return;
      }
    },
    resetGame() {
      this.battleStatus = null;
      this.playerHealth = 100;
      this.monsterHealth = 100;
      this.log = [];
    },

    logFight(playerDamage, monsterDamage, amountHealed=0) {
      this.log.push(
        {
          count: Math.random(),
          playerDamage: playerDamage,
          monsterDamage: monsterDamage,
          amountHealed: amountHealed
        }
      )
    }
  },
});
app.mount('.game');













-------------













----->  PRECISAMOS DE METHODS PARA 
 


 TODOS OS BUTTONS --> 




 


 A MONSTER HEALTH E A PLAYER HEALTH DEVEM 

 


 SER 

 REDUZIDAS POR MEIO 




 DE UM METHOD...










 --> O PROFESSOR ESCREVE TIPO ASSIM:









 const app = Vue.createApp(
  {
    data() {

    }
  }
 )


 app.mount('#game');












 CERTO...







 VAMOS MANAGEAR A HEALTH DO MONSTER E DO PLAYER LÁ EM 'data'.
..












eX:









 const app = Vue.createApp(
  {
    data() {

      return {
        playerHealth: 100,
        monsterHealth: 100
      }
    }
  }
 )


 app.mount('#game');














CERTO... FOI EXATAMENTE ISSO QUE EU FIZ...












--> OS METHODS SERÃO USADOS PARA 'ATTACK'....













--> O PROFESSOR CRIOU UM METHOD DE NOME 'attackMonster'...













-->  QUEREMOS CALCULAR O DAMAGE QUE ESTAMOS 

dealing,

e aí 


reduzir lá 


da health do monster...








--> COMEÇAMOS COM 'Math.random()'..






-> AÍ O PROFESSOR MULTIPLICA O 'Math.random' POR 10...












--> O PROFESSOR USA UMA FUNÇÃOZINHA para 



GERAR UM 
NÚMERO ENTRE 5 E 12...











fica tipo assim:







Math.random() * (12 - 5);







DEPOIS ELE USA 'Math.floor()'

PARA FAZER _ ROUND DOWN
 
 desse number (para não ficarmos com decimal places)...








 O CÓDIGO COMPLETO FICA 



 Math.floor(Math.random() * (12 - 5)) + 5;














 ----> OK.... O PROFESSOR COLOCA O NOME DESSE VALUE COMO 'attackValue'...








 ex:












 attackMonster() {
  const attackValue =  Math.floor(Math.random() * (12 - 5)) + 5;
 }









 ---> OK, AÍ O PROFESSOR REDUZ O VALUE DE 'this.monsterHealth' (object global vue, em que as data properties podem ser acessadas/manipuladas)..











 CERTO...





 ex:



  attackMonster() {
  const attackValue =  Math.floor(Math.random() * (12 - 5)) + 5;
  this.monsterHealth -= attackValue;
 }











 ----> ok... com isso estamos reduzindo a monsterHealth por meio desse attackValue...





 --> MAS É CLARO QUE O MONSTER TAMBÉM DEVE SER CAPAZ DE NOS ATACAR,
  COMO JOGADORES...









  --> O MONSTER DEVE SER CAPAZ DE 'ATTACK BACK'...






  --> É POR ISSO QUE O PROFESSOR CRIOU UM METHOD SEPARADO,


  de nome 
  'attackPlayer'...





  (
    ok, quer dizer que ele fez o outsourcing 

    do 

    código em 2 

    methods distintos... 


  )






  FICOU TIPO ASSIM:




    attackMonster() {
  const attackValue =  Math.floor(Math.random() * (12 - 5)) + 5;
  this.monsterHealth -= attackValue;
 }



attackPlayer() {
  const attackValue = Math.floor(Math.random() * (15 - 2)) + 7;
  this.playerHealth -= attackValue;
}













--> O PROFESSOR FAZ OUTSOURCE DESSA FUNCTION QUE FAZ O 'attackValue'


_ EM UMA FUNCTION NO LADO DE FORA 

DO VUE APP,

PARA QUE 

SEJA 

USADA 





POR NOSSO VUE APP.... (

  pq você pode fazer isso, sem problemas... outsource de functions no lado de fora do vue app....




)











-. ficou tipo assim:










function getRandomValue(min, max) {
  return Math.floor(Math.random() * (max - min) + min); 
})







CERTO...









AÍ LÁ EM BAIXO OS CALLS FICAM 



const attackValue = getRandomValue(5, 12);


const attackValue = getRandomValue(8, 15);












--> MAS UMA COISA QUE ESTÁ FALTANDO 

NESSES 2 METHODS 
É QUE 

'attackMonster'



DEVE TAMBÉM TRIGGAR 'attackPlayer'...








--> OK... 



ISSO QUER DIZER QUE PODEMOS CHAMAR METHODS COM A 'this' keyword,



no nosso próprio app vue...







--> OK... ISSO FAZ SENTIDO... EU FIZ A MESMA COISA com 'this.logFight() lá em 'attack()'.. .'...













COM ISSO, ESTAMOS ACABADOS COM O CÓDIGO JAVASCRIPT, POR ENQUANTO....









--> AGORA PRECISAMOS 

CONECTAR TUDO ISSO,

ESSES METHODS,

QUANDO 


OS BUTTONS 

SÃO CLICADOS...








TAMBÉM PRECISAMOS UPDATAR AS HEALTH BARS..





--> JÁ CONSEGUI FAZER TUDO ISSO...