















--> O PROFESSOR QUER FAZER 2 COISAS:








1) FAZER COM QUE O BOTÃO DE 'REGISTER AS COACH' APENAS APAREÇA __ QUANDO O USER _ ESTIVER 

'LOGGED IN'...





2) FAZER COM QUE O BOTÃO DE 'REQUESTS' APENAS APAREÇA QUANDO ESTIVERMOS 'LOGGED IN'...












OK... CONSEGUI FAZER O BOTÃO DE REQUESTS APARECER APENAS QUANDO ESTAMOS LOGGED IN,
E TAMBÉM 

CONSEGUI COLOCAR 1 GUARD NELE...





FICOU ASSIM:














import { createRouter, createWebHistory } from 'vue-router';

import CoachesListPage from './pages/CoachesListPage.vue';
import RequestsListPage from './pages/RequestsListPage.vue';
import AuthPage from './pages/UserAuth.vue';
import CoachDetail from './pages/CoachDetail/CoachDetail.vue';
import ContactCoach from './pages/CoachDetail/ContactCoach/ContactCoach.vue';
import NotFound from './pages/NotFound.vue';
import RegisterCoach from './pages/RegisterCoach.vue';
import store from './store/store';

const routes = [
  {
    path: '/',
    redirect: '/coaches',
  },
  {
    path: '/coaches',
    component: CoachesListPage,
  },
  {
    meta: {
      authBlock: true,
    },
    path: '/auth',
    name: 'auth',
    component: AuthPage,
  },
  {
    name: 'coach-detail',
    path: '/coaches/:id',
    component: CoachDetail,
    props: true, /// isso vai passar 'id', o value da url, COMO PROP, para dentro desse component 'Detail' (e isso é usado, mais tarde, para CARREGAR A DATA DE CADA COACH, dinamicamente)...
    children: [
      {
        name: 'contact-coach',
        path: 'contact',
        component: ContactCoach,
      },
    ],
  },
  {
    path: '/register',
    name: 'register-coach',
    component: RegisterCoach,
  },
  {
    meta: {
      needsAuth: true,
    },
    path: '/requests',
    component: RequestsListPage,
  },
  {
    path: '/notFound(.*)',
    component: NotFound,
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes: routes,
});

router.beforeEach((to, from, next) => {
  console.log(to);
  let isAuthenticated = store.getters.token;
  if (to.meta.authBlock) {
    if (isAuthenticated) {
      return next('/coaches');
    } else {
      console.log('ENTROU DOS GURI 2');
      return next(true);
    }
  }

  if (to.meta.needsAuth && to.path === '/requests') {
    console.log('ENTROU DOS GURi');
    if (isAuthenticated) {
      return next(true);
    } else {
      return next('/coaches');
    }
  }

  next(true);
});
export default router;






























CERTO...




AGORA RESTA FAZER O BUTTON DE 'REGISTER AS COACH' apenas 


virar esse button 





QUANDO ESTIVERMOS 'LOGGED IN' ( ou seja, 

quando existir 1 token no store do user)...











ACHO QUE VAI FICAR ASSIM:











<template>
  <div>
    <!-- <section id="coaches-filter">FILTER</section> -->
    <!-- SERÁ RENDERIZADO ESSE DIALOG EM CASOS DE ERROR NO FETCH DE COACHES... -->
    <base-dialog
      :show="!!error"
      title="An error occurred!"
      @close="hideDialog()"
      ><p>{{ error }}</p></base-dialog
    >
    <CoachFilter
      @toggle-filter="
        (updatedFilters) => {
          setFilters(updatedFilters);
        }
      "
    ></CoachFilter>
    <base-card>
      <section id="coaches-control">
        <div class="controls">
          <base-button :mode="'outline'" @click="loadCoaches(true)"
            >Refresh</base-button
          >
          <!-- <base-button :link="true" :to="registerCoachLink" v-if="!isCoach"
            >Register as Coach</base-button
          > -->
          <base-button
            :link="true"
            :to="registerCoachLink"
            v-if="!isCoach && !coachesLoading && token"
            >Register as Coach</base-button
          >
          <base-button :to="'/auth'" :link="true" v-if="!token"
            >Create Account</base-button
          >
        </div>
      </section>

      <section id="coaches">
        <loading-spinner v-if="coachesLoading"></loading-spinner>
        <CoachesList
          :filteredCoaches="filteredCoaches"
          v-if="!coachesLoading"
        ></CoachesList>
        <div v-if="!coachesLoading && filteredCoaches.length === 0">
          No coaches found.
        </div>
      </section>
    </base-card>
  </div>
</template>
<script>
import { mapActions, mapGetters } from "vuex";
import CoachesList from "../components/CoachesList/CoachesList.vue";
import CoachFilter from "../components/CoachesList/CoachFilter/CoachFilter.vue";
export default {
  components: {
    CoachesList,
    CoachFilter,
  },

  data() {
    return {
      activeFilters: {
        frontend: true,
        backend: true,
        career: true,
      },
      error: null,
    };
  },

  created() {
    this.loadCoaches(false)
      .then(() => {})
      .catch((err) => {
        //o throw de error, lá no 'loadCoaches', vai ser CAPTURADO aqui, para que então aconteça o error handling LOCAL...
        console.log(err);
        this.error = err || "Something went wrong.";
      });
  },

  methods: {
    ...mapActions(["loadCoaches"]),
    setFilters(updatedFilters) {
      //esse argumento é recebido pelo emit de 'toggle-filter'

      this.activeFilters = updatedFilters;
    },

    hideDialog() {
      this.error = null;
    },
  },

  computed: {
    ...mapGetters(["isCoach", "token"]),
    registerCoachLink() {
      return {
        name: "register-coach",
      };
    },

    filteredCoaches() {
      const allCoaches = this.$store.getters["coaches"];

      return allCoaches.filter((coach) => {
        if (this.activeFilters.frontend && coach.areas.includes("frontend")) {
          return true;
        }
        if (this.activeFilters.backend && coach.areas.includes("backend")) {
          return true;
        }
        if (this.activeFilters.career && coach.areas.includes("career")) {
          return true;
        }
      });
    },

    coachesLoading() {
      return this.$store.getters["coachesAreLoading"];
    },
  },
};
</script>
<style scoped>
.controls {
  display: flex;
  justify-content: space-between;
}
</style>






















OK... CONSEGUI...









MEU CÓDIGO ESTÁ FUNCIONANDO...






AGORA O BUTTON DE 'REGISTER AS COACH' apenas aparece SE:






1) estamos logged in 


2) não temos nenhum coach 

vinculado a nós...

















OK.... AGORA SÓ RESTA ADICIONAR UMA FUNCTIONALITY DE LOGOUT...






TAMBÉM UMA FUNCIONALIDADE DE 'LOCALSTORAGE', para armazenarmos essa JWT do firebase...