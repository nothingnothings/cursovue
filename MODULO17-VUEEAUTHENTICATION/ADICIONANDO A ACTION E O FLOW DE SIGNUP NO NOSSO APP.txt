









bem, VAMOS COMEÇAR COM AS ACTIONS... O PROFESSOR ADICIONA 












UMA ACTION DE SIGNUP, MAS TEREMOS 1 DE LOGIN TAMBÉM...







SERÁ TIPO ASSIm:








import axios from 'axios';

export default {
  login(context, userData) {},

  signup(context, userData) {
    const formData = userData;

    axios.post(
      `https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key=`
    );

    context.commit('signup', formData);
  },
};











CERTO... ENTRETANTO, NO LUGAR DE 'key=',



DEVEMOS INSERIR 


A API KEY DE NOSSO APP...






MAS ONDE ENCONTRAR ISSO?



fica nas configurações do firebase...





é isto:





EX:


AIzaSyBEYHhs8x2KOQfZ0FszTuNC4SymwlN1xc4







import axios from 'axios';

export default {
  login(context, userData) {},

  signup(context, userData) {
    const formData = userData;

    axios.post(
      'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBEYHhs8x2KOQfZ0FszTuNC4SymwlN1xc4'
    );

    context.commit('signup', formData);
  },
};












CERTO...







ISSO VAI CRIAR NOSSO USER,

BASTA 

ANEXAR A FORM DATA E ENVIAR NESSE REQUEST...




TIPO ASSIM:






  async signup(context, userData) {
    const formData = userData;

    const response = await axios.post(
      'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBEYHhs8x2KOQfZ0FszTuNC4SymwlN1xc4',
      formData
    );

    context.commit('signup', response.data.token);
  },















  IMAGINO QUE O RESULTADO FIQUE ASSIM (


    pq assim nós fazemos login, adquirimos um TOKEN, ou algo assim, 

    e aí 


    COMMITAMOS ISSO/ATIVAMOS A MUTATION DE 'signup',

    que 

    VAI 


    ADICIONAR ESSA TOKEN ou whatever 
    lá no state do vuex...

  )















  OK... ESTOU CERTO?








  QUASE.... 

  PQ FALTOU O PARÂMETRO DE 

  'returnSecureToken: true'...








  ESSE É UM PARÂMETRO ESPECÍFICO DO 



  FIREBASE...










  FICOU TIPO ASSIM:











  import axios from 'axios';

export default {
  login(context, userData) {},

  async signup(context, userData) {
    const formData = {
      ...userData,
      returnSecureToken: true,
    };

    try {
      const response = await axios.post(
        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBEYHhs8x2KOQfZ0FszTuNC4SymwlN1xc4',
        formData
      );

      if (response.data) {
        context.commit('signup', response.data.token);
      } else {
        context.commit('signup', null);
      }
    } catch (error) {
      throw new Error(error.message || 'Failed to Authenticate.');
    }
  },
};
















OK.. MAS QUEREMOS VER O QUE VEM NA RESPONSE 



DO FIREBASE... 



O QUE VEM É ISTO:




1) idToken 




2) email 



3) refreshToken (não é necessária, aqui).. (é usada para REFRESHAR A TOKEN, DEPOIS DE ELA FICAR EXPIRADA POR CONTA DE 'expiresIn'... )




4) expiresIn 



5) localId...  --> É O userid DO newly created user...











-->  HÁ 3 PEDAÇOS DE INFO 


IMPORTANTES/ÚTEIS:




1) idToken --> USAREMOS, MAIS TARDE, PARA ENVIAR REQUESTS E PARA RESTRINGIR OS RESOURCES...






2) expiresIn --> com ele, sabemos por quanto tempo o token é válido 





3) o userId (localId)...












-> É POR ISSO QUE VAMOS QUERER ARMAZENAR ISSO 

TUDO NO VUEX...






ALTERAMOS NOSSO CÓDIGO, PARA QUE FIQUE ASSIM:






  async signup(context, userData) {
    const formData = {
      ...userData,
      returnSecureToken: true,
    };

    try {
      const response = await axios.post(
        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBEYHhs8x2KOQfZ0FszTuNC4SymwlN1xc4',
        formData
      );

      if (response.data) {
        context.commit('signup', response.data);
      } else {
        context.commit('signup', null);
      }
    } catch (error) {
      throw new Error(error.message || 'Failed to Authenticate.');
    }
  },
















  MAS VAMOS MUDAR O COMMIT,



  VAMOS TROCAR DE 'signup'

  para 

  'setUser',

  PQ 

  ESSA ACTION 


  SERÁ DISPARADA TANTO NO SIGNUP COMO NO LOGIN....














  ESCREVEMOS TIPO ASSIM:







  export default {
  setUser(state, userData) {},
};
















OK...









E VAMOS DEFINIR O 'token', no nosso staet,

como equivalente a 


''userData.idToken'...











NA VERDADE, NOSSO CÓDIGO FICARÁ ASSIM:




















import axios from 'axios';

export default {
  login(context, userData) {},

  async signup(context, userData) {
    const formData = {
      ...userData,
      returnSecureToken: true,
    };

    try {
      const response = await axios.post(
        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBEYHhs8x2KOQfZ0FszTuNC4SymwlN1xc4',
        formData
      );

      const stateData = {
        userId: response.data.localId,
        token: response.data.idToken,
        tokenExpiration: response.data.expiresIn,
      };

      if (response.data) {
        context.commit('setUser', stateData);
      } else {
        context.commit('signup', null);
      }
    } catch (error) {
      throw new Error(error.message || 'Failed to Authenticate.');
    }
  },
};













CERTo....








AGORA PODEMOS VOLTAR 

À PAGE 

DE 


'UserAuth'



E APENAS DISPATCHEAR A ACTION 


NO MOMENTO EM QUE 

 
 A FORM FOR SUBMITTADA E TIVERMOS VALID INPUT...









 FAZEMOS TIPO ASSIM:
















 <template>
  <base-card>
    <form @submit.prevent="submitForm()">
      <div class="form-control">
        <label for="email" :class="{ invalid: !email.isValid }">Email</label>
        <input
          type="email"
          id="email"
          v-model.trim="email.val"
          @blur="clearValidity('email')"
        />
      </div>
      <div class="form-control">
        <label for="password" :class="{ invalid: !password.isValid }"
          >Password</label
        >
        <input
          type="password"
          id="password"
          v-model.trim="password.val"
          @blur="clearValidity('password')"
        />
      </div>
      <p
        v-if="
          !loginFormIsValid &&
          this.email.val.length > 0 &&
          this.password.val.length > 0
        "
      >
        Please enter a valid email and password (password must be at least 6
        characters long).
      </p>
      <p v-if="!signupFormIsValid">Please enter a valid xxxx</p>
      <base-button> {{ submitButtonCaption }}</base-button>
      <base-button @click="switchAuth" mode="flat" :link="false"
        >{{ authLinkCaption }} instead</base-button
      >
    </form>
  </base-card>
</template>
<script>
import { mapActions } from "vuex";
export default {
  data() {
    return {
      email: {
        val: "",
        isValid: true,
      },
      password: {
        val: "",
        isValid: true,
      },
      loginFormIsValid: true,
      signupFormIsValid: true,
      isLogin: true,
    };
  },

  methods: {
    ...mapActions(["signup"]),
    submitForm() {
      if (this.isLogin) {
        this.validateForm("login");
        if (!this.loginFormIsValid) {
          return;
        }
        // const loginFormData = {
        //   email: this.email.val,
        //   password: this.password.val,
        // };
      } else {
        this.validateForm("signup");
        if (!this.signupFormIsValid) {
          return;
        }

        const signupFormData = {
          email: this.email.val,
          password: this.password.val,
        };

        this.signup(signupFormData);
      }
    },

    switchAuth() {
      this.isLogin = !this.isLogin;
    },

    validateForm(mode) {
      this.formIsValid = true;
      if (mode === "login") {
        if (this.email.val === "" || !this.email.val.includes("@")) {
          this.email.isValid = false;
          this.loginFormIsValid = false;
        }

        if (this.password.val === "" || this.password.val.length < 6) {
          this.password.isValid = false;
          this.loginFormIsValid = false;
        }
      } else {
        if (this.email.val === "" || !this.email.val.includes("@")) {
          this.email.isValid = false;
          this.loginFormIsValid = false;
        }

        if (this.password.val === "") {
          this.password.isValid = false;
          this.loginFormIsValid = false;
        }
      }
    },

    clearValidity(input) {
      this[input].isValid = true;
    },
  },

  computed: {
    authLinkCaption() {
      if (this.isLogin) {
        return "Sign Up";
      } else {
        return "Log In";
      }
    },

    submitButtonCaption() {
      if (this.isLogin) {
        return "Login";
      } else {
        return "Sign Up";
      }
    },
  },
};
</script>
<style scoped>
form {
  margin: 1rem;
  padding: 1rem;
}

.form-control {
  margin: 0.5rem 0;
}

label {
  font-weight: bold;
  margin-bottom: 0.5rem;
  display: block;
}

input,
textarea {
  display: block;
  width: 100%;
  font: inherit;
  border: 1px solid #ccc;
  padding: 0.15rem;
}

input:focus,
textarea:focus {
  border-color: #3d008d;
  background-color: #faf6ff;
  outline: none;
}
</style>








--------------------------------





















OK... ISSO VAI DISPATCHEAR A ACTION E VAI 



PASSAR O PAYLOAD DE 'email' e 'password'...











TENTAMOS FAZER SIGNUP, E VEMOS QUE O USER É CRIADO NO FIREBASE...







E, SE TENTAMOS CRIAR O MESMO USER DNV,

RECEBEMOS 1 ERROR,





que dirá 'EMAIL_EXISTS'... --> PODEMOS 



USAR ISSO NA NOSSA ACTION 

PARA 



TER 1 ERROR HANDLING MELHOR --> ISSO PQ 



TAMBÉM QUEREMOS MOSTRAR 1 LOADING SPINNER ENQUANTO 

O NEGÓCIO ENVIA 



A NOSSA FORMDATA...









ok... essa parte está funcionando...