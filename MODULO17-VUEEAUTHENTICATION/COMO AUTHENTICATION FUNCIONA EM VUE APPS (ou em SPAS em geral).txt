







ANTES DE ESCREVERMOS QUALQUER CÓDIGO,

DEVEMOS 



ENTENDER COMO 
AUTH FUNCIONA 
EM VUE APPS,

OU EM QUALQUER SPA...















--> É UM POUCO DIFERENTE 


DO APPROACH TRADICIONAL
 

 DE AUTH QUE VC CONHECE DE SITES E WEBAPPS EM QUE 
 VC 

 USA 

 1 

 'SERVERSIDE LANGUAGE' --> COMO O VUE 


 FUNCIONA 

 NO BROWSER,

 AS COISAS 

 FUNCIONAM DE FORMA 1 POUCO DISTINTA...





















 --> OK,
 TEMOS:








 1) O VUE APP/SPA 








 2) NOSSO BACKEND SERVER --> AQUI É O FIREBASE, MAS PODE SER QUALQUER HTTP SERVER/REST API/GRAPHQL API...










 A QUESTÃO É QUE, NESSE SERVER,

 TEMOS 


 ALGUNS PUBLIC RESOURCES,


 MAS TAMBÉM 


 ALGUNS __ RESTRICTED RESOURCES --> POR EXEMPLO, NO NOSSO CURSO,



 TALVEZ SEJAMOS CAPAZES DE FAZER GET DE COACHES 

 E 

 'ENVIAR REQUESTS'




 SEM __ eSTARMOS LOGGED IN (public data, acessíveis a qualquer visitor)..











--> MAS, ENTÃO, 



TALVEZ TENHAMOS ALGUNS TIPOS DE REQUEST QUE DEVEM SER RESTRICTED --> 







EX:




1) SÓ PODEMOS SER CAPAZES DE 'REGISTER AS A COACH' (Create a new coach) SE 

REALMENTE ESTIVERMOS LOGGED IN...







2) MESMA COISA PARA O FETCH DE MESSAGES QUE SEU COACH RECEBEU; VC PRECISA ESTAR 

LOGGED IN PARA 


ENVIAR ESSE REQUEST E RECEBER ESSA RESPONSE...









--> NA MAIOR PARTE DOS SITES,

VC TERÁ
 
 DATA QUE 

 SERÁ ACESSÍVEL POR QUALQUER 


 1,

 E  DATA QUE SERÁ RESTRITA..












 -> A QUESTÃO É QUE NOSSO SETUP ATUAL,

 EM QUE 

 O FRONTEND 

 É 'DETACHED'

 DO BACKEND,




 EM QUE 


 OS 

 2 




NÃO SÃO SERVIDOS PELO MESMO SERVER (
    o backend não conhece o frontned...
)











EM CASOS COMO ESSES, O SERVER NÃO SE IMPORTA COM OS CLIENTS (

    com o vue app,
    no caso...
)












--> O SERVER, FIREBASE,


NÃO SE IMPORTA COM NOSSO VUE APP --> PQ ___ ELE __ NÃO ARMAZENA 

NENHUMA INFO SOBRE ESSE APP...







O FIREBASE NÃO 

ARMAZENA NENHUMA INFO SOBRE O STATUS DE LOGIN DO USER (se ele está logged in ou não)..











--> É POR ISSO QUE 

TEREMOS __ DE ENCONTRAR 1 MANEIRA DE 'STILL KEEP TRACK' 



SE _ O VISITOR DA PAGE (que está o utilizando)

ESTÁ 

LOGGED IN OU NÃO...















É CLARO QUE TUDO COMEÇA, SEMPRE,



NO SEND DE DATA DO VUE APP __ PARA __ O SERVER...











1) TEMOS UMA LOGIN PAGE NO NOSSO VUE APP ->



ASSIM QUE O USER INPUTTA ESSA DATA,

ELA É ENVIADA AO SERVER PARA OU __ CRIAR __ O USER,
 
 OU PARA LOG THE USER IN...











 --> EM UM SERVER TRADICIONAL,


 O SERVER ARMAZENARIA 1 'SESSION', 1 INFO SOBRE ESSE USER,

 E AÍ 


 __ APENAS ENVIARIA UMA 'SESSION ID' AO FRONTEND/BROWSER,


 PARA QUE 


 EXISTISSE/EXISTA  1 CONNECTION ENTRE O USER (usando o browser)



 E O 



 SERVER, QUE FICA AWARE DO USER...














 --> MAS É CLARO QUE NÃO É ASSIM QUE AS COISAS FUNCIONAM


 QUANDO 


 VC TEM UM SPA __ FALANDO COM UMA API...












 EM VEZ DISSO, AQUI,

 O SERVER NÃO ARMAZENA NENHUMA INFO,

  



E FAZ UMA COISA DIFERENTE:






1) O SERVER ENVIA UMA TOKEN DE VOLTA AO FRONTEND (VUE APP),


assim que a login data é 


VALIDADA E __ VERIFICADA...











--> ISSO QUER DIZER QUE SE ELE FOR 1 USER VÁLIDO 

TENTANDO FAZER LOGIN,

O SERVER 

GERA 1 TOKEN,

QUE É ENTÃO 

É ENVIADO AO CLIENT --> E ESSE TOKEN,

NO CASO,


É 

CRIADO 



DE MODO QUE 'APENAS O SERVER' É CAPAZ DE VALIDAR ESSA TOKEN ------> APENAS O SERVER 



VAI SER CAPAZ DE VERIFICAR SE ESSE TOKEN É VÁLIDO OU NÃO,


PQ ELE VAI TER SIDO GERADO COM 1 SECRET KEY, QUE APENAS O SERVER CONHECE --> A TOKEN 

NÃO CONSEGUE SER 'FAKED', PORTANTO...












--> A TOKEN É ENTÃO ENVIADA AO CLIENT,

E ENTÃO 

PODEMOS 

ARMAZENAR 


ESSA TOKEN NO VUEX,

OU ENTÃO 

EM LUGARES MAIS PERMANENTES,

COMO O LOCAL STORAGE..












--> E, A COISA COM O TOKEN,

É QUE 

ELE PODE SER ANEXADO AOS 'OUTGOING RESOURCES' 

PARA RESTRINGIR OS RESOURCES...










E, COMO A TOKEN É ANEXADA,



__ SE O SERVER 


RECEBE 1 REQUEST 

A 1 



SERVIÇO 

COM 1 VALID TOKEN ANEXADA,
O 

SERVER VAI GARANTIR ACESSO E VAI RETORNAR A DATA APROPRIADA..








--> SE A TOKEN ESTÁ MISSING OU INVÁLIDA,



O ACESSO É NEGADO..












--> É EXATAMENTE ESSE APPROACH QUE 

TEMOS 



COM 

'SPAS' FALANDO COM 1 API --> E É EXATAMENTE ESSE O SETUP QUE TEMOS AQUI...










--> E É ESSE CENÁRIO QUE ANALISAREMOS/APLICAREMOS NESSE MÓDULO...









--> É CLARO QUE, NO NOSSO APP,

QUEREMOS TER 
ALGUMAS 

IMPLICAÇÕES 
DO USER 

ESTAR LOGGED IN  OU NÃO,



NA PARTE VISUAL EM SI.....













--> EX:






A PARTE DE 'REQUESTS' DO MENU _ dEVERÁ SER CLICÁVEL __ APENAS __ SE 

O USER ESTIVER LOGGADO..








--> OUTRO EX:

DEVEMOS SER CAPAZES DE REGISTRAR COMO COACH (button de 'register')

APENAS 

SE 
ESTIVERMOS LOGGED in... --> caso contrário, mostraremos 1 button de 'login' ao user..



COM ESSA TEORIA FORA DO CAMINHO, DEVEMOS ADICIONAR AUTH E VER TUDO ISSO EM AÇÃO...