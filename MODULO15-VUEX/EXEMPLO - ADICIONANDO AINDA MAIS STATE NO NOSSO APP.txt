










--> OK... MAS DIGAMOS QUE NOSSO APP ESTÁ CRESCENDO..






AGORA TEREMOS 1 COMPONENT DE 'USERAUTH',

QUE 

VAI 

LIDAR COM USER AUTHENTICATION....












TEMOS ESTE CÓDIGO:













<template>
  <div>
    <button>Login</button>
    <button>Logout</button>
  </div>
</template>




<script>
export default {
    


}
</script>



<style scoped>



</style>

























É CLARO QUE PODERÍAMOS 



MANAGEAR 

ESSA AUTHENTICATION 





LOCALMENTE, NESSE APP AÍ,








MAS É CLARO QUE AUTH PODE 




IMPORTAR PARA UM MONTE DE PARTES DE NOSSO APP,




POR ISSO 



VAMOS QUERER MANAGEAR A AUTH COM O VUEX...















--> BEM, TEMOS APENAS ESSE TEMPLATE,
COM OS 2 BUTTONS...













--> AÍ VAMOS IMPORTAR ESSE COMPONENT com 






ESTE CÓDIGO:














<template>
  <div>
    <base-container title="Vuex">
      <!-- EXEMPLO DE UTILIZAÇÃO DO GLOBAL STORE DO VUEX... -->
      <!-- <h3>{{ $store.state.counter }}</h3> -->
      <TheCounter></TheCounter>
      <FavoriteValue></FavoriteValue>
      <button @click="addTwentyFive">Add 25</button>
      <ChangeCounter></ChangeCounter>
    </base-container>
    <base-container title="Auth">
      <UserAuth></UserAuth>
    </base-container>
  </div>
</template>





























--> E, COM ISSO,


VAMOS QUERER MOSTRAR 



ESSE CONTAINER 








DE 



'ADD COUNTER'



SE ESTIVERMOS 


REALMENTE AUTHENTICATED...
















--> E ISSO, É CLARO,

É ALGO QUE PODEMOS 



CONSERTAR COM O VUEX...










-------> OS BOTÕES DE LOGIN E LOGOUT DEVERÃO 


MEXER NO STATE DE NOSSO APP...
















--> O PROFESSOR QUER QUE ADICIONEMOS 1 FUNCIONALIDADE, NO VUEX,


PARA REAGIR A 1 



CLICK EM 'LOGIN' E 'LOGOUT'...





certo... vou tentar...

















CONSEGUI... FICOU TIPO ASSIM:
















import { createApp } from 'vue';
import { createStore } from 'vuex';

import App from './App.vue';

const store = createStore({
  state() {
    // ? similar a 'data', quando definimos LOCAL STATES...
    return {
      counter: 0, ///1 'GLOBAL STATE', no caso...
      authenticated: false,
    };
  },

  getters: {
    // ? QUANDO VOCÊ FOR OUTPUTTAR SEU STATE/USAR SEU STATE EM ALGUM COMPONENT, FAÇA ISSO POR MEIO DE GETTERS, e não DIRETAMENTE (pq os getters são tipo computed properties)..

    finalCounter(state, getters) {
      // ? state é o CURRENT STATE, 'getters' é uma referência aos OUTROS GETTERS (útil em algumas situações)...

      return state.counter * 2;
    },

    normalizedCounter(state, getters) {
      ///o argumento de 'getters' é usado, aqui..

      const finalCounter = getters.finalCounter;
      if (getters.finalCounter < 0) {
        return 0;
      }

      if (getters.finalCounter > 100) {
        return 100;
      }

      return finalCounter;
    },
  },

  mutations: {
    //NÃO PODEM CONTER CÓDIGO ASSÍNCRONO...
    // ? SÃO UMA FUSÃO DO 'REDUCER' COM A PARTE __ SÍNCRONA de ACTIONS (sem a parte ASSÍNCRONA, que fica a cargo das ACTIONS, no vue)....
    increment(state) {
      //exemplo de 'MUTATION', com o vue...
      state.counter = state.counter++;
    },

    incrementCustom(state, payload) {
      // ? payload é a 'DATA' que pode ser transmitida JUNTO DE SUA ACTION/MUTATION....
      ///esse payload é SEMPRE O SEGUNDO PARÂMETRO...
      state.counter = state.counter + payload;
    },

    login(state) {
      state.authenticated = true;
    },
    logout(state) {
      state.authenticated = false;
    },
  },

  actions: {
    // ? ACTIONS, POR SUA VEZ, SÃO REALMENTE CAPAZES DE RODAR CÓDIGO ASYNC (ao contrário de MUTATIONS, QUE SÓ EXECUTAM CÓDIGO SYNC NO STATE, atualizam o state de forma SYNC)....

    increment(context) {
      // ! PODEMOS USAR O MESMO NOME PARA 1 PAR 'MUTATION-ACTION' (como visto com 'increment')...

      //o parâmetro de 'context' contém várias coisas essenciais, como o method de 'commit()', usado para COMMITAR MUTATIONS...

      context.commit('increment'); //commita 1 mutation...
    },

    incrementCustom(context, payload) {
      // context.commit('incrementCustom', 25); //25 seria o PAYLOAD da mutation, NESSE CASO...
      context.commit('incrementCustom', payload); //25 seria o PAYLOAD da mutation, NESSE CASO...
    },

    delayedIncrement(context) {
      //TODO ---  ACTIONS SÃO CAPAZES DE RODAR CÓDIGO ASYNC
      setTimeout(
        () => {
          context.commit('increment');

          // context.dispatch --> para dispatchar OUTRAS ACTIONS, de dentro de sua action
          // context.getters ---> para GANHAR ACESSO AOS DERIVED VALUES DE OUTROS GETTERS
          // context.state --> PARA GANHAR ACESSO AO VALUE DE SEU STATE (sem o mutar diretamente)...
        },

        2000
      );
    },

    login(context) {
      context.commit('login');
    },

    logout(context) {
      context.commit('logout');
    },
  },
});

const app = createApp(App);

app.use(store);

app.mount('#app');















EX:












<template>
  <div>
    <button @click="login" v-if="!authenticated">Login</button>
    <button @click="logout" v-if="authenticated">Logout</button>
  </div>
</template>




<script>
import { mapActions, mapGetters } from "vuex";
export default {
  methods: {
    ...mapActions(["login", "logout"]),
  },

  computed: {
    ...mapGetters(["authenticated"]),
  },
};
</script>



<style scoped>
</style>

















OK... FAZ TOTAL SENTIDO...








E O STORE FICOU ASSIM:




















import { createApp } from 'vue';
import { createStore } from 'vuex';

import App from './App.vue';

const store = createStore({
  state() {
    // ? similar a 'data', quando definimos LOCAL STATES...
    return {
      counter: 0, ///1 'GLOBAL STATE', no caso...
      authenticated: false,
    };
  },

  getters: {
    // ? QUANDO VOCÊ FOR OUTPUTTAR SEU STATE/USAR SEU STATE EM ALGUM COMPONENT, FAÇA ISSO POR MEIO DE GETTERS, e não DIRETAMENTE (pq os getters são tipo computed properties)..

    finalCounter(state, getters) {
      // ? state é o CURRENT STATE, 'getters' é uma referência aos OUTROS GETTERS (útil em algumas situações)...

      return state.counter * 2;
    },

    normalizedCounter(state, getters) {
      ///o argumento de 'getters' é usado, aqui..

      const finalCounter = getters.finalCounter;
      if (getters.finalCounter < 0) {
        return 0;
      }

      if (getters.finalCounter > 100) {
        return 100;
      }

      return finalCounter;
    },

    authenticated(state, getters) {
      return state.authenticated;
    },
  },

  mutations: {
    //NÃO PODEM CONTER CÓDIGO ASSÍNCRONO...
    // ? SÃO UMA FUSÃO DO 'REDUCER' COM A PARTE __ SÍNCRONA de ACTIONS (sem a parte ASSÍNCRONA, que fica a cargo das ACTIONS, no vue)....
    increment(state) {
      //exemplo de 'MUTATION', com o vue...
      state.counter = state.counter++;
    },

    incrementCustom(state, payload) {
      // ? payload é a 'DATA' que pode ser transmitida JUNTO DE SUA ACTION/MUTATION....
      ///esse payload é SEMPRE O SEGUNDO PARÂMETRO...
      state.counter = state.counter + payload;
    },

    login(state) {
      state.authenticated = true;
    },
    logout(state) {
      state.authenticated = false;
    },
  },

  actions: {
    // ? ACTIONS, POR SUA VEZ, SÃO REALMENTE CAPAZES DE RODAR CÓDIGO ASYNC (ao contrário de MUTATIONS, QUE SÓ EXECUTAM CÓDIGO SYNC NO STATE, atualizam o state de forma SYNC)....

    increment(context) {
      // ! PODEMOS USAR O MESMO NOME PARA 1 PAR 'MUTATION-ACTION' (como visto com 'increment')...

      //o parâmetro de 'context' contém várias coisas essenciais, como o method de 'commit()', usado para COMMITAR MUTATIONS...

      context.commit('increment'); //commita 1 mutation...
    },

    incrementCustom(context, payload) {
      // context.commit('incrementCustom', 25); //25 seria o PAYLOAD da mutation, NESSE CASO...
      context.commit('incrementCustom', payload); //25 seria o PAYLOAD da mutation, NESSE CASO...
    },

    delayedIncrement(context) {
      //TODO ---  ACTIONS SÃO CAPAZES DE RODAR CÓDIGO ASYNC
      setTimeout(
        () => {
          context.commit('increment');

          // context.dispatch --> para dispatchar OUTRAS ACTIONS, de dentro de sua action
          // context.getters ---> para GANHAR ACESSO AOS DERIVED VALUES DE OUTROS GETTERS
          // context.state --> PARA GANHAR ACESSO AO VALUE DE SEU STATE (sem o mutar diretamente)...
        },

        2000
      );
    },

    login(context) {
      context.commit('login');
    },

    logout(context) {
      context.commit('logout');
    },
  },
});

const app = createApp(App);

app.use(store);

app.mount('#app');











----------------------







ESSA FOI UMA BOA PRÁTICA,

MAS DEVEMOS ADICIONAR MAIS STATE AO NOSSO APP....









O VUEX TAMBÉM NOS DÁ UTILITY 

METHODS E FEATURES 




TAMBÉM QUANDO O ASSUNTO É O MANAGE DE STORES MAIORES, COM DIFERENTES TIPOS DE DATA NO INTERIOR...
