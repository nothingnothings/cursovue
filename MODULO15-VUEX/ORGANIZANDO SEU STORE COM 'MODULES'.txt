







UMA FEATURE BEM LEGAL,


PROVIDENCIADA PELO VUEX,


É A POSSIBILIDADE


DE 

SETTAR 

'MODULES',


PARA 

SPLITTAR
 
 SEU STORE 

 EM MÚLTIPLOS 

 MODULES...











ISSO PQ VC SÓ PODE TER 1 ÚNICO STORE POR APP,

SIM,


MAS 

ESSE 

STORE 






PODE SER CONSTRUÍDO POR MÚLTIPLOS MODULES,

JUSTAMENTE 

PARA 
DEIXAR 

SEU CÓDIGO MAIS MANAGEABLE...









VC TEM O ROOT STATE,

MAS PODE ADICIONAR QUANTOS MODULES VC QUISER (1 PARA o counter,


OUTRO PARA O LOADING,

OUTRO PARA A AUTHENTICATION,

etc...
)














--> OU, ENTÃO,

VC 

DEIXA O AUTH NO 'ROOT STATE',


E AÍ 

FAZ OUTSOURCE DO COUNTER PARA 

1 

OUTRO MODULE...










VAMOS FAZER OUTSOURCE DO COUNTER, NO CASO..












--> PARA ISSO,


O PROFESSOR COMEÇA CRIANDO 1 OBJECT JAVASCRIPT, TIPO ASSIM:












const counterModule = {

}












--> ESSE OBJECT TERÁ __EXATAMENTE___ AS MESMAS FEATURES __ 



DO OBJECT QUE VC PASSA A 'CREATE STORE'..






eX:





const counterModule = {
    state() {

    },

    mutations: {

    },
    actions: {},

    getters: {

    }
}




const store = createStore(
    {
        state() {

        }
    }
)















OU SEJA,

ESSE 'module' VAI TER EXATAMENTE AS MESMAS 'FEATURES' DE 1 STORE CENTRAL,



MAS 'MODULARIZADO' (vai ser 1 fragmento disso, basicamente)...















EX:












import { createApp } from 'vue';
import { createStore } from 'vuex';

import App from './App.vue';

const counterModule = {
  // ? É ASSIM QUE SPLITTAMOS NOSSO STORE EM MÚLTIPLOS MÓDULOS...
  // ? conceito similar ao dos 'state slices' do redux...
  state() {
    return {
      counter: 0,
    };
  },

  mutations: {
    increment(state) {
      state.counter = state.counter++;
    },

    incrementCustom(state, payload) {
      state.counter = state.counter + payload;
    },
  },
  actions: {
    delayedIncrement(context) {
      //TODO ---  ACTIONS SÃO CAPAZES DE RODAR CÓDIGO ASYNC
      setTimeout(
        () => {
          context.commit('increment');

          // context.dispatch --> para dispatchar OUTRAS ACTIONS, de dentro de sua action
          // context.getters ---> para GANHAR ACESSO AOS DERIVED VALUES DE OUTROS GETTERS
          // context.state --> PARA GANHAR ACESSO AO VALUE DE SEU STATE (sem o mutar diretamente)...
        },

        2000
      );
    },

    increment(context) {
      // ! PODEMOS USAR O MESMO NOME PARA 1 PAR 'MUTATION-ACTION' (como visto com 'increment')...

      //o parâmetro de 'context' contém várias coisas essenciais, como o method de 'commit()', usado para COMMITAR MUTATIONS...

      context.commit('increment'); //commita 1 mutation...
    },

    incrementCustom(context, payload) {
      // context.commit('incrementCustom', 25); //25 seria o PAYLOAD da mutation, NESSE CASO...
      context.commit('incrementCustom', payload); //25 seria o PAYLOAD da mutation, NESSE CASO...
    },
  },
  getters: {
    finalCounter(state, getters) {
      // ? state é o CURRENT STATE, 'getters' é uma referência aos OUTROS GETTERS (útil em algumas situações)...

      return state.counter * 2;
    },

    normalizedCounter(state, getters) {
      ///o argumento de 'getters' é usado, aqui..

      const finalCounter = getters.finalCounter;
      if (getters.finalCounter < 0) {
        return 0;
      }

      if (getters.finalCounter > 100) {
        return 100;
      }

      return finalCounter;
    },
  },
};

const store = createStore({
  state() {
    // ? similar a 'data', quando definimos LOCAL STATES...
    return {
      // counter: 0, ///1 'GLOBAL STATE', no caso... /// FIZEMOS OUTSOURCE DISSO, NO MODULE DE 'counterModule'..
      authenticated: false,
    };
  },

  getters: {
    // ? QUANDO VOCÊ FOR OUTPUTTAR SEU STATE/USAR SEU STATE EM ALGUM COMPONENT, FAÇA ISSO POR MEIO DE GETTERS, e não DIRETAMENTE (pq os getters são tipo computed properties)..

    // finalCounter(state, getters) {
    //   // ? state é o CURRENT STATE, 'getters' é uma referência aos OUTROS GETTERS (útil em algumas situações)...

    //   return state.counter * 2;
    // },

    // normalizedCounter(state, getters) {
    //   ///o argumento de 'getters' é usado, aqui..

    //   const finalCounter = getters.finalCounter;
    //   if (getters.finalCounter < 0) {
    //     return 0;
    //   }

    //   if (getters.finalCounter > 100) {
    //     return 100;
    //   }

    //   return finalCounter;
    // },

    authenticated(state, getters) {
      return state.authenticated;
    },
  },

  mutations: {
    //NÃO PODEM CONTER CÓDIGO ASSÍNCRONO...
    // ? SÃO UMA FUSÃO DO 'REDUCER' COM A PARTE __ SÍNCRONA de ACTIONS (sem a parte ASSÍNCRONA, que fica a cargo das ACTIONS, no vue)....
    // increment(state) {
    //   exemplo de 'MUTATION', com o vue...
    //   state.counter = state.counter++;
    // },

    // incrementCustom(state, payload) {
    // ? payload é a 'DATA' que pode ser transmitida JUNTO DE SUA ACTION/MUTATION....
    ///esse payload é SEMPRE O SEGUNDO PARÂMETRO...
    //   state.counter = state.counter + payload;
    // },

    login(state) {
      state.authenticated = true;
    },
    logout(state) {
      state.authenticated = false;
    },
  },

  actions: {
    // ? ACTIONS, POR SUA VEZ, SÃO REALMENTE CAPAZES DE RODAR CÓDIGO ASYNC (ao contrário de MUTATIONS, QUE SÓ EXECUTAM CÓDIGO SYNC NO STATE, atualizam o state de forma SYNC)....

    // increment(context) {
    // ! PODEMOS USAR O MESMO NOME PARA 1 PAR 'MUTATION-ACTION' (como visto com 'increment')...

    //o parâmetro de 'context' contém várias coisas essenciais, como o method de 'commit()', usado para COMMITAR MUTATIONS...

    // context.commit('increment'); //commita 1 mutation...
    // },

    // incrementCustom(context, payload) {
    // context.commit('incrementCustom', 25); //25 seria o PAYLOAD da mutation, NESSE CASO...
    // context.commit('incrementCustom', payload); //25 seria o PAYLOAD da mutation, NESSE CASO...
    // },

    // delayedIncrement(context) {
    //TODO ---  ACTIONS SÃO CAPAZES DE RODAR CÓDIGO ASYNC
    // setTimeout(
    //   () => {
    //     context.commit('increment');

    // context.dispatch --> para dispatchar OUTRAS ACTIONS, de dentro de sua action
    // context.getters ---> para GANHAR ACESSO AOS DERIVED VALUES DE OUTROS GETTERS
    // context.state --> PARA GANHAR ACESSO AO VALUE DE SEU STATE (sem o mutar diretamente)...
    //     },

    //     2000
    //   );
    // },

    login(context) {
      context.commit('login');
    },

    logout(context) {
      context.commit('logout');
    },
  },
});

const app = createApp(App);

app.use(store);

app.mount('#app');

















COM ISSO, NOSSO 'GLOBAL STORE'

FICA BEM MAIS LEAN,


E MAIS DECENTRALIZADO...













------> PODERÍAMOS MODULARIZAR A LÓGICA DE 'auth', também...









OK, MAS COMO CONSEGUIMOS FAZER ASSIGN DESSE MODULE PARA DENTRO 

DE NOSSA STORE?











bem,


NOSSO STORE TAMBÉM ACEITA UMA KEY DE 'modules',



TIPO 




const store = createStore(
    {
        modules: {

        }
    }
)










--> DENTRO DE MODULES,



ADICIONAMOS __ TODOS OS MODULES QUE QUEREMOS 'MERGE' COMO 


1 ÚNICO 

STORE..








--> ASSIGNAMOS 1 IDENTIFIER A CADA 'SLICE'/MODULE...






ex:








const store = createStore(
    {
        modules: {

            counter: counterModule,
            auth: authModule
        }
    }
)



----------------------------




OK... AÍ MERGEAMOS ISSO TUDO PARA DENTRO DO STORE...













--> SE VC SALVA ISSO,

TUDO FUNCIONA COMO ANTES,


PQ, POR DEFAULT,


TODOS OS 'MODULES' 

MERGEADOS 

PARA 

DENTRO 
DE 
1 STORE FICAM 'NO MESMO LEVEL'...








É POR ISSO QUE PODEMOS DISPATCHEAR AS ACTIONS EXATAMENTE COMO ATNES,


E USAR TODOS OS GETTERS COMO ANTES,

EMBORA AGORA ESTEJAMOS DENTRO DE 1 MODULE..


E PODEMOS TER 

QUANTOS MODULES DESEJAMOS...









--> MAS A IDEIA 


DOS 'MODULES' NÃO ACABA POR AQUI, PODEMOS FAZER MAIS COISAS COM ELES...