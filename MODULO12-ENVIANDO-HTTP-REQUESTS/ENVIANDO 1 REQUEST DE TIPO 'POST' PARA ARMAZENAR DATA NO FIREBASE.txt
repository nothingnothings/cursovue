











--> OK... MAS COMO O FETCH FUNCIONA?












COMEÇAMOS COM 1 CÓDIGO ASSIM:








  methods: {
    submitSurvey() {
      if (this.enteredName === '' || !this.chosenRating) {
        this.invalidInput = true;
        return;
      }

      this.invalidInput = false;
      this.$emit('survey-submit', {
        userName: this.enteredName,
        rating: this.chosenRating,
      });




    fetch(
        'https://vue-http-requests-81003-default-rtdb.firebaseio.com/'
    )
      this.enteredName = '';
      this.chosenRating = null;
    },
  },

















  OK.... VAMOS COMEÇAR ASSIM, SIM... MAS 


  FALTA 


  O ARGUMENTO DE '{
    method: 'POST',

  }





  E FALTA TAMBÉM 

  


  COLOCAR '/nomeDaCollectionNaDatabase.json'....












  ex:
   






     methods: {
    submitSurvey() {
      if (this.enteredName === '' || !this.chosenRating) {
        this.invalidInput = true;
        return;
      }

      this.invalidInput = false;
      this.$emit('survey-submit', {
        userName: this.enteredName,
        rating: this.chosenRating,
      });




    fetch(
        'https://vue-http-requests-81003-default-rtdb.firebaseio.com/surveys.json'
    )
      this.enteredName = '';
      this.chosenRating = null;
    },
  },




------------------------------------------












CERTO...






ISSO 


É ALGO NECESSÁRIO PARA O FIREBASE...











--> É UM REQUISITO DO FIREBASE....











-_> QUANDO TRABALHARMOS COM  1 BACKEND DIFERENTE, NÃO PRECISAMOS COLOCAR ESSE 'xxx.json'..










-_> O FIREBASE VAI AUTOMATICAMENTE CRIAR 1 NODE NESSE DATABASE,

E ARMAZENAR NOSSA DATA NESSE NODE...














VAI FICANDO ASSIM:






     fetch(
        'https://vue-http-requests-81003-default-rtdb.firebaseio.com/surveys.json',
        {
          method: 'POST',
        }
      );














-_> É CLARO QUE TAMBÉM PRECISAMOS DE HEADERS, PRECISAMOS DO 

'Content-Type: 'application/json' ' 




ISSO COMUNICA AO SERVER QUE 

VAMOS ENVIAR 1 REQUEST DE TIPO 'JSON'...









ex:









      fetch(
        'https://vue-http-requests-81003-default-rtdb.firebaseio.com/surveys.json',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );







----------------------------











depois disso, PRECISAMOS DO BODY, QUE SERÁ A DATA QUE VAMOS ADICIONAR..











COLOCAMOS ASSIM:













      fetch(
        'https://vue-http-requests-81003-default-rtdb.firebaseio.com/surveys.json',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: {
            name: this.enteredName,
            rating: this.chosenRating,
          },
        }
      );













      --> MAS ISSO É UM JAVASCRIPT OBJECT,

      E PRECISAMOS ENVIAR JSON DATA...


      -> É POR ISSO QU PRECISAMOS RODAR O 'JSON.stringify()'


      PARA CONVERTER ESSE 



      NEGÓCIO EM JSON DATA,

      TIPO ASSIM:





            fetch(
        'https://vue-http-requests-81003-default-rtdb.firebaseio.com/surveys.json',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: this.enteredName,
            rating: this.chosenRating,
          })
        }
      );















    OK... ISSO VAI ENVIAR 1 HTTP REQUEST AO FIREBASE...










    ISSO QUER DIZER QUE 

    _ NÃO PRECISAMOS _ MAIS FAZER 'EMIT'

    DAQUELE EVENT 



    EM DIREÇAÕ AO APP PRINCIPAL 'App.vue' --> 













MAS É CLARO QUE PODERÍAMOS FAZER ISSO,



ESCREVER 1 APP EM QUE QUEREMOS ENVIAR 1 REQUEST,




MAS em que ainda QUEREMOS MANAGEAR NOSSA DATA LOCALMENTE.... 











(


    MAS COMO O PROFESSOR NÃO QUER FAZER ISSO,

    NÃO QUER MANAGEAR ISSO LOCALMENTE,



    ELE COMENTA TUDO PARA FORA...
)










--> O CÓDIGO FICA ASSIM:
















<template>
  <!-- <learning-survey @survey-submit="storeSurvey"></learning-survey>
  <user-experiences :results="savedSurveyResults"></user-experiences> -->


    <learning-survey></learning-survey>
  <user-experiences></user-experiences>
</template>

<script>
import LearningSurvey from './components/survey/LearningSurvey.vue';
import UserExperiences from './components/survey/UserExperiences.vue';

export default {
  name: 'App',
  components: {
    LearningSurvey,
    UserExperiences,
  },

  data() {
    return {
      savedSurveyResults: [],
    };
  },

  methods: {
    // storeSurvey(surveyData) {  /// deixaremos de fazer isso localmente, para fazer REMOTAMENTE, com o firebase e o component 'LearningSurvey.vue'....
    //   const surveyResult = {
    //     name: surveyData.userName,
    //     rating: surveyData.rating,
    //     id: new Date.toISOString() + Math.random().toString(),
    //   };
    //   console.log(surveyResult);
    //   this.savedSurveyResults.push(surveyResult);
    // },
  },
};
</script>

<style>
* {
  box-sizing: border-box;
}

html {
  font-family: sans-serif;
}

body {
  margin: 0;
}
</style>





















OK.... AGORA ESTAMOS ENVIANDO 1 HTTP REQUEST,
 
 lá de 'LearningSurvey'..









 --> vasculhamos o firebase --> teremos 1 node de surveys,

 em que 


 teremos esse texto, representando nossa data...




 -_> esse random text é 1 id que é gerado automaticamente pelo 

 firebase (e é bom, pq podemos usar esse ID COMO KEY, NO FRONTEND)..








 MAS COMO PODEMOS 


 PEGAR ESSA DATA DE VOLTA NO FRONTEND, QUANDO CLICAMOS NO BUTTON DE 'LOAD SUBMITTED EXPERIENCES'?









 CERTO.... FUNCIONOU...




 EX:












 