










AGORA VAMOS MOSTRAR  UMA MENSAGEM DE LOADING ENQUANTO 





NOSSO ARRAY NÃO ESTIVER PREENCHIDO 


PELOS DADOS...









-_> PARA ISSO,


VAMOS USAR 'v-if'


COM 




 1 DATA PROPERTY DE 'loading'...













 --> TIPO ASSIM:



















 <template>
  <!-- <learning-survey @survey-submit="storeSurvey"></learning-survey>
  <user-experiences :results="savedSurveyResults"></user-experiences> -->

  <!-- <div>
  <learning-survey></learning-survey>
  <user-experiences
    :results="savedSurveyResults"
    @loadExperiencesHandler="loadExperiencesHandler"
  ></user-experiences>
  </div> -->

  <div>
    <learning-survey></learning-survey>
    <user-experiences
      :results="savedSurveyResults"
      :experiencesAreLoading="experiencesAreLoading"
    ></user-experiences>
  </div>
</template>

<script>
import LearningSurvey from "./components/survey/LearningSurvey.vue";
import UserExperiences from "./components/survey/UserExperiences.vue";

export default {
  name: "App",
  components: {
    LearningSurvey,
    UserExperiences,
  },

  data() {
    return {
      savedSurveyResults: [],
      experiencesAreLoading: true,
    };
  },

  mounted() {
    this.loadExperiencesHandler();
  },

  methods: {
    // storeSurvey(surveyData) {  /// deixaremos de fazer isso localmente, para fazer REMOTAMENTE, com o firebase e o component 'LearningSurvey.vue'....
    //   const surveyResult = {
    //     name: surveyData.userName,
    //     rating: surveyData.rating,
    //     id: new Date.toISOString() + Math.random().toString(),
    //   };
    //   console.log(surveyResult);
    //   this.savedSurveyResults.push(surveyResult);
    // },

    loadExperiencesHandler() {
      fetch(
        "https://vue-http-requests-81003-default-rtdb.firebaseio.com/surveys.json",
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      )
        .then((res) => {
          if (res.ok) {
            const formattedResponse = res.json();
            console.log(formattedResponse);
            return formattedResponse;
            // this.savedSurveyResults = res.data;
          }
        })
        .then((experiences) => {
          console.log(experiences, "EXPERIENCES");

          const userExperiences = experiences;
          const experiencesArray = [];
          // this.savedSurveyResults = experiences;

          for (const experience in userExperiences) {
            experiencesArray.push({
              id: experience,
              name: experiences[experience].name,
              rating: experiences[experience].rating,
            });
          }

          this.savedSurveyResults = experiencesArray;
          this.experiencesAreLoading = false;

          console.log(this.savedSurveyResults, typeof this.savedSurveyResults);
        })
        .catch((err) => {
          console.log(err, "THE ERROR");
        });
    },
  },
};
</script>

<style>
* {
  box-sizing: border-box;
}

html {
  font-family: sans-serif;
}

body {
  margin: 0;
}
</style>















E ASSIM:



























<template>
  <section>
    <base-card>
      <h2>Submitted Experiences</h2>
      <div>
        <!-- <base-button @click="loadExperiences()"
          >Load Submitted Experiences</base-button> -->
      </div>
      <ul>
      <div v-if="experiencesAreLoading">Loading...</div>
        <survey-result
          v-for="result in results"
          :key="result.id"
          :name="result.name"
          :rating="result.rating"
        >
        </survey-result>
      </ul>
    </base-card>
  </section>
</template>

<script>
import SurveyResult from "../survey/SurveyResult";
export default {
  // props: ['results'],
  // props: ['results', 'loadExperiencesHandler'],
  props: ["results", "experiencesAreLoading"],

  components: {
    SurveyResult,
  },

  methods: {
    // loadExperiences() {
    //   console.log("ENTERED");
    //   this.$emit('loadExperiencesHandler');
    // },
  },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>


























ok....












DEU CERTO....


















ENTRETANTO, O IDEAL É COMEÇAR COMO 'FALSE',

AÍ 

DEFINIR 'TRUE' enquanto estiver carregando,

para aí definir como 'FALSE' apenas no final..





TIPO ASSIM:





















<template>
  <!-- <learning-survey @survey-submit="storeSurvey"></learning-survey>
  <user-experiences :results="savedSurveyResults"></user-experiences> -->

  <!-- <div>
  <learning-survey></learning-survey>
  <user-experiences
    :results="savedSurveyResults"
    @loadExperiencesHandler="loadExperiencesHandler"
  ></user-experiences>
  </div> -->

  <div>
    <learning-survey></learning-survey>
    <user-experiences
      :results="savedSurveyResults"
      :experiencesAreLoading="experiencesAreLoading"
    ></user-experiences>
  </div>
</template>

<script>
import LearningSurvey from "./components/survey/LearningSurvey.vue";
import UserExperiences from "./components/survey/UserExperiences.vue";

export default {
  name: "App",
  components: {
    LearningSurvey,
    UserExperiences,
  },

  data() {
    return {
      savedSurveyResults: [],
      experiencesAreLoading: false
    };
  },

  mounted() {
    this.loadExperiencesHandler();
  },

  methods: {
    // storeSurvey(surveyData) {  /// deixaremos de fazer isso localmente, para fazer REMOTAMENTE, com o firebase e o component 'LearningSurvey.vue'....
    //   const surveyResult = {
    //     name: surveyData.userName,
    //     rating: surveyData.rating,
    //     id: new Date.toISOString() + Math.random().toString(),
    //   };
    //   console.log(surveyResult);
    //   this.savedSurveyResults.push(surveyResult);
    // },

    loadExperiencesHandler() {
               this.experiencesAreLoading = true;
      fetch(
        "https://vue-http-requests-81003-default-rtdb.firebaseio.com/surveys.json",
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      )
        .then((res) => {
 
          if (res.ok) {
            const formattedResponse = res.json();
            console.log(formattedResponse);
            return formattedResponse;
            // this.savedSurveyResults = res.data;
          }
        })
        .then((experiences) => {
          console.log(experiences, "EXPERIENCES");

          const userExperiences = experiences;
          const experiencesArray = [];
          // this.savedSurveyResults = experiences;

          for (const experience in userExperiences) {
            experiencesArray.push({
              id: experience,
              name: experiences[experience].name,
              rating: experiences[experience].rating,
            });
          }

          this.savedSurveyResults = experiencesArray;
          this.experiencesAreLoading = false;

          console.log(this.savedSurveyResults, typeof this.savedSurveyResults);
        })
        .catch((err) => {
          console.log(err, "THE ERROR");
        });
    },
  },
};
</script>

<style>
* {
  box-sizing: border-box;
}

html {
  font-family: sans-serif;
}

body {
  margin: 0;
}
</style>














---------------------------------



















EX:














<template>
  <section>
    <base-card>
      <h2>Submitted Experiences</h2>
      <div>
        <!-- <base-button @click="loadExperiences()"
          >Load Submitted Experiences</base-button> -->
      </div>
      <ul>
      <div v-if="experiencesAreLoading">Loading...</div>
        <survey-result
        v-else
          v-for="result in results"
          :key="result.id"
          :name="result.name"
          :rating="result.rating"
        >
        </survey-result>
      </ul>
    </base-card>
  </section>
</template>

<script>
import SurveyResult from "../survey/SurveyResult";
export default {
  // props: ['results'],
  // props: ['results', 'loadExperiencesHandler'],
  props: ["results", "experiencesAreLoading"],

  components: {
    SurveyResult,
  },

  methods: {
    // loadExperiences() {
    //   console.log("ENTERED");
    //   this.$emit('loadExperiencesHandler');
    // },
  },
};
</script>

<style scoped>
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
</style>



















OK, ISSO ESTÁ FUNCIONANDO, ESTAMOS VENDO UM 'LOADING SPINNER/MESSAGE'



enquanto a data n chega...